diff --git a/Analysis/BasicConsistency.cc b/Analysis/BasicConsistency.cc
index 54eb8f4..b035ee9 100644
--- a/Analysis/BasicConsistency.cc
+++ b/Analysis/BasicConsistency.cc
@@ -95,10 +95,10 @@ void BasicConsistency::analyze(tEventPtr event, long, int, int) {
 	break;
       }
       problem |= 
-	isnan(test.x()/mm) || isnan(test.y()/mm) ||
-	isnan(test.z()/mm) || isnan(test.t()/mm) ||
-	isinf(test.x()/mm) || isinf(test.y()/mm) ||
-	isinf(test.z()/mm) || isinf(test.t()/mm);
+	std::isnan(test.x()/mm) || std::isnan(test.y()/mm) ||
+	std::isnan(test.z()/mm) || std::isnan(test.t()/mm) ||
+	std::isinf(test.x()/mm) || std::isinf(test.y()/mm) ||
+	std::isinf(test.z()/mm) || std::isinf(test.t()/mm);
     }
     if(problem) {
       generator()->log() << "Problem with position of " << **it << "\n"
@@ -127,7 +127,7 @@ void BasicConsistency::analyze(tEventPtr event, long, int, int) {
   Energy mag = ptotal.m();
   Energy ee  = ptotal.e();
 
-  if (isnan(mag/MeV)) {
+  if (std::isnan(mag/MeV)) {
     cerr << "\nMomentum is 'nan'; " << ptotal/MeV 
 	 << " MeV in event " << event->number() << '\n';
     generator()->log() <<"\nMomentum is 'nan'; " << ptotal/MeV 
@@ -187,7 +187,7 @@ void BasicConsistency::analyze(tEventPtr event, long, int, int) {
 	test = (*it)->lifeLength();
 	break;
       }
-      problem |= isnan(test.m2()/mm/mm) || isinf(test.m2()/mm/mm);
+      problem |= std::isnan(test.m2()/mm/mm) || std::isinf(test.m2()/mm/mm);
     }
     if(problem) {
       generator()->log() << "Problem with position of " << **it << "\n"
diff --git a/Decay/Perturbative/SMTopDecayer.cc b/Decay/Perturbative/SMTopDecayer.cc
index a99e148..ebf5b79 100644
--- a/Decay/Perturbative/SMTopDecayer.cc
+++ b/Decay/Perturbative/SMTopDecayer.cc
@@ -426,7 +426,7 @@ InvEnergy SMTopDecayer::threeBodydGammads(const int imode, const Energy2 mt2,
 						*mode(imode)->externalParticles(2));
   }
   // final spin average
-  assert(!isnan(width*GeV));
+  assert(!std::isnan(width*GeV));
   return 0.5*width;
 }
 
@@ -742,7 +742,7 @@ double SMTopDecayer::getHard(double ktb, double ktc) {
 bool SMTopDecayer::softMatrixElementVeto(ShowerProgenitorPtr initial,
 					 ShowerParticlePtr parent,Branching br) {
   // check if we need to apply the full correction
-  unsigned int id[2]={abs(initial->progenitor()->id()),abs(parent->id())};
+  long int id[2]={abs(initial->progenitor()->id()),abs(parent->id())};
   // the initial-state correction
   if(id[0]==ParticleID::t&&id[1]==ParticleID::t)
     {
@@ -911,7 +911,7 @@ double SMTopDecayer::xab(double xgb, double kt, int toggle) {
             )/2./(xgb-1.);
     }
   }
-  if(isnan(xab)) {
+  if(std::isnan(xab)) {
     double ktmktrpktmktrm = ( sqr(xgb*kt-2.*(xgb-_g))
 			      -kt*kt*(1.-1./_a)*(xgb-xgbr( 1)-_g/(1.+sqrt(_a)))
 			      *(xgb-xgbr(-1)-_g/(1.-sqrt(_a)))
@@ -924,7 +924,7 @@ double SMTopDecayer::xab(double xgb, double kt, int toggle) {
 			 ktmktrpktmktrm);
     xab = (0.5/(kt-xgb+_g))*(kt*(1.+_a-_c+_g-xgb)-lambda)
       + (0.5/(kt+xgb*(1.-kt)-_g))*(kt*(1.+_a-_c+_g-xgb)+lambda);
-    if(isnan(xab)) 
+    if(std::isnan(xab)) 
 	throw Exception() << "TopMECorrection::xab complex x_a value.\n"
 			  << "  xgb    = " << xgb    << "\n"
 			  << "  xab    = " << xab    << "\n"
@@ -1033,7 +1033,7 @@ double SMTopDecayer::xginvc0(double xg , double kt) {
     output = sinh(log((u+sqrt(4.*v3+u2))/(2.*sqrt(v3)))/3.);
     output *= 2.*sqrt(v);
   }
-  if(isnan(output)||isinf(output)) {
+  if(std::isnan(output)||std::isinf(output)) {
       throw Exception() << "TopMECorrection::xginvc0:\n"
 	  << "possible numerical instability detected.\n"
 	  << "\n v = " <<  v << "   u = " << u << "\n4.*v3+u2 = " << 4.*v3+u2
diff --git a/Decay/Radiation/FFDipole.cc b/Decay/Radiation/FFDipole.cc
index 22a90ac..a0d698d 100644
--- a/Decay/Radiation/FFDipole.cc
+++ b/Decay/Radiation/FFDipole.cc
@@ -261,7 +261,7 @@ ParticleVector FFDipole::generatePhotons(const Particle & p,
     wgt = makePhotons(-boostv,children);
 
     // Error checks
-    if ( isnan(wgt) ) {
+    if ( std::isnan(wgt) ) {
       generator()->log() << "Infinite weight for decay " 
 			 << p.PDGName() << " " 
 			 << children[0]->PDGName() 
diff --git a/Decay/Radiation/IFDipole.cc b/Decay/Radiation/IFDipole.cc
index 4796196..aa496b9 100644
--- a/Decay/Radiation/IFDipole.cc
+++ b/Decay/Radiation/IFDipole.cc
@@ -181,7 +181,7 @@ ParticleVector IFDipole::generatePhotons(const Particle & p,ParticleVector child
     wgt =makePhotons(boostv,children);
     ++ntry;
     // Record warnings about large and weird weights in the .log file.
-    if(wgt>_maxwgt||wgt<0.0||isnan(wgt)) {
+    if(wgt>_maxwgt||wgt<0.0||std::isnan(wgt)) {
       generator()->log() << "IFDipole.cc:\n";
       if(wgt>_maxwgt) {
 	generator()->log() << "Weight exceeds maximum for decay!\n"; 
@@ -189,7 +189,7 @@ ParticleVector IFDipole::generatePhotons(const Particle & p,ParticleVector child
       if(wgt<0.0) {
 	generator()->log() << "Weight is negative! \n"; 
       }
-      if(isnan(wgt)) {
+      if(std::isnan(wgt)) {
 	generator()->log() << "Weight is NAN! \n";
 	wgt = 0.;
       }
diff --git a/MatrixElement/Powheg/MEPP2VVPowheg.cc b/MatrixElement/Powheg/MEPP2VVPowheg.cc
index 2ab1bed..7e36463 100644
--- a/MatrixElement/Powheg/MEPP2VVPowheg.cc
+++ b/MatrixElement/Powheg/MEPP2VVPowheg.cc
@@ -649,7 +649,7 @@ double MEPP2VVPowheg::NLOweight() const {
   // If restricting to qg, gqb channels then subtract the LO contribution:
   if(channels_==2) wgt -= 1.;
 
-  if(isnan(wgt)||isinf(wgt)) {
+  if(std::isnan(wgt)||std::isinf(wgt)) {
     cout << "MEPP2VVPowheg:: NLO weight " 
 	 << "is bad: wgt = " << wgt << endl;
     cout << "MEPP2VVPowheg sanityCheck invoked!" << endl;
@@ -5169,7 +5169,7 @@ bool MEPP2VVPowheg::isotropicDecayer() {
   Energy m4(children_[1]->data().constituentMass());
   Energy p34(triangleFn(sqr(m1),sqr(m3),sqr(m4))
 	     /2./m1);
-  if(isnan(p34/GeV)||cth>1.||cth<-1.) return false;
+  if(std::isnan(p34/GeV)||cth>1.||cth<-1.) return false;
   Energy pT34(p34*sqrt(1.-cth)*sqrt(1.+cth));
   Lorentz5Momentum k3(pT34*sin(phi),pT34*cos(phi),p34 *cth,
 		      sqrt(p34*p34+sqr(m3)),m3);
@@ -5190,7 +5190,7 @@ bool MEPP2VVPowheg::isotropicDecayer() {
   Energy m6(children_[3]->data().constituentMass());
   Energy p56(triangleFn(sqr(m2),sqr(m5),sqr(m6))
 	     /2./m2);
-  if(isnan(p56/GeV)||cth>1.||cth<-1.) return false;
+  if(std::isnan(p56/GeV)||cth>1.||cth<-1.) return false;
   Energy pT56(p56*sqrt(1.-cth)*sqrt(1.+cth));
   Lorentz5Momentum k5(pT56*sin(phi),pT56*cos(phi),p56*cth,
 		      sqrt(p56*p56+sqr(m5)),m5);
diff --git a/Models/StandardModel/SMWWWWVertex.cc b/Models/StandardModel/SMWWWWVertex.cc
index e77e797..014342f 100644
--- a/Models/StandardModel/SMWWWWVertex.cc
+++ b/Models/StandardModel/SMWWWWVertex.cc
@@ -73,7 +73,7 @@ void SMWWWWVertex::Init() {
 void SMWWWWVertex::setCoupling(Energy2 q2,tcPDPtr a,tcPDPtr b,
 			       tcPDPtr c,tcPDPtr d) {
   // id's of the particles
-  int id[4]={a->id(),b->id(),c->id(),d->id()};
+  long int id[4]={a->id(),b->id(),c->id(),d->id()};
   // order the particles
   int ngamma(0),nz(0);
   int iorder[4];
diff --git a/Shower/Default/QTildeReconstructor.cc b/Shower/Default/QTildeReconstructor.cc
index 2c0243f..90aeec5 100644
--- a/Shower/Default/QTildeReconstructor.cc
+++ b/Shower/Default/QTildeReconstructor.cc
@@ -997,7 +997,7 @@ inverseRescalingFactor(vector<Lorentz5Momentum> pout,
     }
     while(ntry<100);
   }
-  if(isnan(lambda))
+  if(std::isnan(lambda))
     throw Exception() << "Rescaling factor is nan in  QTildeReconstructor::"
 		      << "inverseRescalingFactor " 
 		      << Exception::eventerror;
diff --git a/Shower/Default/QTildeShowerKinematics1to2.cc b/Shower/Default/QTildeShowerKinematics1to2.cc
index b0ddce5..42a0dea 100644
--- a/Shower/Default/QTildeShowerKinematics1to2.cc
+++ b/Shower/Default/QTildeShowerKinematics1to2.cc
@@ -32,7 +32,7 @@ void QTildeShowerKinematics1to2::setBasis(const Lorentz5Momentum &p,
 Lorentz5Momentum QTildeShowerKinematics1to2::
 sudakov2Momentum(double alpha, double beta, Energy px, 
 		 Energy py,unsigned int iopt) const {
-  if(isnan(beta)||isinf(beta)) 
+  if(std::isnan(beta)||std::isinf(beta)) 
     throw Exception() << "beta infinite in "
 		      << "QTildeShowerKinematics1to2::sudakov2Momentum()"
 		      << Exception::eventerror;
diff --git a/Utilities/Histogram.h b/Utilities/Histogram.h
index 7262a01..98964e5 100644
--- a/Utilities/Histogram.h
+++ b/Utilities/Histogram.h
@@ -111,7 +111,7 @@ public:
    *  Function to add a weighted point to the histogram
    */
   void addWeighted(double input, double weight) {
-    if(isnan(input)) return;
+    if(std::isnan(input)) return;
     unsigned int ibin;
     for(ibin=1; ibin<_bins.size(); ++ibin) {
       if(input<_bins[ibin].limit)
