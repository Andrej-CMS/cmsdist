diff -aur root.orig/math/matrix/inc/TDecompSVD.h root/math/matrix/inc/TDecompSVD.h
--- root.orig/math/matrix/inc/TDecompSVD.h	2011-05-07 22:11:03.000000000 +0200
+++ root/math/matrix/inc/TDecompSVD.h	2011-06-09 17:38:37.000000000 +0200
@@ -52,8 +52,8 @@
    virtual ~TDecompSVD() {}
 
            const TMatrixD  GetMatrix ();
-   virtual       Int_t     GetNrows  () const { return fU.GetNrows(); }
-   virtual       Int_t     GetNcols  () const { return fV.GetNcols(); }
+   virtual Int_t     GetNrows  () const;
+   virtual Int_t     GetNcols  () const;
            const TMatrixD &GetU      ()       { if ( !TestBit(kDecomposed) ) Decompose();
                                                  return fU; }
            const TMatrixD &GetV      ()       { if ( !TestBit(kDecomposed) ) Decompose();
diff -aur root.orig/math/matrix/src/TDecompSVD.cxx root/math/matrix/src/TDecompSVD.cxx
--- root.orig/math/matrix/src/TDecompSVD.cxx	2011-05-07 22:11:03.000000000 +0200
+++ root/math/matrix/src/TDecompSVD.cxx	2011-06-09 17:38:40.000000000 +0200
@@ -855,6 +855,17 @@
 }
 
 //______________________________________________________________________________
+Int_t  TDecompSVD::GetNrows  () const 
+{ 
+   return fU.GetNrows(); 
+}
+
+Int_t TDecompSVD::GetNcols  () const 
+{
+   return fV.GetNcols();
+}
+
+//______________________________________________________________________________
 Bool_t TDecompSVD::Invert(TMatrixD &inv)
 {
 // For a matrix A(m,n), its inverse A_inv is defined as A * A_inv = A_inv * A = unit
@@ -864,7 +875,7 @@
 
    const Int_t rowLwb = GetRowLwb();
    const Int_t colLwb = GetColLwb();
-   const Int_t nRows  = GetNrows();
+   const Int_t nRows  = fU.GetNrows();
 
    if (inv.GetNrows()  != nRows  || inv.GetNcols()  != nRows ||
        inv.GetRowLwb() != rowLwb || inv.GetColLwb() != colLwb) {
@@ -886,11 +897,11 @@
 
    const Int_t rowLwb = GetRowLwb();
    const Int_t colLwb = GetColLwb();
-   const Int_t rowUpb = rowLwb+GetNrows()-1;
-   TMatrixD inv(rowLwb,rowUpb,colLwb,colLwb+GetNrows()-1);
+   const Int_t rowUpb = rowLwb+fU.GetNrows()-1;
+   TMatrixD inv(rowLwb,rowUpb,colLwb,colLwb+fU.GetNrows()-1);
    inv.UnitMatrix();
    status = MultiSolve(inv);
-   inv.ResizeTo(rowLwb,rowLwb+GetNcols()-1,colLwb,colLwb+GetNrows()-1);
+   inv.ResizeTo(rowLwb,rowLwb+fV.GetNcols()-1,colLwb,colLwb+fU.GetNrows()-1);
 
    return inv;
 }
