diff --git a/cmake/modules/CheckCompiler.cmake b/cmake/modules/CheckCompiler.cmake
index 3fb0a4e..cf91614 100644
--- a/cmake/modules/CheckCompiler.cmake
+++ b/cmake/modules/CheckCompiler.cmake
@@ -80,6 +80,11 @@ if(cxx11 AND cxx14)
   message(STATUS "c++11 mode requested but superseded by request for c++14 mode")
   set(cxx11 OFF CACHE BOOL "" FORCE)
 endif()
+if((cxx11 OR cxx14) AND cxx17)
+  message(STATUS "c++11 or c++14 mode requested but superseded by request for c++17 mode")
+  set(cxx11 OFF CACHE BOOL "" FORCE)
+  set(cxx14 OFF CACHE BOOL "" FORCE)
+endif()
 if(cxx11)
   CHECK_CXX_COMPILER_FLAG("-std=c++11" HAS_CXX11)
   if(NOT HAS_CXX11)
@@ -95,6 +100,14 @@ if(cxx14)
   endif()
   set(root7 On)
 endif()
+if(cxx17)
+  CHECK_CXX_COMPILER_FLAG("-std=c++17" HAS_CXX17)
+  if(NOT HAS_CXX17)
+    message(STATUS "Current compiler does not suppport -std=c++17 option. Switching OFF cxx17 option")
+    set(cxx17 OFF CACHE BOOL "" FORCE)
+  endif()
+  set(root7 On)
+endif()
 if(root7)
   if(NOT cxx14)
     message(STATUS "ROOT7 interfaces require cxx14 which is disabled. Switching OFF root7 option")
@@ -172,6 +185,10 @@ if(cxx14)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
 endif()
 
+if(cxx17)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
+endif()
+
 if(libcxx)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
 endif()
diff --git a/cmake/modules/RootBuildOptions.cmake b/cmake/modules/RootBuildOptions.cmake
index ce80978..0eed05f 100644
--- a/cmake/modules/RootBuildOptions.cmake
+++ b/cmake/modules/RootBuildOptions.cmake
@@ -86,6 +86,7 @@ ROOT_BUILD_OPTION(builtin_tbb OFF "Build the TBB internally")
 ROOT_BUILD_OPTION(builtin_vc OFF "Build the Vc package internally")
 ROOT_BUILD_OPTION(cxx11 ON "Build using C++11 compatible mode, requires gcc > 4.7.x or clang")
 ROOT_BUILD_OPTION(cxx14 OFF "Build using C++14 compatible mode, requires gcc > 4.9.x or clang")
+ROOT_BUILD_OPTION(cxx17 OFF "Build using C++17 compatible mode, requires gcc >= 7.0.0 or clang")
 ROOT_BUILD_OPTION(libcxx OFF "Build using libc++, requires cxx11 option (MacOS X only, for the time being)")
 ROOT_BUILD_OPTION(cxxmodules "Compile with C++ modules enabled." OFF)
 ROOT_BUILD_OPTION(castor ON "CASTOR support, requires libshift from CASTOR >= 1.5.2")
diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index e119d5b..38f61e6 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -479,6 +479,12 @@ if(cxx14)
 else()
   set(usec++14 undef)
 endif()
+if(cxx17)
+  set(cxxversion cxx17)
+  set(usec++17 define)
+else()
+  set(usec++17 undef)
+endif()
 if(libcxx)
   set(uselibc++ define)
 else()
@@ -493,7 +499,7 @@ else()
 endif()
 
 CHECK_CXX_SOURCE_COMPILES("#include <string_view>
-  int main() { std::string_view().to_string(); return 0;}" found_stdstringview)
+  int main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}" found_stdstringview)
 if(found_stdstringview)
   set(hasstdstringview define)
 else()
diff --git a/config/RConfigure.in b/config/RConfigure.in
index 5140669..f5acfa5 100644
--- a/config/RConfigure.in
+++ b/config/RConfigure.in
@@ -26,6 +26,7 @@
 #@hasvc@ R__HAS_VC    /**/
 #@usec++11@ R__USE_CXX11    /**/
 #@usec++14@ R__USE_CXX14    /**/
+#@usec++17@ R__USE_CXX17    /**/
 #@uselibc++@ R__USE_LIBCXX    /**/
 #@hasstdstringview@ R__HAS_STD_STRING_VIEW   /**/
 #@hasstdexpstringview@ R__HAS_STD_EXPERIMENTAL_STRING_VIEW   /**/
diff --git a/core/base/inc/ROOT/StringConv.hxx b/core/base/inc/ROOT/StringConv.hxx
index 629fc18..b0352b2 100644
--- a/core/base/inc/ROOT/StringConv.hxx
+++ b/core/base/inc/ROOT/StringConv.hxx
@@ -89,7 +89,7 @@ EFromHumanReadableSize FromHumanReadableSize(std::string_view str, T &value)
       size_t size = str.size();
       size_t cur;
       // Parse leading numeric factor
-      const double coeff = stod(str, &cur);
+      const double coeff = stod(std::string(str.data(), str.size()), &cur);
 
       // Skip any intermediate white space
       while (cur<size && isspace(str[cur])) ++cur;
diff --git a/core/base/inc/Rtypes.h b/core/base/inc/Rtypes.h
index 56c9093..2ac4eb0 100644
--- a/core/base/inc/Rtypes.h
+++ b/core/base/inc/Rtypes.h
@@ -271,7 +271,7 @@ public: \
    namespace ROOT { \
       TGenericClassInfo *GenerateInitInstance(const name*); \
       namespace { \
-         static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) = \
+         static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) __attribute__ ((unused)) = \
             GenerateInitInstance((name*)0x0)->SetImplFile(__FILE__, __LINE__); \
          R__UseDummy(_R__UNIQUE_(_NAME2_(R__dummyint,key))); \
       } \
diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h
index 22526ae..121e3a4 100644
--- a/core/base/inc/TString.h
+++ b/core/base/inc/TString.h
@@ -114,7 +114,7 @@ public:
    char          operator[](Ssiz_t i) const;     // Index with bounds checking
 
    operator std::string_view() const { return std::string_view(Data(),fExtent); }
-   operator std::string() const { return std::string_view(Data(),fExtent).to_string(); }
+   operator std::string() const { return std::string(Data(),fExtent); }
 
    const char   *Data() const;
    Ssiz_t        Length() const          { return fExtent; }
diff --git a/core/base/src/TString.cxx b/core/base/src/TString.cxx
index c02ffa7..05e9838 100644
--- a/core/base/src/TString.cxx
+++ b/core/base/src/TString.cxx
@@ -2643,7 +2643,7 @@ std::string cling::printValue(const TSubString* val) {
 /// Print a TString in the cling interpreter:
 
 std::string cling::printValue(const std::string_view* val) {
-   std::string str(*val);
+   std::string str(val->data(), val->size());
    TString s = TString::Format("\"%s\"[%d]", str.c_str(), (int)val->length());
    return s.Data();
 }
diff --git a/core/meta/src/TCling.cxx b/core/meta/src/TCling.cxx
index 07dffaf..4980075 100644
--- a/core/meta/src/TCling.cxx
+++ b/core/meta/src/TCling.cxx
@@ -756,7 +756,7 @@ int TCling_GenerateDictionary(const std::vector<std::string> &classes,
                gSystem->PrependPathName(dirbase, header);
                dir = gSystem->DirName(dir);
             }
-            fileContent += TString("#include \"") + header + "\"\n";
+            fileContent += std::string("#include \"") + static_cast<const char *>(header)+ "\"\n";
          }
       }
       for (it = fwdDecls.begin(); it != fwdDecls.end(); ++it) {
diff --git a/core/metautils/inc/RStringView.h b/core/metautils/inc/RStringView.h
index 86e1d14..033c06c 100644
--- a/core/metautils/inc/RStringView.h
+++ b/core/metautils/inc/RStringView.h
@@ -29,7 +29,11 @@
 namespace std {
 
    template<class _CharT, class _Traits = std::char_traits<_CharT> >
+// What happens if we don't have std::basic_string_view and
+// std::experimental::basic_string_view?
+#if !defined(R__HAS_STD_STRING_VIEW) && defined(R__HAS_STD_EXPERIMENTAL_STRING_VIEW)
    using basic_string_view = ::std::experimental::basic_string_view<_CharT,_Traits>;
+#endif
 
    // basic_string_view typedef names
    typedef basic_string_view<char> string_view;
@@ -47,7 +51,9 @@ namespace std {
 #ifndef R__HAS_STOD_STRING_VIEW
    inline double stod(std::string_view str, size_t *pos)
    {
-      return std::stod(str.to_string(),pos);
+// to_string() method didn't make into C++17, but the following should be compatible
+// with std::sting_view and std::experimental::string_view.
+      return std::stod(std::string(str.data(), str.size()), pos);
    }
 #endif
 
diff --git a/core/metautils/src/BaseSelectionRule.cxx b/core/metautils/src/BaseSelectionRule.cxx
index f43b900..337cee8 100644
--- a/core/metautils/src/BaseSelectionRule.cxx
+++ b/core/metautils/src/BaseSelectionRule.cxx
@@ -314,7 +314,7 @@ BaseSelectionRule::EMatchType BaseSelectionRule::Match(const clang::NamedDecl *d
          if (!patternMatched &&
                D &&
                //ROOT::TMetaUtils::IsStdDropDefaultClass(*D)) {
-               0 != TClassEdit::IsSTLCont(name)) {
+               0 != TClassEdit::IsSTLCont(std::string_view(name.data(), name.size()))) {
             TClassEdit::GetNormalizedName(auxName, name.c_str());
             if (name.size() != auxName.size()) {
                auxName = TClassEdit::InsertStd(auxName.c_str());
diff --git a/core/metautils/src/TClassEdit.cxx b/core/metautils/src/TClassEdit.cxx
index 544ae3d..a1a824e 100644
--- a/core/metautils/src/TClassEdit.cxx
+++ b/core/metautils/src/TClassEdit.cxx
@@ -137,7 +137,7 @@ TClassEdit::TSplitType::TSplitType(const char *type2split, EModType mode) : fNam
 ROOT::ESTLType TClassEdit::TSplitType::IsInSTL() const
 {
    if (fElements[0].empty()) return ROOT::kNotSTL;
-   return STLKind(fElements[0]);
+   return STLKind(std::string_view(fElements[0].data(), fElements[0].size()));
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -164,7 +164,7 @@ int TClassEdit::TSplitType::IsSTLCont(int testAlloc) const
       return 0;
    }
 
-   int kind = STLKind(fElements[0]);
+   int kind = STLKind(std::string_view(fElements[0].data(), fElements[0].size()));
 
    if (kind==ROOT::kSTLvector || kind==ROOT::kSTLlist || kind==ROOT::kSTLforwardlist) {
 
@@ -239,7 +239,7 @@ void TClassEdit::TSplitType::ShortType(std::string &answ, int mode)
    //    fprintf(stderr,"calling ShortType %d for %s with narg %d tail %d\n",imode,typeDesc,narg,tailLoc);
 
    //kind of stl container
-   const int kind = STLKind(fElements[0]);
+   const int kind = STLKind(std::string_view(fElements[0].data(), fElements[0].size()));
    const int iall = STLArgs(kind);
 
    // Only class is needed
@@ -714,7 +714,7 @@ static bool IsDefElement(const char *elementName, const char* defaultElementName
 {
    string c = elementName;
 
-   size_t pos = StdLen(c);
+   size_t pos = StdLen(std::string_view(c.data(), c.size()));
 
    const int elementlen = strlen(defaultElementName);
    if (c.compare(pos,elementlen,defaultElementName) != 0) {
@@ -787,7 +787,7 @@ bool TClassEdit::IsDefHash(const char *hashname, const char *classname)
 
 void TClassEdit::GetNormalizedName(std::string &norm_name, std::string_view name)
 {
-   norm_name = std::string(name); // NOTE: Is that the shortest version?
+   norm_name = std::string(name.data(), name.size()); // NOTE: Is that the shortest version?
 
    // Remove the std:: and default template argument and insert the Long64_t and change basic_string to string.
    TClassEdit::TSplitType splitname(norm_name.c_str(),(TClassEdit::EModType)(TClassEdit::kLong64 | TClassEdit::kDropStd | TClassEdit::kDropStlDefault | TClassEdit::kKeepOuterConst));
@@ -1342,7 +1342,7 @@ bool TClassEdit::IsStdClass(const char *classname)
 bool TClassEdit::IsVectorBool(const char *name) {
    TSplitType splitname( name );
 
-   return ( TClassEdit::STLKind( splitname.fElements[0] ) == ROOT::kSTLvector)
+   return ( TClassEdit::STLKind( std::string_view(splitname.fElements[0].data(), splitname.fElements[0].size()) ) == ROOT::kSTLvector)
       && ( splitname.fElements[1] == "bool" || splitname.fElements[1]=="Bool_t");
 }
 
@@ -1871,8 +1871,10 @@ class NameCleanerForIO {
       if (!mother) return false;
       bool isSTLContOrArray = true;
       while (nullptr != mother){
-         auto stlType = TClassEdit::IsSTLCont(mother->fName+"<>");
-         isSTLContOrArray &= ROOT::kNotSTL != stlType || TClassEdit::IsStdArray(mother->fName+"<");
+         auto tmpStr = mother->fName+"<>";
+         auto stlType = TClassEdit::IsSTLCont(std::string_view(tmpStr.data(), tmpStr.size()));
+         tmpStr = mother->fName+"<";
+         isSTLContOrArray &= ROOT::kNotSTL != stlType || TClassEdit::IsStdArray(std::string_view(tmpStr.data(), tmpStr.size()));
          mother = mother->fMother;
       }
 
@@ -1951,7 +1953,8 @@ public:
 
       // We have in hands a case like unique_ptr< ... >
       // Perhaps we could treat atomics as well like this?
-      if (!fMother && TClassEdit::IsUniquePtr(fName+"<")) {
+      auto tmpStr = fName+"<";
+      if (!fMother && TClassEdit::IsUniquePtr(std::string_view(tmpStr.data(), tmpStr.size()))) {
          name = fArgumentNodes.front()->ToString();
          fHasChanged = true;
          return name;
@@ -1959,7 +1962,8 @@ public:
 
       // Now we treat the case of the collections of unique ptrs
       auto stlContType = AreAncestorsSTLContOrArray();
-      if (stlContType != ROOT::kNotSTL && TClassEdit::IsUniquePtr(fName+"<")) {
+      tmpStr = fName+"<";
+      if (stlContType != ROOT::kNotSTL && TClassEdit::IsUniquePtr(std::string_view(tmpStr.data(), tmpStr.size()))) {
          name = fArgumentNodes.front()->ToString();
          name += "*";
          fHasChanged = true;
@@ -2018,7 +2022,8 @@ bool TClassEdit::GetStdArrayProperties(const char* typeName,
    for (ndim = 1;ndim <=5 ; ndim++) {
       maxIndices[ndim-1] = std::atoi(childNodes->back()->GetName().c_str());
       typeNameBuf = childNodes->front()->GetName();
-      if (! IsStdArray(typeNameBuf+"<")) return true;
+      auto tmpStr = typeNameBuf+"<";
+      if (! IsStdArray(std::string_view(tmpStr.data(), tmpStr.size()))) return true;
       childNodes = childNodes->front()->GetChildNodes();
    }
 
diff --git a/core/multiproc/inc/TPoolProcessor.h b/core/multiproc/inc/TPoolProcessor.h
index 883b73b..a6d31e9 100644
--- a/core/multiproc/inc/TPoolProcessor.h
+++ b/core/multiproc/inc/TPoolProcessor.h
@@ -119,7 +119,7 @@ void TPoolProcessor<F>::HandleInput(MPCodeBufPair& msg)
       //unknown code received
       std::string reply = "S" + std::to_string(GetNWorker());
       reply += ": unknown code received: " + std::to_string(code);
-      MPSend(GetSocket(), MPCode::kError, reply.data());
+      MPSend(GetSocket(), MPCode::kError, reply.c_str());
    }
 }
 
@@ -216,7 +216,7 @@ void TPoolProcessor<F>::Process(unsigned code, MPCodeBufPair& msg)
    if(status != TTreeReader::kEntryValid) {
       std::string reply = "S" + std::to_string(GetNWorker());
       reply += ": could not set TTreeReader to range " + std::to_string(start) + " " + std::to_string(finish);
-      MPSend(GetSocket(), PoolCode::kProcError, reply.data());
+      MPSend(GetSocket(), PoolCode::kProcError, reply.c_str());
       return;
    }
 
diff --git a/core/multiproc/inc/TPoolWorker.h b/core/multiproc/inc/TPoolWorker.h
index 9fa9c13..a8f05db 100644
--- a/core/multiproc/inc/TPoolWorker.h
+++ b/core/multiproc/inc/TPoolWorker.h
@@ -110,7 +110,7 @@ public:
          MPSend(s, PoolCode::kFuncResult, fReducedResult);
       } else {
          reply += ": unknown code received: " + std::to_string(code);
-         MPSend(s, MPCode::kError, reply.data());
+         MPSend(s, MPCode::kError, reply.c_str());
       }
    }
 
@@ -153,7 +153,7 @@ public:
          MPSend(s, PoolCode::kFuncResult, fReducedResult);
       } else {
          reply += ": unknown code received: " + std::to_string(code);
-         MPSend(s, MPCode::kError, reply.data());
+         MPSend(s, MPCode::kError, reply.c_str());
       }
    }
 
@@ -180,7 +180,7 @@ public:
          MPSend(s, PoolCode::kFuncResult, fFunc(fArgs[n]));
       } else {
          reply += ": unknown code received: " + std::to_string(code);
-         MPSend(s, MPCode::kError, reply.data());
+         MPSend(s, MPCode::kError, reply.c_str());
       }
    }
 
diff --git a/core/multiproc/src/TMPWorker.cxx b/core/multiproc/src/TMPWorker.cxx
index 8bd61b5..2fabb63 100644
--- a/core/multiproc/src/TMPWorker.cxx
+++ b/core/multiproc/src/TMPWorker.cxx
@@ -150,18 +150,18 @@ void TMPWorker::HandleInput(MPCodeBufPair &msg)
    if (code == MPCode::kMessage) {
       //general message, ignore it
       reply += ": ok";
-      MPSend(fS.get(), MPCode::kMessage, reply.data());
+      MPSend(fS.get(), MPCode::kMessage, reply.c_str());
    } else if (code == MPCode::kError) {
       //general error, ignore it
       reply += ": ko";
-      MPSend(fS.get(), MPCode::kMessage, reply.data());
+      MPSend(fS.get(), MPCode::kMessage, reply.c_str());
    } else if (code == MPCode::kShutdownOrder || code == MPCode::kFatalError) {
       //client is asking the server to shutdown or client is dying
-      MPSend(fS.get(), MPCode::kShutdownNotice, reply.data());
+      MPSend(fS.get(), MPCode::kShutdownNotice, reply.c_str());
       gSystem->Exit(0);
    } else {
       reply += ": unknown code received. code=" + std::to_string(code);
-      MPSend(fS.get(), MPCode::kError, reply.data());
+      MPSend(fS.get(), MPCode::kError, reply.c_str());
    }
 }
 
@@ -268,5 +268,5 @@ void TMPWorker::SetupTreeCache(TTree *tree)
 void TMPWorker::SendError(const std::string& errmsg, unsigned int errcode)
 {
    std::string reply = fId + ": " + errmsg;
-   MPSend(GetSocket(), errcode, reply.data());
+   MPSend(GetSocket(), errcode, reply.c_str());
 }
diff --git a/core/newdelete/src/NewDelete.cxx b/core/newdelete/src/NewDelete.cxx
index c342656..03f2f57 100644
--- a/core/newdelete/src/NewDelete.cxx
+++ b/core/newdelete/src/NewDelete.cxx
@@ -175,7 +175,7 @@ static TReAllocInit gReallocInit;
 #   endif
 #endif
 
-#ifdef R__THROWNEWDELETE
+#if defined(R__THROWNEWDELETE) && __cplusplus <= 201402L
 #   ifdef R__OLDHPACC
 #      define R__THROW_BAD  throw(bad_alloc)
 #   else
diff --git a/hist/hist/src/TFormula.cxx b/hist/hist/src/TFormula.cxx
index ade8287..f34003f 100644
--- a/hist/hist/src/TFormula.cxx
+++ b/hist/hist/src/TFormula.cxx
@@ -1618,7 +1618,7 @@ void TFormula::ProcessFormula(TString &formula)
          if(fun.fName.Contains("::")) // add support for nested namespaces
          {
             // look for last occurence of "::"
-            std::string name(fun.fName);
+            std::string name(static_cast<const char *>(fun.fName));
             size_t index = name.rfind("::");
             assert(index != std::string::npos);
             TString className = fun.fName(0,fun.fName(0,index).Length());
@@ -1810,7 +1810,7 @@ void TFormula::ProcessFormula(TString &formula)
 
          // save copy of inputFormula in a std::strig for the unordered map
          // and also formula is same as FClingInput typically and it will be modified
-         std::string inputFormula = std::string(formula);
+         std::string inputFormula = std::string(static_cast<const char *>(formula));
 
 
          // valid input formula - try to put into Cling
diff --git a/html/src/TClassDocOutput.cxx b/html/src/TClassDocOutput.cxx
index 9bbd438..3939478 100644
--- a/html/src/TClassDocOutput.cxx
+++ b/html/src/TClassDocOutput.cxx
@@ -971,7 +971,7 @@ Bool_t TClassDocOutput::CreateDotClassChartIncl(const char* filename) {
             if (!GetHtml()->GetPathDefinition().GetFileNameFromInclude(line.c_str(), sysfilename))
                continue;
             listFilesToParse.push_back(line);
-            filesToParse[line] = sysfilename;
+            filesToParse[line] = static_cast<const char *>(sysfilename);
             if (*iFile == implFileName.Data() || *iFile == declFileName.Data())
                outdot << "\"" << *iFile << "\" [style=filled,fillcolor=lightgray];" << std::endl;
          }
diff --git a/interpreter/CMakeLists.txt b/interpreter/CMakeLists.txt
index bc0f514..6ed8fc1 100644
--- a/interpreter/CMakeLists.txt
+++ b/interpreter/CMakeLists.txt
@@ -9,7 +9,9 @@ set(LLVM_FORCE_USE_OLD_TOOLCHAIN ON CACHE BOOL "")
 # to serialize access to llvm.  We can later review how to make this finer grained by using llvm's own locking
 # mechanism.
 set(LLVM_ENABLE_THREADS OFF CACHE BOOL "")
-if(cxx14)
+if(cxx17)
+  set(LLVM_ENABLE_CXX1Z ON CACHE BOOL "" FORCE)
+elseif(cxx14)
   set(LLVM_ENABLE_CXX1Y ON CACHE BOOL "" FORCE)
 endif()
 
diff --git a/interpreter/cling/lib/Interpreter/CIFactory.cpp b/interpreter/cling/lib/Interpreter/CIFactory.cpp
index f5a56ba..74b52c5 100644
--- a/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -846,7 +846,10 @@ namespace {
     // the test for C++14 or more (201402L) as previously specified.
     // I would claim that the check should be relaxed to:
 
-#if __cplusplus > 201103L
+#if __cplusplus > 201402L
+    if (Opts.CPlusPlus) Opts.CPlusPlus1z = 1;
+#endif
+#if __cplusplus >= 201402L
     if (Opts.CPlusPlus) Opts.CPlusPlus14 = 1;
 #endif
 #if __cplusplus >= 201103L
diff --git a/interpreter/llvm/src/CMakeLists.txt b/interpreter/llvm/src/CMakeLists.txt
index b9e1101..ab7ff67 100644
--- a/interpreter/llvm/src/CMakeLists.txt
+++ b/interpreter/llvm/src/CMakeLists.txt
@@ -291,6 +291,7 @@ else()
   option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY "Compile with -fmodules-local-submodule-visibility." ON)
 endif()
 option(LLVM_ENABLE_CXX1Y "Compile with C++1y enabled." OFF)
+option(LLVM_ENABLE_CXX1Z "Compile with C++1z enabled." OFF)
 option(LLVM_ENABLE_LIBCXX "Use libc++ if available." OFF)
 option(LLVM_ENABLE_LIBCXXABI "Use libc++abi when using libc++." OFF)
 option(LLVM_ENABLE_PEDANTIC "Compile with pedantic enabled." ON)
diff --git a/interpreter/llvm/src/cmake/modules/HandleLLVMOptions.cmake b/interpreter/llvm/src/cmake/modules/HandleLLVMOptions.cmake
index 44ba565..9e85103 100644
--- a/interpreter/llvm/src/cmake/modules/HandleLLVMOptions.cmake
+++ b/interpreter/llvm/src/cmake/modules/HandleLLVMOptions.cmake
@@ -449,6 +449,9 @@ elseif( LLVM_COMPILER_IS_GCC_COMPATIBLE )
   if (LLVM_ENABLE_CXX1Y)
     check_cxx_compiler_flag("-std=c++1y" CXX_SUPPORTS_CXX1Y)
     append_if(CXX_SUPPORTS_CXX1Y "-std=c++1y" CMAKE_CXX_FLAGS)
+  elseif(LLVM_ENABLE_CXX1Z)
+    check_cxx_compiler_flag("-std=c++1z" CXX_SUPPORTS_CXX1Z)
+    append_if(CXX_SUPPORTS_CXX1Z "-std=c++1z" CMAKE_CXX_FLAGS)
   else()
     check_cxx_compiler_flag("-std=c++11" CXX_SUPPORTS_CXX11)
     if (CXX_SUPPORTS_CXX11)
diff --git a/interpreter/llvm/src/include/llvm/MC/MCContext.h b/interpreter/llvm/src/include/llvm/MC/MCContext.h
index fe1377e..c20bcaa 100644
--- a/interpreter/llvm/src/include/llvm/MC/MCContext.h
+++ b/interpreter/llvm/src/include/llvm/MC/MCContext.h
@@ -20,6 +20,7 @@
 #include "llvm/MC/MCDwarf.h"
 #include "llvm/MC/MCSubtargetInfo.h"
 #include "llvm/MC/SectionKind.h"
+#include "llvm/MC/MCSectionCOFF.h"
 #include "llvm/Support/Allocator.h"
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/raw_ostream.h"
@@ -42,7 +43,6 @@ namespace llvm {
   class SMLoc;
   class MCSectionMachO;
   class MCSectionELF;
-  class MCSectionCOFF;
   class CodeViewContext;
 
   /// Context object for machine code objects.  This class owns all of the
diff --git a/interpreter/llvm/src/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/interpreter/llvm/src/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index 220a8ab..a1f3e4d 100644
--- a/interpreter/llvm/src/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/interpreter/llvm/src/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -33,6 +33,7 @@
 #include "llvm/IR/Module.h"
 #include "llvm/IR/Operator.h"
 #include "llvm/MC/MCAsmInfo.h"
+#include "llvm/MC/MCSectionCOFF.h"
 #include "llvm/MC/MCContext.h"
 #include "llvm/MC/MCExpr.h"
 #include "llvm/MC/MCInst.h"
diff --git a/interpreter/llvm/src/lib/CodeGen/AsmPrinter/CodeViewDebug.h b/interpreter/llvm/src/lib/CodeGen/AsmPrinter/CodeViewDebug.h
index 51dd5df..1ceb37d 100644
--- a/interpreter/llvm/src/lib/CodeGen/AsmPrinter/CodeViewDebug.h
+++ b/interpreter/llvm/src/lib/CodeGen/AsmPrinter/CodeViewDebug.h
@@ -25,6 +25,7 @@
 #include "llvm/IR/DebugInfo.h"
 #include "llvm/IR/DebugLoc.h"
 #include "llvm/MC/MCStreamer.h"
+#include "llvm/MC/MCSectionCOFF.h"
 #include "llvm/Target/TargetLoweringObjectFile.h"
 
 namespace llvm {
diff --git a/io/io/inc/TGenCollectionProxy.h b/io/io/inc/TGenCollectionProxy.h
index f860689..83d40fe 100644
--- a/io/io/inc/TGenCollectionProxy.h
+++ b/io/io/inc/TGenCollectionProxy.h
@@ -143,7 +143,7 @@ public:
          std::string* str2 = (std::string*)ptr();
          if (!str2) str2 = new std::string();
          s.Streamer(b);
-         *str2 = s;
+         *str2 = static_cast<const char *>(s);
          set(str2);
       }
       void write_std_string_pointer(TBuffer& b)  {
diff --git a/io/io/src/TMakeProject.cxx b/io/io/src/TMakeProject.cxx
index 0801173..47812e1 100644
--- a/io/io/src/TMakeProject.cxx
+++ b/io/io/src/TMakeProject.cxx
@@ -658,7 +658,7 @@ TString TMakeProject::UpdateAssociativeToVector(const char *name)
       Int_t stlkind =  TMath::Abs(TClassEdit::STLKind(inside[0].c_str()));
 
       for(unsigned int i = 1; i<narg; ++i) {
-         inside[i] = UpdateAssociativeToVector( inside[i].c_str() );
+         inside[i] = static_cast<const char *>(UpdateAssociativeToVector( inside[i].c_str() ));
       }
       // Remove default allocator if any.
       static const char* allocPrefix = "std::allocator<";
diff --git a/math/minuit/src/TMinuitMinimizer.cxx b/math/minuit/src/TMinuitMinimizer.cxx
index 4e2082a..61ccd2f 100644
--- a/math/minuit/src/TMinuitMinimizer.cxx
+++ b/math/minuit/src/TMinuitMinimizer.cxx
@@ -454,7 +454,7 @@ std::string TMinuitMinimizer::VariableName(unsigned int ivar) const {
    // return the variable name
    if (!CheckMinuitInstance()) return std::string();
    if (!CheckVarIndex(ivar)) return std::string();
-   return std::string(fMinuit->fCpnam[ivar]);
+   return std::string(static_cast<const char *>(fMinuit->fCpnam[ivar]));
 }
 
 int TMinuitMinimizer::VariableIndex(const std::string & ) const {
diff --git a/roofit/histfactory/src/Helper.cxx b/roofit/histfactory/src/Helper.cxx
index 6dd88e7..ab7ecdd 100644
--- a/roofit/histfactory/src/Helper.cxx
+++ b/roofit/histfactory/src/Helper.cxx
@@ -302,7 +302,7 @@ namespace RooStats {
 	  TString lumiStr;
 	  lumiStr += measurement.GetLumi();
 	  lumiStr.ReplaceAll(' ', TString());
-	  sample_es.normName = lumiStr ;
+	  sample_es.normName = static_cast<const char *>(lumiStr);
 	}
 
 	std::cout << "Setting the Histo Systs" << std::endl;
diff --git a/roofit/roofitcore/src/RooSharedPropertiesList.cxx b/roofit/roofitcore/src/RooSharedPropertiesList.cxx
index 41e9684..7329fc7 100644
--- a/roofit/roofitcore/src/RooSharedPropertiesList.cxx
+++ b/roofit/roofitcore/src/RooSharedPropertiesList.cxx
@@ -95,7 +95,7 @@ RooSharedProperties* RooSharedPropertiesList::registerProperties(RooSharedProper
   
   std::map<std::string, RooSharedProperties *>::iterator it; 
 
-  it = _newPropList.find( std::string(prop->asString()) ); 
+  it = _newPropList.find( std::string(static_cast<const char *>(prop->asString())) ); 
   if (it != _newPropList.end() ) {
      tmp = it->second; 
      if (tmp != prop) { 
@@ -107,7 +107,7 @@ RooSharedProperties* RooSharedPropertiesList::registerProperties(RooSharedProper
   }
   prop->setInSharedList() ;
   prop->increaseRefCount() ;
-  _newPropList[ std::string(prop->asString()) ] = prop; 
+  _newPropList[ std::string(static_cast<const char *>(prop->asString())) ] = prop; 
 
   return prop ;
 }
@@ -126,7 +126,7 @@ void RooSharedPropertiesList::unregisterProperties(RooSharedProperties* prop)
     _propList.Remove(prop) ;
 
     std::map<std::string, RooSharedProperties *>::iterator it; 
-    it = _newPropList.find( std::string(prop->asString()) ); 
+    it = _newPropList.find( std::string(static_cast<const char *>(prop->asString())) ); 
     if (it != _newPropList.end() )  _newPropList.erase(it);
     
     // We own object if ref-counted list. If count drops to zero, delete object
diff --git a/roofit/roofitcore/src/RooWorkspace.cxx b/roofit/roofitcore/src/RooWorkspace.cxx
index e86b067..1209c3c 100644
--- a/roofit/roofitcore/src/RooWorkspace.cxx
+++ b/roofit/roofitcore/src/RooWorkspace.cxx
@@ -2736,7 +2736,7 @@ std::string RooWorkspace::CodeRepo::listOfClassNames() const
     if (ret.size()>0) {
       ret += ", " ;
     }
-    ret += iter->first ;    
+    ret += static_cast<const char *>(iter->first);    
     ++iter ;
   }  
   
diff --git a/roofit/roostats/src/ToyMCSampler.cxx b/roofit/roostats/src/ToyMCSampler.cxx
index 0b5955e..41cba72 100644
--- a/roofit/roostats/src/ToyMCSampler.cxx
+++ b/roofit/roostats/src/ToyMCSampler.cxx
@@ -172,7 +172,7 @@ ToyMCSampler::ToyMCSampler() : fSamplingDistName("SD"), fNToys(1)
 }
 
 ToyMCSampler::ToyMCSampler(TestStatistic &ts, Int_t ntoys) :
-   fSamplingDistName(ts.GetVarName()), fNToys(ntoys)
+   fSamplingDistName(static_cast<const char *>(ts.GetVarName())), fNToys(ntoys)
 {
    fPdf = NULL;
    fParametersForTestStat = NULL;
diff --git a/tmva/tmva/src/Factory.cxx b/tmva/tmva/src/Factory.cxx
index 4b88f20..7d85e7c 100644
--- a/tmva/tmva/src/Factory.cxx
+++ b/tmva/tmva/src/Factory.cxx
@@ -387,7 +387,7 @@ TMVA::MethodBase* TMVA::Factory::BookMethod( TMVA::DataLoader *loader, TString t
    // initialize methods
    IMethod* im;
    if (!boostNum) {
-      im = ClassifierFactory::Instance().Create( std::string(theMethodName),
+      im = ClassifierFactory::Instance().Create( std::string(static_cast<const char *>(theMethodName)),
                                                  fJobName,
                                                  methodTitle,
                                                  loader->DefaultDataSetInfo(),
@@ -926,7 +926,7 @@ void TMVA::Factory::TrainAllMethods()
 
 	    // recreate
 	    m = dynamic_cast<MethodBase*>( ClassifierFactory::Instance()
-					    .Create( std::string(Types::Instance().GetMethodName(methodType)), 
+					    .Create( std::string(static_cast<const char *>(Types::Instance().GetMethodName(methodType))), 
 						    dataSetInfo, weightfile ) );
 	    if( m->GetMethodType() == Types::kCategory ){ 
 		MethodCategory *methCat = (dynamic_cast<MethodCategory*>(m));
diff --git a/tmva/tmva/src/MethodBoost.cxx b/tmva/tmva/src/MethodBoost.cxx
index 1c85a08..25e3756 100644
--- a/tmva/tmva/src/MethodBoost.cxx
+++ b/tmva/tmva/src/MethodBoost.cxx
@@ -384,7 +384,7 @@ void TMVA::MethodBoost::Train()
       // the first classifier shows the option string output, the rest not
       if (fCurrentMethodIdx>0) TMVA::MsgLogger::InhibitOutput();
 
-      IMethod* method = ClassifierFactory::Instance().Create(std::string(fBoostedMethodName),
+      IMethod* method = ClassifierFactory::Instance().Create(std::string(static_cast<const char *>(fBoostedMethodName)),
                                                              GetJobName(),
                                                              Form("%s_B%04i", fBoostedMethodTitle.Data(),fCurrentMethodIdx),
                                                              DataInfo(),
diff --git a/tmva/tmva/src/MethodCategory.cxx b/tmva/tmva/src/MethodCategory.cxx
index 8a6f70d..ceee8c7 100644
--- a/tmva/tmva/src/MethodCategory.cxx
+++ b/tmva/tmva/src/MethodCategory.cxx
@@ -143,7 +143,7 @@ TMVA::IMethod* TMVA::MethodCategory::AddMethod( const TCut& theCut,
                                                 const TString& theTitle,
                                                 const TString& theOptions )
 {
-   std::string addedMethodName = std::string(Types::Instance().GetMethodName(theMethod));
+   std::string addedMethodName = std::string(static_cast<const char *>(Types::Instance().GetMethodName(theMethod)));
 
    Log() << kINFO << "Adding sub-classifier: " << addedMethodName << "::" << theTitle << Endl;
 
diff --git a/tmva/tmva/src/MethodCompositeBase.cxx b/tmva/tmva/src/MethodCompositeBase.cxx
index 399a256..143bd69 100644
--- a/tmva/tmva/src/MethodCompositeBase.cxx
+++ b/tmva/tmva/src/MethodCompositeBase.cxx
@@ -191,7 +191,7 @@ void TMVA::MethodCompositeBase::ReadWeightsFromXML( void* wghtnode )
          ((TMVA::MethodBoost*)this)->BookMethod( Types::Instance().GetMethodType( methodTypeName), methodName,  optionString );
       }
       fMethods.push_back(ClassifierFactory::Instance().Create(
-                                                              std::string(methodTypeName),jobName, methodName,DataInfo(),optionString));
+                                                              std::string(static_cast<const char *>(methodTypeName)),jobName, methodName,DataInfo(),optionString));
 
       fMethodWeight.push_back(methodWeight);
       MethodBase* meth = dynamic_cast<MethodBase*>(fMethods.back());
@@ -256,7 +256,7 @@ void  TMVA::MethodCompositeBase::ReadWeightsFromStream( std::istream& istr )
             ((TMVA::MethodBoost*)this)->BookMethod( Types::Instance().GetMethodType( methodName), methodTitle,  optionString );
       }
       else methodTitle=Form("%s (%04i)",GetMethodName().Data(),fCurrentMethodIdx);
-      fMethods.push_back(ClassifierFactory::Instance().Create( std::string(methodName), jobName,
+      fMethods.push_back(ClassifierFactory::Instance().Create( std::string(static_cast<const char *>(methodName)), jobName,
                                                                methodTitle,DataInfo(), optionString) );
       fMethodWeight.push_back( methodWeight );
       if(MethodBase* m = dynamic_cast<MethodBase*>(fMethods.back()) )
diff --git a/tmva/tmva/src/Reader.cxx b/tmva/tmva/src/Reader.cxx
index f262a80..8a3c80a 100644
--- a/tmva/tmva/src/Reader.cxx
+++ b/tmva/tmva/src/Reader.cxx
@@ -402,7 +402,7 @@ TMVA::IMethod* TMVA::Reader::BookMVA( const TString& methodTag, const TString& w
 
 TMVA::IMethod* TMVA::Reader::BookMVA( TMVA::Types::EMVA methodType, const TString& weightfile )
 {
-   IMethod* im = ClassifierFactory::Instance().Create(std::string(Types::Instance().GetMethodName( methodType )),
+   IMethod* im = ClassifierFactory::Instance().Create(std::string(static_cast<const char *>(Types::Instance().GetMethodName( methodType ))),
                                                       DataInfo(), weightfile );
 
    MethodBase *method = (dynamic_cast<MethodBase*>(im));
@@ -441,7 +441,7 @@ TMVA::IMethod* TMVA::Reader::BookMVA( TMVA::Types::EMVA methodType, const char*
 #if ROOT_VERSION_CODE >= ROOT_VERSION(5,26,00)
 
    // books MVA method from weightfile
-   IMethod* im = ClassifierFactory::Instance().Create(std::string(Types::Instance().GetMethodName( methodType )),
+   IMethod* im = ClassifierFactory::Instance().Create(std::string(static_cast<const char *>(Types::Instance().GetMethodName( methodType ))),
                                                       DataInfo(), "" );
 
    MethodBase *method = (dynamic_cast<MethodBase*>(im));
