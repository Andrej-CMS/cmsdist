diff -arupN v5-32-00.orig/bindings/pyroot/src/Converters.cxx v5-32-00/bindings/pyroot/src/Converters.cxx
--- v5-32-00.orig/bindings/pyroot/src/Converters.cxx	2012-04-27 10:30:22.000000000 +0200
+++ v5-32-00/bindings/pyroot/src/Converters.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -87,7 +87,7 @@ Bool_t PyROOT::T##name##Converter::SetAr
             func->SetArg( para.fl );                                          \
       } else {                                                                \
          PyErr_Format( PyExc_TypeError,                                       \
-            #type" expected, got string of size "PY_SSIZE_T_FORMAT, PyROOT_PyUnicode_GET_SIZE( pyobject ) );\
+            #type" expected, got string of size " PY_SSIZE_T_FORMAT, PyROOT_PyUnicode_GET_SIZE( pyobject ) );\
          return kFALSE;                                                       \
       }                                                                       \
    } else {                                                                   \
diff -arupN v5-32-00.orig/bindings/pyroot/src/PyBufferFactory.cxx v5-32-00/bindings/pyroot/src/PyBufferFactory.cxx
--- v5-32-00.orig/bindings/pyroot/src/PyBufferFactory.cxx	2012-04-27 10:30:22.000000000 +0200
+++ v5-32-00/bindings/pyroot/src/PyBufferFactory.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -111,7 +111,7 @@ namespace {
    PyObject* name##_buffer_str( PyObject* self )                             \
    {                                                                         \
       Py_ssize_t l = buffer_length( self );                                  \
-      return PyROOT_PyUnicode_FromFormat( "<"#type" buffer, size "PY_SSIZE_T_FORMAT">", l );\
+      return PyROOT_PyUnicode_FromFormat( "<"#type" buffer, size " PY_SSIZE_T_FORMAT ">", l );\
    }                                                                         \
                                                                              \
    PyObject* name##_buffer_item( PyObject* self, Py_ssize_t idx ) {          \
diff -arupN v5-32-00.orig/bindings/pyroot/src/RootModule.cxx v5-32-00/bindings/pyroot/src/RootModule.cxx
--- v5-32-00.orig/bindings/pyroot/src/RootModule.cxx	2012-04-27 10:30:22.000000000 +0200
+++ v5-32-00/bindings/pyroot/src/RootModule.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -275,7 +275,7 @@ namespace {
       Py_ssize_t argc = PyTuple_GET_SIZE( args );
       if ( argc != 2 ) {
          PyErr_Format( PyExc_TypeError,
-           "BindObject takes exactly 2 argumenst ("PY_SSIZE_T_FORMAT" given)", argc );
+           "BindObject takes exactly 2 argumenst (" PY_SSIZE_T_FORMAT " given)", argc );
          return 0;
       }
 
@@ -306,7 +306,7 @@ namespace {
       Py_ssize_t argc = PyTuple_GET_SIZE( args );
       if ( argc != 0 && argc != 1 ) {
          PyErr_Format( PyExc_TypeError,
-            "MakeNullPointer takes at most 1 argument ("PY_SSIZE_T_FORMAT" given)", argc );
+            "MakeNullPointer takes at most 1 argument (" PY_SSIZE_T_FORMAT " given)", argc );
          return 0;
       }
 
diff -arupN v5-32-00.orig/cint/reflex/src/MemberTemplateName.cxx v5-32-00/cint/reflex/src/MemberTemplateName.cxx
--- v5-32-00.orig/cint/reflex/src/MemberTemplateName.cxx	2012-04-27 10:30:47.000000000 +0200
+++ v5-32-00/cint/reflex/src/MemberTemplateName.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -64,7 +64,7 @@ Reflex::MemberTemplateName::MemberTempla
    fMemberTemplateImpl(memberTemplateImpl) {
    // Constructor.
    fThisMemberTemplate = new MemberTemplate(this);
-   sMemberTemplates().insert(std::make_pair<const std::string* const, MemberTemplate>(&fName, *fThisMemberTemplate));
+   sMemberTemplates().insert(std::pair<const std::string* const, MemberTemplate>(&fName, *fThisMemberTemplate));
    sMemberTemplateVec().push_back(*fThisMemberTemplate);
 }
 
diff -arupN v5-32-00.orig/cint/reflex/src/TypeTemplateName.cxx v5-32-00/cint/reflex/src/TypeTemplateName.cxx
--- v5-32-00.orig/cint/reflex/src/TypeTemplateName.cxx	2012-04-27 10:30:47.000000000 +0200
+++ v5-32-00/cint/reflex/src/TypeTemplateName.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -64,7 +64,7 @@ Reflex::TypeTemplateName::TypeTemplateNa
    fTypeTemplateImpl(typeTemplateImpl) {
    // Constructor.
    fThisTypeTemplate = new TypeTemplate(this);
-   sTypeTemplates().insert(std::make_pair<const std::string* const, TypeTemplate>(&fName, *fThisTypeTemplate));
+   sTypeTemplates().insert(std::pair<const std::string* const, TypeTemplate>(&fName, *fThisTypeTemplate));
    sTypeTemplateVec().push_back(*fThisTypeTemplate);
 }
 
diff -arupN v5-32-00.orig/io/sql/src/TSQLFile.cxx v5-32-00/io/sql/src/TSQLFile.cxx
--- v5-32-00.orig/io/sql/src/TSQLFile.cxx	2012-04-27 10:33:12.000000000 +0200
+++ v5-32-00/io/sql/src/TSQLFile.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -1152,7 +1152,7 @@ void TSQLFile::CreateBasicTables()
 
    #define WrintCfg(name, type, value)                              \
    {                                                                \
-      sqlcmd.Form("INSERT INTO %s%s%s VALUES (%s%s%s, %s"type"%s)", \
+      sqlcmd.Form("INSERT INTO %s%s%s VALUES (%s%s%s, %s" type "%s)", \
                   quote, sqlio::ConfigTable, quote,                 \
                   vquote, name, vquote,                             \
                   vquote, value, vquote);                           \
diff -arupN v5-32-00.orig/math/mathcore/src/DataRange.cxx v5-32-00/math/mathcore/src/DataRange.cxx
--- v5-32-00.orig/math/mathcore/src/DataRange.cxx	2012-04-27 10:30:03.000000000 +0200
+++ v5-32-00/math/mathcore/src/DataRange.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -82,12 +82,12 @@ std::pair<double, double> DataRange::ope
       // return [-inf +inf] for the other dimension 
       double xmin = 0; double xmax = 0; 
       GetInfRange(xmin,xmax);
-      return std::make_pair<double,double>(xmin,xmax);     
+      return std::make_pair(xmin,xmax);     
    }                                               
    else { 
       // in case the irange-th does not exist for the given coordinate
       MATH_ERROR_MSG("DataRange::operator()","invalid range number - return (0,0)");
-      return std::make_pair<double,double>(0,0);     
+      return std::pair<double,double>(0,0);     
    }
 }  
 
diff -arupN v5-32-00.orig/math/mlp/src/TMultiLayerPerceptron.cxx v5-32-00/math/mlp/src/TMultiLayerPerceptron.cxx
--- v5-32-00.orig/math/mlp/src/TMultiLayerPerceptron.cxx	2012-04-27 10:30:00.000000000 +0200
+++ v5-32-00/math/mlp/src/TMultiLayerPerceptron.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -906,7 +906,7 @@ void TMultiLayerPerceptron::Train(Int_t 
       }
       // Security: would the learning lead to non real numbers,
       // the learning should stop now.
-      if (isnan(GetError(TMultiLayerPerceptron::kTraining))) {
+      if (TMath::IsNaN(GetError(TMultiLayerPerceptron::kTraining))) {
          Error("TMultiLayerPerceptron::Train()","Stop.");
          iepoch = nEpoch;
       }
diff -arupN v5-32-00.orig/math/mlp/src/TNeuron.cxx v5-32-00/math/mlp/src/TNeuron.cxx
--- v5-32-00.orig/math/mlp/src/TNeuron.cxx	2012-04-27 10:30:00.000000000 +0200
+++ v5-32-00/math/mlp/src/TNeuron.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -907,7 +907,7 @@ Double_t TNeuron::GetBranch() const
 {
    // Returns the formula value.
    Double_t branch = fFormula->EvalInstance(fIndex);
-   if (isnan(branch))
+   if (TMath::IsNaN(branch))
       branch = 0.;
    return branch;
 }
diff -arupN v5-32-00.orig/net/net/src/TPServerSocket.cxx v5-32-00/net/net/src/TPServerSocket.cxx
--- v5-32-00.orig/net/net/src/TPServerSocket.cxx	2012-04-27 10:32:38.000000000 +0200
+++ v5-32-00/net/net/src/TPServerSocket.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -104,7 +104,7 @@ TSocket *TPServerSocket::Accept(UChar_t 
    // wait for the incoming connections to the server and accept them
    setupSocket = TServerSocket::Accept(Opt);
 
-   if (setupSocket <= 0) return 0;
+   if (setupSocket == 0) return 0;
 
    // receive the port number and number of parallel sockets from the
    // client and establish 'n' connections
diff -arupN v5-32-00.orig/net/rpdutils/src/daemon.cxx v5-32-00/net/rpdutils/src/daemon.cxx
--- v5-32-00.orig/net/rpdutils/src/daemon.cxx	2012-04-27 10:32:39.000000000 +0200
+++ v5-32-00/net/rpdutils/src/daemon.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -34,6 +34,10 @@
 #include <sys/wait.h>
 #endif
 
+#ifndef ROOT_RConfig
+#include "RConfig.h"
+#endif
+
 #ifndef NOFILE
 #   define NOFILE 0
 #endif
diff -arupN v5-32-00.orig/proof/proofd/inc/XrdProofdPlatform.h v5-32-00/proof/proofd/inc/XrdProofdPlatform.h
--- v5-32-00.orig/proof/proofd/inc/XrdProofdPlatform.h	2012-04-27 10:29:21.000000000 +0200
+++ v5-32-00/proof/proofd/inc/XrdProofdPlatform.h	2012-04-27 10:36:41.000000000 +0200
@@ -23,6 +23,10 @@
 //                                                                      //
 //////////////////////////////////////////////////////////////////////////
 
+#ifndef ROOT_RConfig
+#include "RConfig.h"
+#endif
+
 // 32 or 64 bits
 #if ((defined(__hpux) && defined(__LP64__)) || \
      (defined(__alpha) && !defined(linux) && !defined(__VMS)) || \
diff -arupN v5-32-00.orig/roofit/roofitcore/src/RooAbsPdf.cxx v5-32-00/roofit/roofitcore/src/RooAbsPdf.cxx
--- v5-32-00.orig/roofit/roofitcore/src/RooAbsPdf.cxx	2012-04-27 10:31:16.000000000 +0200
+++ v5-32-00/roofit/roofitcore/src/RooAbsPdf.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -331,7 +331,7 @@ Bool_t RooAbsPdf::traceEvalPdf(Double_t 
 
   // check for a math error or negative value
   Bool_t error(kFALSE) ;
-  if (isnan(value)) {
+  if (TMath::IsNaN(value)) {
     logEvalError(Form("p.d.f value is Not-a-Number (%f), forcing value to zero",value)) ;
     error=kTRUE ;
   }
@@ -542,7 +542,7 @@ Bool_t RooAbsPdf::traceEvalHook(Double_t
   // Floating point error checking and tracing for given float value
 
   // check for a math error or negative value
-  Bool_t error= isnan(value) || (value < 0);
+  Bool_t error= TMath::IsNaN(value) || (value < 0);
 
   // do nothing if we are no longer tracing evaluations and there was no error
   if(!error && _traceCount <= 0) return error ;
diff -arupN v5-32-00.orig/roofit/roofitcore/src/RooNumIntFactory.cxx v5-32-00/roofit/roofitcore/src/RooNumIntFactory.cxx
--- v5-32-00.orig/roofit/roofitcore/src/RooNumIntFactory.cxx	2012-04-27 10:31:16.000000000 +0200
+++ v5-32-00/roofit/roofitcore/src/RooNumIntFactory.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -151,7 +151,7 @@ Bool_t RooNumIntFactory::storeProtoInteg
   }
 
   // Add to factory 
-  _map[name.Data()] = make_pair<RooAbsIntegrator*,std::string>(proto,depName) ;
+  _map[name.Data()] = std::pair<RooAbsIntegrator*,std::string>(proto,depName) ;
 
   // Add default config to master config
   RooNumIntConfig::defaultConfig().addConfigSection(proto,defConfig) ;
diff -arupN v5-32-00.orig/roofit/roofitcore/src/RooResolutionModel.cxx v5-32-00/roofit/roofitcore/src/RooResolutionModel.cxx
--- v5-32-00.orig/roofit/roofitcore/src/RooResolutionModel.cxx	2012-04-27 10:31:16.000000000 +0200
+++ v5-32-00/roofit/roofitcore/src/RooResolutionModel.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -325,7 +325,7 @@ Bool_t RooResolutionModel::traceEvalHook
   // Floating point error checking and tracing for given float value
 
   // check for a math error or negative value
-  return isnan(value) ;
+   return TMath::IsNaN(value) ;
 }
 
 
diff -arupN v5-32-00.orig/roofit/roostats/src/HypoTestInverterOriginal.cxx v5-32-00/roofit/roostats/src/HypoTestInverterOriginal.cxx
--- v5-32-00.orig/roofit/roostats/src/HypoTestInverterOriginal.cxx	2012-04-27 10:31:19.000000000 +0200
+++ v5-32-00/roofit/roostats/src/HypoTestInverterOriginal.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -195,7 +195,7 @@ bool HypoTestInverterOriginal::RunAutoSc
 	x = (log(target) - log(b)) / a;
 
 	// to do: do not allow next iteration outside the xMin,xMax interval
-	if (x<xMin || x>xMax || isnan(x)) {
+	if (x<xMin || x>xMax || TMath::IsNaN(x)) {
 	  std::cout << "Extrapolated value out of range or nan: exits\n";
 	  quitThisLoop = true;
 	}
@@ -206,7 +206,7 @@ bool HypoTestInverterOriginal::RunAutoSc
 	double b = leftCL-a*leftX;
 	x = (target-b)/a;
 
-	if (x<xMin || x>xMax || isnan(x)) {
+	if (x<xMin || x>xMax || TMath::IsNaN(x)) {
 	  std::cout << "Extrapolated value out of range or nan: exits\n";
 	  quitThisLoop = true;
 	}
diff -arupN v5-32-00.orig/roofit/roostats/src/HypoTestResult.cxx v5-32-00/roofit/roostats/src/HypoTestResult.cxx
--- v5-32-00.orig/roofit/roostats/src/HypoTestResult.cxx	2012-04-27 10:31:19.000000000 +0200
+++ v5-32-00/roofit/roostats/src/HypoTestResult.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -45,7 +45,7 @@ END_HTML
 
 #include <limits>
 #define NaN numeric_limits<float>::quiet_NaN()
-#define IsNaN(a) isnan(a)
+#define IsNaN(a) TMath::IsNaN(a)
 
 ClassImp(RooStats::HypoTestResult) ;
 
diff -arupN v5-32-00.orig/tmva/src/DataSet.cxx v5-32-00/tmva/src/DataSet.cxx
--- v5-32-00.orig/tmva/src/DataSet.cxx	2012-04-27 10:33:23.000000000 +0200
+++ v5-32-00/tmva/src/DataSet.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -439,7 +439,7 @@ void TMVA::DataSet::InitSampling( Float_
    fSamplingEventList.at( treeIdx ).reserve( nEvts );
    fSamplingSelected.at( treeIdx ).reserve( fSamplingNEvents.at(treeIdx) );
    for (Long64_t ievt=0; ievt<nEvts; ievt++) {
-      std::pair<Float_t,Long64_t> *p = new std::pair<Float_t,Long64_t>(std::make_pair<Float_t,Long64_t>(1.0,ievt));
+      std::pair<Float_t,Long64_t> *p = new std::pair<Float_t,Long64_t>(1.0,ievt);
       fSamplingEventList.at( treeIdx ).push_back( p );
    }
 
diff -arupN v5-32-00.orig/tmva/src/VariableNormalizeTransform.cxx v5-32-00/tmva/src/VariableNormalizeTransform.cxx
--- v5-32-00.orig/tmva/src/VariableNormalizeTransform.cxx	2012-04-27 10:33:24.000000000 +0200
+++ v5-32-00/tmva/src/VariableNormalizeTransform.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -404,10 +404,10 @@ void TMVA::VariableNormalizeTransform::R
    // coverity[tainted_data_argument]
 
    for( UInt_t ivar = 0; ivar < nvars; ++ivar ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('v',ivar));
+      fGet.push_back(std::pair<Char_t,UInt_t>('v',ivar));
    }
    for( UInt_t itgt = 0; itgt < ntgts; ++itgt ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('t',itgt));
+      fGet.push_back(std::pair<Char_t,UInt_t>('t',itgt));
    }
    void* ch = gTools().GetChild( trfnode );
    while(ch) {
@@ -483,10 +483,10 @@ void TMVA::VariableNormalizeTransform::R
    UInt_t nvars = GetNVariables();
    UInt_t ntgts = GetNTargets();
    for( UInt_t ivar = 0; ivar < nvars; ++ivar ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('v',ivar));
+      fGet.push_back(std::pair<Char_t,UInt_t>('v',ivar));
    }
    for( UInt_t itgt = 0; itgt < ntgts; ++itgt ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('t',itgt));
+      fGet.push_back(std::pair<Char_t,UInt_t>('t',itgt));
    }
    char buf[512];
    char buf2[512];
diff -arupN v5-32-00.orig/tmva/src/VariableTransformBase.cxx v5-32-00/tmva/src/VariableTransformBase.cxx
--- v5-32-00.orig/tmva/src/VariableTransformBase.cxx	2012-04-27 10:33:24.000000000 +0200
+++ v5-32-00/tmva/src/VariableTransformBase.cxx	2012-04-27 10:36:41.000000000 +0200
@@ -132,42 +132,42 @@ void TMVA::VariableTransformBase::Select
 	    variables.Remove(0,1); // remove "V"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t ivar = 0; ivar < nvars; ++ivar ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+		  fGet.push_back( std::pair<Char_t,UInt_t>('v',ivar) );
 		  varIndices.insert( ivar );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= nvars )
 		  Log() << kFATAL << "You selected variable with index : " << idx << " of only " << nvars << " variables." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('v',idx) );
 	       varIndices.insert( idx );
 	    }
 	 }else if( variables.BeginsWith("T") ) {       // targets
 	    variables.Remove(0,1); // remove "T"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+		  fGet.push_back( std::pair<Char_t,UInt_t>('t',itgt) );
 		  tgtIndices.insert( itgt );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= ntgts )
 		  Log() << kFATAL << "You selected target with index : " << idx << " of only " << ntgts << " targets." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('t',idx) );
 	       tgtIndices.insert( idx );
 	    }
 	 }else if( variables.BeginsWith("S") ) {       // spectators
 	    variables.Remove(0,1); // remove "S"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+		  fGet.push_back( std::pair<Char_t,UInt_t>('s',ispct) );
 		  spctIndices.insert( ispct );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= nspcts )
 		  Log() << kFATAL << "You selected spectator with index : " << idx << " of only " << nspcts << " spectators." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('s',idx) );
 	       spctIndices.insert( idx );
 	    }
 	 }else if( TString("REARRANGE").BeginsWith(variables) ) {       // toggle rearrange sorting (take sort order given in the options)
@@ -180,21 +180,21 @@ void TMVA::VariableTransformBase::Select
 	 Int_t numIndices = varIndices.size()+tgtIndices.size()+spctIndices.size();
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('v',ivar) );
 	       varIndices.insert( ivar );
 	       break;
 	    }
 	 }
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('t',itgt) );
 	       tgtIndices.insert( itgt );
 	       break;
 	    }
 	 }
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('s',ispct) );
 	       spctIndices.insert( ispct );
 	       break;
 	    }
@@ -210,29 +210,29 @@ void TMVA::VariableTransformBase::Select
    if( putIntoVariables ) {
       Int_t idx = 0;
       for( SelectedIndices::iterator it = varIndices.begin(), itEnd = varIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('v',idx) );
 	 ++idx;
       }
       for( SelectedIndices::iterator it = tgtIndices.begin(), itEnd = tgtIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('t',idx) );
 	 ++idx;
       }
       for( SelectedIndices::iterator it = spctIndices.begin(), itEnd = spctIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('s',idx) );
 	 ++idx;
       }
    }else {
       for( SelectedIndices::iterator it = varIndices.begin(), itEnd = varIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('v',idx) );
       }
       for( SelectedIndices::iterator it = tgtIndices.begin(), itEnd = tgtIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('t',idx) );
       }
       for( SelectedIndices::iterator it = spctIndices.begin(), itEnd = spctIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	 fPut.push_back( std::pair<Char_t,UInt_t>('s',idx) );
       }
 
       // if sorting is turned on, fGet should have the indices sorted as fPut has them.
@@ -693,7 +693,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == label ||
 	        fDsi.GetVariableInfo( ivar ).GetExpression() == expression) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('v',ivar) );
 	       break;
 	    }
 	 }
@@ -701,7 +701,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == label ||
 	        fDsi.GetTargetInfo( itgt ).GetExpression() == expression ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('t',itgt) );
 	       break;
 	    }
 	 }
@@ -709,7 +709,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == label ||
 	        fDsi.GetSpectatorInfo( ispct ).GetExpression() == expression ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fGet.push_back( std::pair<Char_t,UInt_t>('s',ispct) );
 	       break;
 	    }
 	 }
@@ -741,7 +741,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == label ||
 	        fDsi.GetVariableInfo( ivar ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fPut.push_back( std::pair<Char_t,UInt_t>('v',ivar) );
 	       break;
 	    }
 	 }
@@ -749,7 +749,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == label ||
 	        fDsi.GetTargetInfo( itgt ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fPut.push_back( std::pair<Char_t,UInt_t>('t',itgt) );
 	       break;
 	    }
 	 }
@@ -757,7 +757,7 @@ void TMVA::VariableTransformBase::ReadFr
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == label ||
 	        fDsi.GetSpectatorInfo( ispct ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fPut.push_back( std::pair<Char_t,UInt_t>('s',ispct) );
 	       break;
 	    }
 	 }
