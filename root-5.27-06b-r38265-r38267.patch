diff -Naur orig.root/cint/reflex/inc/Reflex/Builder/ClassBuilder.h root/cint/reflex/inc/Reflex/Builder/ClassBuilder.h
--- orig.root/cint/reflex/inc/Reflex/Builder/ClassBuilder.h	2010-11-05 15:46:26.000000000 +0100
+++ root/cint/reflex/inc/Reflex/Builder/ClassBuilder.h	2011-03-04 13:32:31.000000000 +0100
@@ -23,6 +23,34 @@
 namespace Cint { namespace Internal {} }
 
 namespace Reflex {
+
+/* Helper class to avoid compiler warning about casting function pointer
+** to void pointer.
+*/
+class BuilderFunc2Void {
+   typedef void (*funcptr_t)();
+
+   union funcptr_and_voidptr {
+      typedef void (*funcptr_t)();
+
+      funcptr_and_voidptr(void *val) : _read(val) {}
+
+      void *_read;
+      funcptr_t _write;
+   };
+
+   funcptr_and_voidptr _tmp;
+public:
+   template <typename T>
+   BuilderFunc2Void( T vfp ) : _tmp(0) {
+      _tmp._write = ( funcptr_t )vfp;
+   }
+
+   operator void*() const {
+      return _tmp._read;
+   }
+};
+
 // forward declarations
 class Class;
 class ClassBuilder;
diff -Naur orig.root/cint/reflex/python/genreflex/gendict.py root/cint/reflex/python/genreflex/gendict.py
--- orig.root/cint/reflex/python/genreflex/gendict.py	2010-11-05 15:46:26.000000000 +0100
+++ root/cint/reflex/python/genreflex/gendict.py	2011-03-04 13:32:35.000000000 +0100
@@ -895,7 +895,7 @@
         sc += '  rule->fSource      = "%s";\n' % (attrs['source'],)
         
       if rule.has_key( 'funcname' ):
-        sc += '  rule->fFunctionPtr = (void *)%s;\n' % (rule['funcname'],)
+        sc += '  rule->fFunctionPtr = Reflex::BuilderFunc2Void(%s);\n' % (rule['funcname'],)
         sc += '  rule->fCode        = "%s";\n' % (rule['code'].replace( '\n', '\\n' ), )
 
       if attrs.has_key( 'version' ):
@@ -975,6 +975,7 @@
       # Initialize the structure - to  be changed later
       #---------------------------------------------------------------------------
       for member in source:
+        if member[0] == '': continue;
         sc += '  static Long_t offset_Onfile_' + mappedName
         sc += '_' + member[1] + ' = oldObj->GetClass()->GetDataMemberOffset("'
         sc += member[1] +'");\n';
@@ -1034,7 +1035,9 @@
         sc += 'void %s( char *target, TVirtualObject *oldObj )\n' % (funcname,)
         sc += '{\n'
         sc += self.processIOAutoVariables( cl, clt, sourceMembersSpl, targetMembers, memTypes )
-        sc += '  %s* newObj = (%s*)target;\n' % (cl, cl)
+        #to avoid compiler warnings about unused variables only declare newObj if user actually uses it
+        if -1 != rule['code'].find('newObj'):
+           sc += '  %s* newObj = (%s*)target;\n' % (cl, cl)
         sc += '  //--- User\'s code ---\n'
         sc += rule['code'].strip('\n')
         sc += '\n}\n\n'
