diff --git a/fftjet/KernelRecombinationAlg.icc b/fftjet/KernelRecombinationAlg.icc
index fd0afe1..7d560f0 100644
--- a/fftjet/KernelRecombinationAlg.icc
+++ b/fftjet/KernelRecombinationAlg.icc
@@ -274,7 +274,7 @@ namespace fftjet {
                 const Real gridValue(eventData.uncheckedAt(ieta, iphi));
                 if (gridValue > dataCutoff)
                 {
-                    *unclustered += vMaker(
+                    *unclustered += this->vMaker(
                         gridValue, eta, eventData.phiBinCenter(iphi));
                     *unused += gridValue;
                 }
@@ -426,14 +426,14 @@ namespace fftjet {
                 else if (useCentroid)
                 {
                     outputJets->push_back(RecombinedJet<VectorLike>(
-                        inPeak, vMaker(et, centroidEta, centroidPhi),
+                        inPeak, this->vMaker(et, centroidEta, centroidPhi),
                         weightSum[ijet], et, centroidEta, centroidPhi,
                         etaWidth, phiWidth, rho, fuzziness));
                 }
                 else
                 {
                     outputJets->push_back(RecombinedJet<VectorLike>(
-                        inPeak, vMaker(et, inPeak.eta(), inPeak.phi()),
+                        inPeak, this->vMaker(et, inPeak.eta(), inPeak.phi()),
                         weightSum[ijet], et, centroidEta, centroidPhi,
                         etaWidth, phiWidth, rho, fuzziness));
                 }
@@ -503,7 +503,7 @@ namespace fftjet {
                 const double* dPhi = dphiBuffer + iphi*lastNJets;
                 const double bgW((*bgWeightCalc)(static_cast<double>(gridValue),
                                                  bgbuf[iphi*bgStride]));
-                const VectorLike gridVec(vMaker(gridValue, eta, phi));
+                const VectorLike gridVec(this->vMaker(gridValue, eta, phi));
 
                 // Cycle over jets. This is the most speed-critical
                 // cycle in the whole algorithm.
@@ -631,7 +631,7 @@ namespace fftjet {
                                 cellE -= absorbedE;
 
                                 if (use4Vec)
-                                    jets[ijet] += vMaker(absorbedE, eta, phi);
+                                    jets[ijet] += this->vMaker(absorbedE, eta, phi);
                                 weightSum[ijet] += 1.0;
                                 energySum[ijet] += absorbedE;
                                 etaSum[ijet] += absorbedE*eta;
@@ -655,7 +655,7 @@ namespace fftjet {
                             // assign it to the noise/background
                             if (maxE[0] > 0.0)
                                 // Some energy was assigned to jets
-                                *unclustered += vMaker(cellE, eta, phi);
+                                *unclustered += this->vMaker(cellE, eta, phi);
                             else
                                 // No energy was assigned to jets.
                                 // No need to recalculate the 4-vector.
diff --git a/fftjet/FasterKernelRecombinationAlg.icc b/fftjet/FasterKernelRecombinationAlg.icc
index aff7149..277dae0 100644
--- a/fftjet/FasterKernelRecombinationAlg.icc
+++ b/fftjet/FasterKernelRecombinationAlg.icc
@@ -120,7 +120,7 @@ namespace fftjet {
 
                 const Real gridValue(databuf[iphi]);
                 const Real phi(eventData.phiBinCenter(iphi));
-                const VectorLike gridVec(vMaker(gridValue, eta, phi));
+                const VectorLike gridVec(this->vMaker(gridValue, eta, phi));
                 const double* dPhi = B::dphiBuffer + iphi*B::lastNJets;
                 const double bgW((*B::bgWeightCalc)(gridValue, bgbuf[iphi*bgStride]));
 
diff --git a/fftjet/FasterKernelRecombinationAlg.icc b/fftjet/FasterKernelRecombinationAlg.icc
index 277dae0..7d5989a 100644
--- a/fftjet/FasterKernelRecombinationAlg.icc
+++ b/fftjet/FasterKernelRecombinationAlg.icc
@@ -50,7 +50,7 @@ namespace fftjet {
         std::vector<RecombinedJet<VectorLike> >* outputJets,
         VectorLike* unclustered, double* unused)
     {
-        if (performPreliminaryProcessing(
+        if (this->performPreliminaryProcessing(
                 peaks, eventData, bgData, nBgEta, nBgPhi,
                 outputJets, unclustered, unused))
             return 0;
