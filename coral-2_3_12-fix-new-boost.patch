diff --git src/CORAL_SERVER/CoralSockets/utilities/coralReplayClient/coralReplayClient.cpp b/CORAL_SERVER/CoralSockets/utilities/coralReplayClient/coralReplayClient.cpp
index 2238f38..f29aa93 100644
--- src/CORAL_SERVER/CoralSockets/utilities/coralReplayClient/coralReplayClient.cpp
+++ src/CORAL_SERVER/CoralSockets/utilities/coralReplayClient/coralReplayClient.cpp
@@ -162,14 +162,14 @@ void ReplayThread::operator()()
   directory_iterator end_itr;
   std::cout << "Read all files in " << m_replayPath << std::endl;
   while ( itr != end_itr ) {
-    std::cout <<"Found : "<< itr->leaf() << std::endl;
-    std::string nameEnd = itr->leaf();
+    std::cout <<"Found : "<< itr->filename() << std::endl;
+    std::string nameEnd = itr->filename();
     nameEnd = nameEnd.substr( nameEnd.length() - 5 );
     std::cout << nameEnd << std::endl;
     if ( nameEnd != "S.bin" && nameEnd != "R.bin" )
-      std::cerr << "Warning! File '" << itr->leaf() << "' is not a packet file: skip it." << std::endl;
+      std::cerr << "Warning! File '" << itr->filename() << "' is not a packet file: skip it." << std::endl;
     else
-      files.push_back( itr->leaf() );
+      files.push_back( itr->filename() );
     ++itr;
   }
   std::sort( files.begin(), files.end() );
@@ -181,7 +181,7 @@ void ReplayThread::operator()()
     nameEnd = nameEnd.substr( nameEnd.length() - 5 );
     std::cout << "File type: " << nameEnd << std::endl;
     if ( nameEnd != "S.bin" && nameEnd != "R.bin" ) {
-      std::cerr << "Error! File '" << itr->leaf() << "' is not a packet file. Aborting." << std::endl;
+      std::cerr << "Error! File '" << itr->filename() << "' is not a packet file. Aborting." << std::endl;
       return;
     }
     
@@ -278,8 +278,8 @@ int main( int argc, char** argv )
       std::vector< std::pair<time_t, std::string> > connectionDirectories;
 
       while ( itr != end_itr ) {
-        std::cout <<"Found : "<< itr->leaf() << std::endl;
-        std::string fullPath( replayDir + "/" + itr->leaf() );
+        std::cout <<"Found : "<< itr->filename() << std::endl;
+        std::string fullPath( replayDir + "/" + itr->filename() );
         struct stat statbuf;
 
         if ( stat( fullPath.c_str(), &statbuf ) != 0 ) {
diff --git a/CoralKernel/src/PluginManager.cpp b/CoralKernel/src/PluginManager.cpp
index 2c40531..5430089 100755
--- src/CoralKernel/src/PluginManager.cpp
+++ src/CoralKernel/src/PluginManager.cpp
@@ -371,7 +371,7 @@ coral::PluginManager::readPluginsFromDir( const std::string& directoryName )
   
   // Process the file
   coral::ILoadableComponentFactory* p = 0;
-  std::ifstream plugin_file( pluginDefFile.native_file_string().c_str() );
+  std::ifstream plugin_file( pluginDefFile.string().c_str() );
   
   while ( ! plugin_file.eof() )
   {
diff --git a/SQLiteAccess/src/Connection.cpp b/SQLiteAccess/src/Connection.cpp
index 5c24fb7..86b515f 100644
--- src/SQLiteAccess/src/Connection.cpp
+++ src/SQLiteAccess/src/Connection.cpp
@@ -66,10 +66,10 @@ coral::SQLiteAccess::Connection::newSession( const std::string& schemaName,
     const_cast<coral::SQLiteAccess::Connection*>(this)->disconnect();
     throw coral::DatabaseNotAccessibleException(std::string(" cannot open read-only session to non-existing ")+m_properties->databaseFileName().string(),"Connection::newSession",m_properties->domainProperties().service()->name() );   
   } 
-  if( mode==coral::Update && !boost::filesystem::exists( m_properties->databaseFileName().branch_path() ) )
+  if( mode==coral::Update && !boost::filesystem::exists( m_properties->databaseFileName().parent_path() ) )
   {
     const_cast<coral::SQLiteAccess::Connection*>(this)->disconnect();
-    throw coral::DatabaseNotAccessibleException(std::string("directory ")+std::string(m_properties->databaseFileName().branch_path().string())+std::string(" does not exist"), "Connection::newSession",m_properties->domainProperties().service()->name());
+    throw coral::DatabaseNotAccessibleException(std::string("directory ")+std::string(m_properties->databaseFileName().parent_path().string())+std::string(" does not exist"), "Connection::newSession",m_properties->domainProperties().service()->name());
   }
   /*if(this->size()>0){
     //const_cast<coral::SQLiteAccess::Connection*>(this)->disconnect();
@@ -92,9 +92,9 @@ coral::SQLiteAccess::Connection::connect()
   */
   const std::string database = m_properties->connectionString();
   this->verifyFileName(database);
-  if( !boost::filesystem::exists( m_properties->databaseFileName() ) && !coral::isWritable( m_properties->databaseFileName().branch_path().string() ) )
+  if( !boost::filesystem::exists( m_properties->databaseFileName() ) && !coral::isWritable( m_properties->databaseFileName().parent_path().string() ) )
   {
-    throw coral::DatabaseNotAccessibleException(m_properties->databaseFileName().branch_path().string()+std::string(" is not writable"),"Connection::connect",m_properties->domainProperties().service()->name() ); 
+    throw coral::DatabaseNotAccessibleException(m_properties->databaseFileName().parent_path().string()+std::string(" is not writable"),"Connection::connect",m_properties->domainProperties().service()->name() ); 
   }
   m_isConnected=true; //set logical connection
 
