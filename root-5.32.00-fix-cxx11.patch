diff --git a/cint/reflex/src/MemberTemplateName.cxx b/cint/reflex/src/MemberTemplateName.cxx
index 7fb232b..1456af7 100644
--- a/cint/reflex/src/MemberTemplateName.cxx
+++ b/cint/reflex/src/MemberTemplateName.cxx
@@ -64,7 +64,7 @@ Reflex::MemberTemplateName::MemberTemplateName(const char* name,
    fMemberTemplateImpl(memberTemplateImpl) {
    // Constructor.
    fThisMemberTemplate = new MemberTemplate(this);
-   sMemberTemplates().insert(std::make_pair<const std::string* const, MemberTemplate>(&fName, *fThisMemberTemplate));
+   sMemberTemplates().insert(std::make_pair(&fName, *fThisMemberTemplate));
    sMemberTemplateVec().push_back(*fThisMemberTemplate);
 }
 
diff --git a/cint/reflex/src/TypeTemplateName.cxx b/cint/reflex/src/TypeTemplateName.cxx
index ca08640..b207e0d 100644
--- a/cint/reflex/src/TypeTemplateName.cxx
+++ b/cint/reflex/src/TypeTemplateName.cxx
@@ -64,7 +64,7 @@ Reflex::TypeTemplateName::TypeTemplateName(const char* name,
    fTypeTemplateImpl(typeTemplateImpl) {
    // Constructor.
    fThisTypeTemplate = new TypeTemplate(this);
-   sTypeTemplates().insert(std::make_pair<const std::string* const, TypeTemplate>(&fName, *fThisTypeTemplate));
+   sTypeTemplates().insert(std::make_pair(&fName, *fThisTypeTemplate));
    sTypeTemplateVec().push_back(*fThisTypeTemplate);
 }
 
diff --git a/math/mathcore/src/DataRange.cxx b/math/mathcore/src/DataRange.cxx
index 90cba69..935fd41 100644
--- a/math/mathcore/src/DataRange.cxx
+++ b/math/mathcore/src/DataRange.cxx
@@ -82,12 +82,12 @@ std::pair<double, double> DataRange::operator() (unsigned int icoord,unsigned in
       // return [-inf +inf] for the other dimension 
       double xmin = 0; double xmax = 0; 
       GetInfRange(xmin,xmax);
-      return std::make_pair<double,double>(xmin,xmax);     
+      return std::make_pair(xmin,xmax);     
    }                                               
    else { 
       // in case the irange-th does not exist for the given coordinate
       MATH_ERROR_MSG("DataRange::operator()","invalid range number - return (0,0)");
-      return std::make_pair<double,double>(0,0);     
+      return std::make_pair(0,0);     
    }
 }  
 
diff --git a/math/mlp/src/TNeuron.cxx b/math/mlp/src/TNeuron.cxx
index 7532ad4..aaf3774 100644
--- a/math/mlp/src/TNeuron.cxx
+++ b/math/mlp/src/TNeuron.cxx
@@ -907,7 +907,7 @@ Double_t TNeuron::GetBranch() const
 {
    // Returns the formula value.
    Double_t branch = fFormula->EvalInstance(fIndex);
-   if (isnan(branch))
+   if (std::isnan(branch))
       branch = 0.;
    return branch;
 }
diff --git a/graf3d/eve/src/TEveGeoShape.cxx b/graf3d/eve/src/TEveGeoShape.cxx
index 8a6939f..0d2fb8f 100644
--- a/graf3d/eve/src/TEveGeoShape.cxx
+++ b/graf3d/eve/src/TEveGeoShape.cxx
@@ -315,7 +315,7 @@ TEveGeoShapeExtract* TEveGeoShape::DumpShapeTree(TEveGeoShape* gsre,
    {
       Int_t   ci = gsre->GetFillColor();
       TColor *c  = gROOT->GetColor(ci);
-      Float_t rgba[4] = { 1, 0, 0, 1 - gsre->GetMainTransparency()/100. };
+      Float_t rgba[4] = { 1.f, 0.f, 0.f, 1.f - (float)(gsre->GetMainTransparency())/100.f };
       if (c)
       {
          rgba[0] = c->GetRed();
diff --git a/graf3d/gl/src/TArcBall.cxx b/graf3d/gl/src/TArcBall.cxx
index 888dff0..a494c30 100644
--- a/graf3d/gl/src/TArcBall.cxx
+++ b/graf3d/gl/src/TArcBall.cxx
@@ -193,7 +193,7 @@ void Matrix4dSetRotationFromMatrix3d(Double_t *NewObj, const Double_t *m1)
 inline void TArcBall::MapToSphere(const TPoint &NewPt, Double_t *NewVec) const
 {
    //map to sphere
-   Double_t tempPt[] = {NewPt.fX, NewPt.fY};
+   Double_t tempPt[] = {(double) NewPt.fX, (double)NewPt.fY};
    //Adjust point coords and scale down to range of [-1 ... 1]
    tempPt[0]  = tempPt[0] * fAdjustWidth  - 1.;
    tempPt[1]  = 1. - tempPt[1] * fAdjustHeight;
diff --git a/graf3d/gl/src/TGL5DPainter.cxx b/graf3d/gl/src/TGL5DPainter.cxx
index 3fe834e..634bb8c 100644
--- a/graf3d/gl/src/TGL5DPainter.cxx
+++ b/graf3d/gl/src/TGL5DPainter.cxx
@@ -434,7 +434,7 @@ void TGL5DPainter::SetSurfaceColor(ConstSurfIter_t it)const
 {
    //Set the color for iso-surface.
    Color_t ind = it->fColor;
-   Float_t rgba[] = {0.f, 0.f, 0.f, it->fAlpha / 100.};
+   Float_t rgba[] = {0.f, 0.f, 0.f, it->fAlpha / 100.f};
    Rgl::Pad::ExtractRGB(ind, rgba);
    //Set color for surface.
    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, rgba);
diff --git a/graf3d/gl/src/TGLHistPainter.cxx b/graf3d/gl/src/TGLHistPainter.cxx
index 2edbe6f..e331890 100644
--- a/graf3d/gl/src/TGLHistPainter.cxx
+++ b/graf3d/gl/src/TGLHistPainter.cxx
@@ -618,7 +618,7 @@ TGLHistPainter::ParsePaintOption(const TString &o)const
    TString options(o);
    
    PlotOption_t parsedOption = {kGLDefaultPlot, kGLCartesian,
-                                kTRUE, kTRUE, kTRUE, //Show back box, show front box, show axes.
+                                (bool)kTRUE, (bool)kTRUE, (bool)kTRUE, //Show back box, show front box, show axes.
                                 gPad->GetLogx(), gPad->GetLogy(), gPad->GetLogz()};
 
    //Check coordinate system type.
diff --git a/graf3d/gl/src/TGLLightSet.cxx b/graf3d/gl/src/TGLLightSet.cxx
index 0fee908..ea303db 100644
--- a/graf3d/gl/src/TGLLightSet.cxx
+++ b/graf3d/gl/src/TGLLightSet.cxx
@@ -112,11 +112,11 @@ void TGLLightSet::StdSetupLights(const TGLBoundingBox& bbox,
       TGLVector3 center(c.X(), c.Y(), c.Z());
       camera.RefModelViewMatrix().MultiplyIP(center);
       // Float_t pos0[] = { center.X(), center.Y(), frontLightZ, 1.0 };
-      Float_t pos0[] = { 0.0,        0.0,                      frontLightZ, 1.0 };
-      Float_t pos1[] = { center.X(), center.Y() + lightRadius, sideLightsZ, 1.0 };
-      Float_t pos2[] = { center.X(), center.Y() - lightRadius, sideLightsZ, 1.0 };
-      Float_t pos3[] = { center.X() - lightRadius, center.Y(), sideLightsZ, 1.0 };
-      Float_t pos4[] = { center.X() + lightRadius, center.Y(), sideLightsZ, 1.0 };
+      Float_t pos0[] = { 0.f,        0.f,                                           (float)frontLightZ, 1.f };
+      Float_t pos1[] = { (float)center.X(), (float)center.Y() + (float)lightRadius, (float)sideLightsZ, 1.f };
+      Float_t pos2[] = { (float)center.X(), (float)center.Y() - (float)lightRadius, (float)sideLightsZ, 1.f };
+      Float_t pos3[] = { (float)center.X() - (float)lightRadius, (float)center.Y(), (float)sideLightsZ, 1.f };
+      Float_t pos4[] = { (float)center.X() + (float)lightRadius, (float)center.Y(), (float)sideLightsZ, 1.f };
 
       Float_t specular = fUseSpecular ? fSpecularPower : 0.0f;
       const Float_t frontLightColor[] = { fFrontPower, fFrontPower, fFrontPower, 1.0f };
diff --git a/math/mlp/src/TMultiLayerPerceptron.cxx b/math/mlp/src/TMultiLayerPerceptron.cxx
index 71561f1..638e9d7 100644
--- a/math/mlp/src/TMultiLayerPerceptron.cxx
+++ b/math/mlp/src/TMultiLayerPerceptron.cxx
@@ -906,7 +906,7 @@ void TMultiLayerPerceptron::Train(Int_t nEpoch, Option_t * option, Double_t minE
       }
       // Security: would the learning lead to non real numbers,
       // the learning should stop now.
-      if (isnan(GetError(TMultiLayerPerceptron::kTraining))) {
+      if (std::isnan(GetError(TMultiLayerPerceptron::kTraining))) {
          Error("TMultiLayerPerceptron::Train()","Stop.");
          iepoch = nEpoch;
       }
diff --git a/misc/table/src/TVolumeView.cxx b/misc/table/src/TVolumeView.cxx
index 6d83359..734a54c 100644
--- a/misc/table/src/TVolumeView.cxx
+++ b/misc/table/src/TVolumeView.cxx
@@ -579,7 +579,7 @@ Int_t TVolumeView::GetGlobalRange(const TVolumeView *rootNode,Float_t *globalMin
          }
          // Calculate the range of the outlined cube verteces.
          GetLocalRange(globalMin,globalMax);
-         Float_t offSet[3] = {position->GetX(),position->GetY(),position->GetZ()};
+         Float_t offSet[3] = {(float)position->GetX(),(float)position->GetY(),(float)position->GetZ()};
          for (Int_t i=0;i<3;i++) {
             globalMin[i] += offSet[i];
             globalMax[i] += offSet[i];
diff --git a/net/rpdutils/src/daemon.cxx b/net/rpdutils/src/daemon.cxx
index 5a030da..ac3ae0c 100644
--- a/net/rpdutils/src/daemon.cxx
+++ b/net/rpdutils/src/daemon.cxx
@@ -140,7 +140,7 @@ void DaemonStart(int ignsigcld, int fdkeep, EService service)
 #ifdef USE_SETSID
    if (setsid() == -1) {
 #else
-   if (setpgrp(0, getpid()) == -1) {
+   if (setpgrp() == -1) {
 #endif
       if (service == kROOTD)
          fprintf(stderr, "DaemonStart: can't change process group\n");
diff --git a/tmva/src/DataSet.cxx b/tmva/src/DataSet.cxx
index c1f9727..d8131b9 100644
--- a/tmva/src/DataSet.cxx
+++ b/tmva/src/DataSet.cxx
@@ -439,7 +439,7 @@ void TMVA::DataSet::InitSampling( Float_t fraction, Float_t weight, UInt_t seed
    fSamplingEventList.at( treeIdx ).reserve( nEvts );
    fSamplingSelected.at( treeIdx ).reserve( fSamplingNEvents.at(treeIdx) );
    for (Long64_t ievt=0; ievt<nEvts; ievt++) {
-      std::pair<Float_t,Long64_t> *p = new std::pair<Float_t,Long64_t>(std::make_pair<Float_t,Long64_t>(1.0,ievt));
+      std::pair<Float_t,Long64_t> *p = new std::pair<Float_t,Long64_t>(std::make_pair(1.0,ievt));
       fSamplingEventList.at( treeIdx ).push_back( p );
    }
 
diff --git a/tmva/src/VariableNormalizeTransform.cxx b/tmva/src/VariableNormalizeTransform.cxx
index 91d60a7..62519fa 100644
--- a/tmva/src/VariableNormalizeTransform.cxx
+++ b/tmva/src/VariableNormalizeTransform.cxx
@@ -404,10 +404,10 @@ void TMVA::VariableNormalizeTransform::ReadFromXML( void* trfnode )
    // coverity[tainted_data_argument]
 
    for( UInt_t ivar = 0; ivar < nvars; ++ivar ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('v',ivar));
+      fGet.push_back(std::make_pair('v',ivar));
    }
    for( UInt_t itgt = 0; itgt < ntgts; ++itgt ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('t',itgt));
+      fGet.push_back(std::make_pair('t',itgt));
    }
    void* ch = gTools().GetChild( trfnode );
    while(ch) {
@@ -483,10 +483,10 @@ void TMVA::VariableNormalizeTransform::ReadTransformationFromStream( std::istrea
    UInt_t nvars = GetNVariables();
    UInt_t ntgts = GetNTargets();
    for( UInt_t ivar = 0; ivar < nvars; ++ivar ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('v',ivar));
+      fGet.push_back(std::make_pair('v',ivar));
    }
    for( UInt_t itgt = 0; itgt < ntgts; ++itgt ){
-      fGet.push_back(std::make_pair<Char_t,UInt_t>('t',itgt));
+      fGet.push_back(std::make_pair('t',itgt));
    }
    char buf[512];
    char buf2[512];
diff --git a/tmva/src/VariableTransformBase.cxx b/tmva/src/VariableTransformBase.cxx
index 5f8a303..6611b41 100644
--- a/tmva/src/VariableTransformBase.cxx
+++ b/tmva/src/VariableTransformBase.cxx
@@ -132,42 +132,42 @@ void TMVA::VariableTransformBase::SelectInput( const TString& _inputVariables, B
 	    variables.Remove(0,1); // remove "V"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t ivar = 0; ivar < nvars; ++ivar ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+		  fGet.push_back( std::make_pair('v',ivar) );
 		  varIndices.insert( ivar );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= nvars )
 		  Log() << kFATAL << "You selected variable with index : " << idx << " of only " << nvars << " variables." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	       fGet.push_back( std::make_pair('v',idx) );
 	       varIndices.insert( idx );
 	    }
 	 }else if( variables.BeginsWith("T") ) {       // targets
 	    variables.Remove(0,1); // remove "T"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+		  fGet.push_back( std::make_pair('t',itgt) );
 		  tgtIndices.insert( itgt );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= ntgts )
 		  Log() << kFATAL << "You selected target with index : " << idx << " of only " << ntgts << " targets." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	       fGet.push_back( std::make_pair('t',idx) );
 	       tgtIndices.insert( idx );
 	    }
 	 }else if( variables.BeginsWith("S") ) {       // spectators
 	    variables.Remove(0,1); // remove "S"
 	    if( variables.Length() == 0 ){
 	       for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) {
-		  fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+		  fGet.push_back( std::make_pair('s',ispct) );
 		  spctIndices.insert( ispct );
 	       }
 	    } else {
 	       UInt_t idx = variables.Atoi();
 	       if( idx >= nspcts )
 		  Log() << kFATAL << "You selected spectator with index : " << idx << " of only " << nspcts << " spectators." << Endl;
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	       fGet.push_back( std::make_pair('s',idx) );
 	       spctIndices.insert( idx );
 	    }
 	 }else if( TString("REARRANGE").BeginsWith(variables) ) {       // toggle rearrange sorting (take sort order given in the options)
@@ -180,21 +180,21 @@ void TMVA::VariableTransformBase::SelectInput( const TString& _inputVariables, B
 	 Int_t numIndices = varIndices.size()+tgtIndices.size()+spctIndices.size();
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fGet.push_back( std::make_pair('v',ivar) );
 	       varIndices.insert( ivar );
 	       break;
 	    }
 	 }
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fGet.push_back( std::make_pair('t',itgt) );
 	       tgtIndices.insert( itgt );
 	       break;
 	    }
 	 }
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == variables ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fGet.push_back( std::make_pair('s',ispct) );
 	       spctIndices.insert( ispct );
 	       break;
 	    }
@@ -210,29 +210,29 @@ void TMVA::VariableTransformBase::SelectInput( const TString& _inputVariables, B
    if( putIntoVariables ) {
       Int_t idx = 0;
       for( SelectedIndices::iterator it = varIndices.begin(), itEnd = varIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	 fPut.push_back( std::make_pair('v',idx) );
 	 ++idx;
       }
       for( SelectedIndices::iterator it = tgtIndices.begin(), itEnd = tgtIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	 fPut.push_back( std::make_pair('t',idx) );
 	 ++idx;
       }
       for( SelectedIndices::iterator it = spctIndices.begin(), itEnd = spctIndices.end(); it != itEnd; ++it ) {
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	 fPut.push_back( std::make_pair('s',idx) );
 	 ++idx;
       }
    }else {
       for( SelectedIndices::iterator it = varIndices.begin(), itEnd = varIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('v',idx) );
+	 fPut.push_back( std::make_pair('v',idx) );
       }
       for( SelectedIndices::iterator it = tgtIndices.begin(), itEnd = tgtIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('t',idx) );
+	 fPut.push_back( std::make_pair('t',idx) );
       }
       for( SelectedIndices::iterator it = spctIndices.begin(), itEnd = spctIndices.end(); it != itEnd; ++it ) {
 	 Int_t idx = (*it);
-	 fPut.push_back( std::make_pair<Char_t,UInt_t>('s',idx) );
+	 fPut.push_back( std::make_pair('s',idx) );
       }
 
       // if sorting is turned on, fGet should have the indices sorted as fPut has them.
@@ -693,7 +693,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == label ||
 	        fDsi.GetVariableInfo( ivar ).GetExpression() == expression) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fGet.push_back( std::make_pair('v',ivar) );
 	       break;
 	    }
 	 }
@@ -701,7 +701,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == label ||
 	        fDsi.GetTargetInfo( itgt ).GetExpression() == expression ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fGet.push_back( std::make_pair('t',itgt) );
 	       break;
 	    }
 	 }
@@ -709,7 +709,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == label ||
 	        fDsi.GetSpectatorInfo( ispct ).GetExpression() == expression ) {
-	       fGet.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fGet.push_back( std::make_pair('s',ispct) );
 	       break;
 	    }
 	 }
@@ -741,7 +741,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t ivar = 0; ivar < nvars; ++ivar ) { // search all variables
 	    if( fDsi.GetVariableInfo( ivar ).GetLabel() == label ||
 	        fDsi.GetVariableInfo( ivar ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('v',ivar) );
+	       fPut.push_back( std::make_pair('v',ivar) );
 	       break;
 	    }
 	 }
@@ -749,7 +749,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t itgt = 0; itgt < ntgts; ++itgt ) { // search all targets
 	    if( fDsi.GetTargetInfo( itgt ).GetLabel() == label ||
 	        fDsi.GetTargetInfo( itgt ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('t',itgt) );
+	       fPut.push_back( std::make_pair('t',itgt) );
 	       break;
 	    }
 	 }
@@ -757,7 +757,7 @@ void TMVA::VariableTransformBase::ReadFromXML( void* selnode )
 	 for( UInt_t ispct = 0; ispct < nspcts; ++ispct ) { // search all spectators
 	    if( fDsi.GetSpectatorInfo( ispct ).GetLabel() == label ||
 	        fDsi.GetSpectatorInfo( ispct ).GetExpression() == expression ) {
-	       fPut.push_back( std::make_pair<Char_t,UInt_t>('s',ispct) );
+	       fPut.push_back( std::make_pair('s',ispct) );
 	       break;
 	    }
 	 }
diff --git a/proof/proofd/src/XrdProofdProofServMgr.cxx b/proof/proofd/src/XrdProofdProofServMgr.cxx
index 6de97f9..c266310 100644
--- a/proof/proofd/src/XrdProofdProofServMgr.cxx
+++ b/proof/proofd/src/XrdProofdProofServMgr.cxx
@@ -45,6 +45,8 @@
 #include "XrdProofGroup.h"
 #include "XrdProofSched.h"
 #include "XrdROOT.h"
+#include <sys/types.h>
+#include <grp.h>
 
 #include <map>
 
diff --git a/graf3d/gl/src/TGLHistPainter.cxx b/graf3d/gl/src/TGLHistPainter.cxx
index e331890..5c11f9f 100644
--- a/graf3d/gl/src/TGLHistPainter.cxx
+++ b/graf3d/gl/src/TGLHistPainter.cxx
@@ -619,7 +619,7 @@ TGLHistPainter::ParsePaintOption(const TString &o)const
    
    PlotOption_t parsedOption = {kGLDefaultPlot, kGLCartesian,
                                 (bool)kTRUE, (bool)kTRUE, (bool)kTRUE, //Show back box, show front box, show axes.
-                                gPad->GetLogx(), gPad->GetLogy(), gPad->GetLogz()};
+                                (bool)gPad->GetLogx(), (bool)gPad->GetLogy(), (bool)gPad->GetLogz()};
 
    //Check coordinate system type.
    if (FindAndRemoveOption(options, "pol"))
diff --git a/proof/proofd/src/XrdProofdAux.cxx b/proof/proofd/src/XrdProofdAux.cxx
index bd3458e..a499259 100644
--- a/proof/proofd/src/XrdProofdAux.cxx
+++ b/proof/proofd/src/XrdProofdAux.cxx
@@ -32,6 +32,9 @@
 // Tracing
 #include "XrdProofdTrace.h"
 
+#include <sys/types.h>
+#include <grp.h>
+
 // Local definitions
 #ifdef XPD_MAXLEN
 #undefine XPD_MAXLEN
