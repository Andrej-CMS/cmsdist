### FILE scramv1-tool-conf

Requires: gmake
Source0: tool2xml.pl

%prep
%build

# This is a generic template to collect SCRAMToolBox toolfiles of all the tools
# and generate CMSconfiguration, tools-STANDALONE.conf and requirements file
#
#   requiredtools	Tools for which we need to collect the SCRAMToolBox toolfiles
#                  	(This is automatically set by install.sh script)
#   skipreqtools	Do not add these tools in requirements file

%install
%define scramsitename  STANDALONE
rm -rf %i/configurations/SCRAMToolBox
mkdir -p %i/configurations/SCRAMToolBox/tools
mkdir -p %i/configurations/SCRAMToolBox/CMSconfigs

%if "%{?skip_tools_conf_arch:set}" != "set"
(echo "ARCHITECTURE:%{cmsplatf}"
 echo "SCRAM_BASEPATH:%{instroot}" ) >> tools-%{scramsitename}.conf
%endif

( echo ""
  %if "%{?use_system_gcc:set}" == "set"
  echo "TOOL:cxxcompiler:"
       echo "  +GCC_BASE:/none"
       echo "  +CC:$(which gcc)"
       echo "  +CXX:$(which c++)"
       echo "  +PATH:/none"  # useless, toolbox says value=""
       echo "  +LD_LIBRARY_PATH:/none" # useless, toolbox says value=""
       echo "TOOL:g77gcc3:"
       echo "  +FC:$(which g77 | grep -v 'no g77')"
%endif
%if "%{?use_system_gcc:set}-%{?use_ccache:set}" == "-set"
echo "TOOL:cxxcompiler:"
       echo "  +GCC_BASE:$CCACHE_ROOT"
eval        "echo \"  +CC:$CCACHE_ROOT/bin/gcc\""
eval        "echo \"  +CXX:$CCACHE_ROOT/bin/c++\""
       echo "TOOL:g77gcc3:"
       echo "  +FC:$GCC_ROOT/bin/g77"
%endif

%if "%{?use_system_java:set}" == "set"
       echo "TOOL:jcompiler:"
       echo "  +JAVA_BASE:/afs/cern.ch/cms/sw/%cmsplatf/external/java-jdk/1.5.0.p6-CMS8"
%else
       echo "TOOL:jcompiler:"
       echo "  +JAVA_BASE:%{instroot}/%cmsplatf/external/$JCOMPILER_TOOL/$JCOMPILER_VERSION"
%endif

if [ "X`echo %requiredtools | tr ' ' '\n' | grep '^oracle$'`" = "Xoracle" ] ; then
       echo "TOOL:oracle:"
       echo "  +ORACLE_ADMINDIR:$ORACLE_ENV_ROOT/etc"
fi

) >> tools-%{scramsitename}.conf

mv tools-%{scramsitename}.conf %i/configurations/SCRAMToolBox/CMSconfigs/tools-%{scramsitename}.conf

%if "%{?systemtools:set}" != "set"
%define systemtools %{nil}
%endif

%if "%{?skipreqtools:set}" != "set"
%define skipreqtools %{nil}
%endif

# Copy all tool files and generate the `requirements` file.
cat << \EOF_REQUIREMENTS > %i/configurations/requirements
<doc type=BuildSystem::Requirements version=2.0>
<base url="file:%i/configurations/SCRAMToolBox/">
EOF_REQUIREMENTS

for tool in %requiredtools %systemtools ${PKGTOOLS_SYSTEM_TOOLS} ; do
  uctool=`echo $tool | tr '[a-z-]' '[A-Z_]'`
  toolbase=`perl -e 'print "$ENV{'$uctool'_ROOT}\n";'`
  [ -d $toolbase/etc/scram.d ] || continue
  find $toolbase/etc/scram.d -type f -exec cp {} %i/configurations/SCRAMToolBox/tools \;
done

skiptools=`echo %skipreqtools | tr " " "\n"`
for tool in `find %i/configurations/SCRAMToolBox/tools -type f`
do
    perl %_sourcedir/tool2xml.pl $tool > $tool.xml
    toolbasename=`basename $tool`
    cat $tool.xml | grep -e "<[Tt][Oo][Oo][Ll]" | \
      perl -p -e 's|.*<[Tt][Oo][Oo][Ll].*name="([^"]*).*version="([^"]*).*>|<require name='${toolbasename}' version=$2  url="file:tools/'${toolbasename}'.xml"></require>|' >> %i/configurations/requirements
    toolname=`basename $tool`
    echo $skiptools | grep $toolname 2>&1 >/dev/null && continue
    echo "<select name=$toolname>" >> %i/configurations/requirements
done

echo "</base>" >> %i/configurations/requirements

# Fixes logic in above loop in case of online release:
# the descriptions of explicitly defined systemtools should 
# take precedence over those from cms-rebuilt rpms

%if "%{?online_release:set}" == "set"
for tool in %systemtools ${PKGTOOLS_SYSTEM_TOOLS} ; do
  cp -rf %{onlinesystemtoolsroot}/etc/scram.d/$tool %i/configurations/SCRAMToolBox/tools/$tool
done
# For now copy all systemtools files. If needed, this can be done more selectively.
%endif


echo %scramsitename > %i/configurations/SCRAMToolBox/CMSconfigs/sitename
perl %_sourcedir/tool2xml.pl %i/configurations/requirements > %i/configurations/requirements.xml

%post
perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" $(find $RPM_INSTALL_PREFIX/%{pkgrel}/configurations -type f)
