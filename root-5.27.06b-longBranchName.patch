diff -rupN root.orig/core/base/src/TBuffer.cxx root/core/base/src/TBuffer.cxx
--- root.orig/core/base/src/TBuffer.cxx 2012-01-30 11:54:32.000000000 +0100
+++ root/core/base/src/TBuffer.cxx      2012-01-30 11:57:35.000000000 +0100
@@ -183,8 +183,14 @@ void TBuffer::SetBuffer(void *buf, UInt_
 void TBuffer::Expand(Int_t newsize)
 {
    // Expand the I/O buffer to newsize bytes.
+   //
+   // In order to avoid losing data, if the current length is greater than
+   // the requested size, we only shrink down to the current length.
 
    Int_t l  = Length();
+   if ( l > newsize ) {
+      newsize = l;
+   }
    if ( (fMode&kWrite)!=0 ) {
       fBuffer  = fReAllocFunc(fBuffer, newsize+kExtraSpace,
                               fBufSize+kExtraSpace);
diff -rupN root.orig/tree/tree/src/TBranch.cxx root/tree/tree/src/TBranch.cxx
--- root.orig/tree/tree/src/TBranch.cxx 2012-01-30 11:54:31.000000000 +0100
+++ root/tree/tree/src/TBranch.cxx      2012-01-30 11:58:39.000000000 +0100
@@ -1892,7 +1892,8 @@ void TBranch::SetBasketSize(Int_t buffsi
    // Set the basket size
    // The function makes sure that the basket size is greater than fEntryOffsetlen
 
-   if (buffsize < 100+fEntryOffsetLen) buffsize = 100+fEntryOffsetLen;
+   Int_t minsize = 100 + fName.Length();
+   if (buffsize < minsize+fEntryOffsetLen) buffsize = minsize+fEntryOffsetLen;
    fBasketSize = buffsize;
    TBasket *basket = (TBasket*)fBaskets[fWriteBasket];
    if (basket) {
diff -rupN root.orig/tree/tree/src/TTree.cxx root/tree/tree/src/TTree.cxx
--- root.orig/tree/tree/src/TTree.cxx   2012-01-30 11:54:31.000000000 +0100
+++ root/tree/tree/src/TTree.cxx        2012-01-30 12:00:54.000000000 +0100
@@ -5523,9 +5523,19 @@ void TTree::OptimizeBaskets(Int_t maxMem
       }
       memFactor = Double_t(maxMemory)/Double_t(newMemsize);
       if (memFactor > 100) memFactor = 100;
-      bmin = Int_t(bmin*memFactor);
-      bmax = Int_t(bmax*memFactor);
-      if (bmax < bmin) bmax = bmin;  //this may happen when bmax is above 2 billions      
+
+      Double_t bmin_new = bmin*memFactor;
+      Double_t bmax_new = bmax*memFactor;
+      static const UInt_t hardmax = 1*1024*1024*1024; // Really, really never give more than 1Gb to a single buffer.
+
+      // Really, really never go lower than 8 bytes (we use this number
+      // so that the calculation of the number of basket is consistent
+      // but in fact SetBasketSize will not let the size go below
+      // TBranch::fEntryOffsetLen + (100 + strlen(branch->GetName())
+      // (The 2nd part being a slight over estimate of the key length.
+      static const UInt_t hardmin = 8;
+      bmin = (bmin_new > hardmax) ? hardmax : ( bmin_new < hardmin ? hardmin : (UInt_t)bmin_new );
+      bmax = (bmax_new > hardmax) ? bmin : (UInt_t)bmax_new;     
    }
    if (pDebug) {
       printf("oldMemsize = %d,  newMemsize = %d\n",oldMemsize, newMemsize);
