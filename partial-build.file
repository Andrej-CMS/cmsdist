### FILE partial-build

%define application  	%n

%if "%{?isPatch}" == "yes"
%define patchbaserelease %(echo %v | cut -d_ -f1-4)
# patchbaserelease is used in TC url to get sources for patch-release, and should give the name 
# of the full release, i.e. for CMSSW_X_Y_Z_patch2_ONLINE we need CMSSW_X_Y_Z.
%define parent_release_base ../../%(echo %n | sed -e "s|-patch||")/%(echo %v | cut -d_ -f1-4,6)
# parent_release_base is the location of the parent partial release, on top of which we are building 
# our patch release, assuming following naming conventions:  
#                     name:                 version:
# parent release:     online                CMSSW_X_Y_Z_ONLINE
# patch release:      online-patch          CMSSW_X_Y_Z_patchN_ONLINE
%endif

%define cvstag 		%cmssw_release

%define cvsprojuc       CMSSW
%define cvsprojlc       cmssw
%define cvsdir          %cvsprojuc
%define cvsserver       %cvsprojlc

# for CMSSW/config manipulations in scramv1-build.file:
%define ucprojname  	%cvsprojuc

%define cvsconfig       config
%define confversion     %cmsConfiguration
%define conflevel       _2
%define buildtarget     release-build

%define bootstrapfile config/%{application}_bootsrc.xml

# Creates bootstrap file for a partial release. 
# List of packages is read from application specific buildsetfile
# found in CMSDIST (name is defined in the application spec file).
# Reading from file allows to supply a longer list of packages than 
# rpm shell can handle:
%define patchsrc perl -p -e 'if (s/(<download.*)(file:src)(.*)(name="src)("\\/>)/#$1$2$3$4$5/){open $fh, "%{_sourcedir}/%{buildsetfile}" or die; while(readline $fh){chomp;print "$1$2/$_$3$4/$_$5\\n"}}' config/bootsrc.xml > %bootstrapfile
