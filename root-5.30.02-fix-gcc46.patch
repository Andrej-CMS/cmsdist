diff --git a/math/smatrix/inc/Math/MatrixInversion.icc b/math/smatrix/inc/Math/MatrixInversion.icc
index 99b7f49..b1d3848 100644
--- a/math/smatrix/inc/Math/MatrixInversion.icc
+++ b/math/smatrix/inc/Math/MatrixInversion.icc
@@ -85,7 +85,7 @@ void Inverter<idim,N>::InvertBunchKaufman(MatRepSym<T,idim> & rhs, int &ifail) {
    // L is unit lower triangular, D is direct sum of 1x1 and 2x2 matrices
    // L and D^-1 are stored in A = *this, P is stored in piv[]
 	
-   for (j=1; j < nrow; j+=s)  // main loop over columns
+   for (j=1; j - nrow < 0; j+=s)  // main loop over columns
    {
       mjj = rhs.Array() + j*(j-1)/2 + j-1;
       lambda = 0;           // compute lambda = max of A(j+1:n,j)
@@ -323,7 +323,7 @@ void Inverter<idim,N>::InvertBunchKaufman(MatRepSym<T,idim> & rhs, int &ifail) {
          if (j < nrow)
          {
             ip = rhs.Array() + (j+1)*j/2 + j-1;
-            for (i=0; i < nrow-j; ip += 1+j+i++)
+            for (i=0; i - nrow+j < 0; ip += 1+j+i++)
                x[i] = *ip;
             for (i=j+1; i<=nrow ; i++)
             {
@@ -331,7 +331,7 @@ void Inverter<idim,N>::InvertBunchKaufman(MatRepSym<T,idim> & rhs, int &ifail) {
                ip = rhs.Array() + i*(i-1)/2 + j;
                for (k=0; k <= i-j-1; k++)
                   temp2 += *ip++ * x[k];
-               for (ip += i-1; k < nrow-j; ip += 1+j+k++) 
+               for (ip += i-1; k - nrow+j<0; ip += 1+j+k++) 
                   temp2 += *ip * x[k];
                *(rhs.Array()+ i*(i-1)/2 + j-1) = static_cast<T>( -temp2 );
             }
@@ -350,7 +350,7 @@ void Inverter<idim,N>::InvertBunchKaufman(MatRepSym<T,idim> & rhs, int &ifail) {
          if (j < nrow)
          {
             ip = rhs.Array() + (j+1)*j/2 + j-1;
-            for (i=0; i < nrow-j; ip += 1+j+i++)
+            for (i=0; i - nrow+j<0; ip += 1+j+i++)
                x[i] = *ip;
             for (i=j+1; i<=nrow ; i++)
             {
@@ -358,7 +358,7 @@ void Inverter<idim,N>::InvertBunchKaufman(MatRepSym<T,idim> & rhs, int &ifail) {
                ip = rhs.Array() + i*(i-1)/2 + j;
                for (k=0; k <= i-j-1; k++)
                   temp2 += *ip++ * x[k];
-               for (ip += i-1; k < nrow-j; ip += 1+j+k++)
+               for (ip += i-1; k - nrow+j<0; ip += 1+j+k++)
                   temp2 += *ip * x[k];
                *(rhs.Array()+ i*(i-1)/2 + j-1) = static_cast<T>( -temp2 );
             }    
--- a/math/smatrix/inc/Math/MatrixInversion.icc	2011-10-11 16:50:39.000000000 +0200
+++ b/math/smatrix/inc/Math/MatrixInversion.icc	2011-10-11 17:28:41.000000000 +0200
@@ -273,7 +273,7 @@
                   temp2 = *ip * *(mjj + j) + *(ip + 1) * *(mjj + j + 1);
 //                   if (std::abs(temp2 ) <= epsilon)
 //                      temp2 = 0;
-                  for (k = j+2; k <= i ; k++)
+                  for (k = j+2; k -i <= 0 ; k++)
                   {
                      ip = rhs.Array() + i*(i-1)/2 + k-1;
                      iq = rhs.Array() + k*(k-1)/2 + j-1;
@@ -337,7 +337,7 @@
             }
             temp2 = 0;
             ip = rhs.Array() + (j+1)*j/2 + j-1;
-            for (k=0; k < nrow-j; ip += 1+j+k++)
+            for (k=0; k - nrow+j<0; ip += 1+j+k++)
                temp2 += x[k] * *ip;
             *mjj -= static_cast<T>( temp2 );
          }
@@ -364,7 +364,7 @@
             }    
             temp2 = 0;
             ip = rhs.Array() + (j+1)*j/2 + j-1;
-            for (k=0; k < nrow-j; ip += 1+j+k++)
+            for (k=0; k - nrow+j<0; ip += 1+j+k++)
                temp2 += x[k] * *ip;
             *mjj -= static_cast<T>( temp2 );
             temp2 = 0;
@@ -373,9 +373,9 @@
                temp2 += *ip * *(ip+1);
             *(mjj-1) -= static_cast<T>( temp2 );
             ip = rhs.Array() + (j+1)*j/2 + j-2;
-            for (i=0; i < nrow-j; ip += 1+j+i++)
+            for (i=0; i - nrow+j<0; ip += 1+j+i++)
                x[i] = *ip;
-            for (i=j+1; i <= nrow ; i++)
+            for (i=j+1; i -nrow <= 0 ; i++)
             {
                temp2 = 0;
                ip = rhs.Array() + i*(i-1)/2 + j;
@@ -387,7 +387,7 @@
             }
             temp2 = 0;
             ip = rhs.Array() + (j+1)*j/2 + j-2;
-            for (k=0; k < nrow-j; ip += 1+j+k++)
+            for (k=0; k - nrow + j < 0; ip += 1+j+k++)
                temp2 += x[k] * *ip;
             *(mjj-j) -= static_cast<T>( temp2 );
          }
