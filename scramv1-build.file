### FILE scramv1-build

# This is a generic template to build a scram-based project.  Set the
# following parameters and import this to the spec.
#
#  cvsrepo	main project repository
#  cvstag	tag to check out the main project (normally: %{n}_%{v})
#  cvsconfig	cvs module to check out as "config" (normally: config)
#  cvssrc	cvs module to check out as project sources (normally: %n)
#  srctree	name of the cvssrcin export tree (normally: src)
#
#  tbxrepo	scram tool box repository
#  conftag	tag for SCRAMToolBox in the above
#  confsite	name of the directory to link as "config/site" (under SCRAMToolBox)
#  toolfile	tool configuration file (normally: $CMS_TOOL_CONF/tool.conf)
#
#  buildarch	optional command to override build architecture
#  buildtarget  scram build target to generate the full release (normally: release)
#
#  patchsrc	patch to apply to the sources (optional)
#
# FIXME: support building all platforms together like scram does?
# FIXME: produce requirements from "scram tool info"?
# FIXME: automatic sub-packages for "doc" etc?
# FIXME: post-install stuff for modules etc?

Requires: SCRAMV1

# NR: allow to specify repository and tag 
# (default: cvsrepo and cvstag)
%if "%{?configtag:set}" != "set"
%define configtag	%cvstag
%endif
%if "%{?configrepo:set}" != "set"
%define configrepo	%cvsrepo
%endif

# NR: allow to change tarball names, otherwise old distributions
# are fetched from the apt SOURCE repository. 

%if "%{?configtar:set}" != "set"
%define configtar	config.tar.gz
%endif
%if "%{?tbxtar:set}" != "set"
%define tbxtar	toolbox.tar.gz
%endif

# NR: Allow to define bootstrap and requirements file names
%if "%{?bootstrapfile:set}" != "set"
%define bootstrapfile config/bootsrc
%define reqfile config/requirements
%endif

Source0: %{tbxrepo}&tag=-r%{conftag}&module=SCRAMToolBox&output=/%tbxtar
Source1: %{configrepo}&tag=-r%{configtag}&module=%{cvsconfig}&export=config&output=/%configtar
%if  "%{cvsrepo}" != "cmstc"
%define source2 %{cvsrepo}&tag=-r%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%else
%define source2 %{cvsrepo}://?tag=%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%endif

# Pick additional sources.  Since install.sh does a grep for "^Source",
# we need to arrange an expansion that always works, regardless of whether
# %additionalSrc* are defined.
%if "%{?additionalSrc0:set}" == "set"
%define source3 %{additionalSrc0}&output=/src1.tar.gz
%else
%define source3 none
%endif 

%if "%{?additionalSrc1:set}" == "set"
%define source4 %{additionalSrc1}&output=/src2.tar.gz
%else
%define source4 none
%endif

Source2: %source2
Source3: %source3
Source4: %source4

%prep

# Create a SCRAM project area, but using the already extracted
# sources.  In other words, pick up the files from the project config
# area, but munge all instances of <base url="cvs:*"> into a local
# reference so SCRAM won't try to download stuff from the network.

%setup -T -b 0 -n SCRAMToolBox
%setup -D -T -b 1 -n config
%setup -D -T -b 2 -n %{srctree}

%if "%{?additionalSrc0:set}" == "set"
%setup -D -T -a 3 -n %{srctree}
%endif

%if "%{?additionalSrc1:set}" == "set"
%setup -D -T -a 4 -n %{srctree}
%endif

%define ucprojname  %(echo %n | tr 'a-z' 'A-Z')
%define toolconf_filename %(basename %toolconf)
touch %_builddir/config/%{ucprojname}_ignore.file
for file in `ls %_builddir/config/%{ucprojname}_*.file | grep -v  '/%{ucprojname}_ignore.file$' | sed 's|.*/%{ucprojname}_||;s|.file$||'`; do
  cat %_builddir/config/%{ucprojname}_${file}.file | sed 's|@PROJECT_NAME@|%ucprojname|g;s|@PROJECT_VERSION@|%v|g;s|@PROJECT_BUILD_PATH@|%_builddir|g'> %_builddir/config/$file
done
rm -f %_builddir/config/%{ucprojname}_ignore.file
mkdir -p %_builddir/config/site
cp -f %toolconf %_builddir/config/site
echo %toolconf_filename | sed 's|^tools-||;s|.conf$||' > %_builddir/config/site/sitename

pwd
cd %_builddir

%{?patchsrc:%patchsrc}
%{?patchsrc2:%patchsrc2}
%{?patchsrc3:%patchsrc3}
%{?patchsrc4:%patchsrc4}
%{?patchsrc5:%patchsrc5}

pwd
perl -p -i -e 's!url="(cvs:\?module=|file:)SCRAMToolBox/(.*)">!url="file:$2">!;' SCRAMToolBox/CMS/Configuration/CMSconfiguration

echo $PERL5LIB
echo rm -rf %i
mkdir -p $(dirname %i)

%{?buildarch:%buildarch}
scramv1 project -d $(dirname %i) -b %{bootstrapfile} -f %_builddir/config/site/%toolconf_filename

%build
pwd
# Remove cmt stuff that brings unwanted dependencies: 
rm -rf `find %{i}/src -type d -name cmt`
echo `scramv1 arch`
cd %i
#-ap: the following is needed to get the include paths for FWLITE set up properly
# for clhep and boost:

cp $(dirname %i)/%v/.SCRAM/InstalledTools/clhep ./clhep
%define clhepvers %(grep 'Tool name=' clhep | cut -d= -f3 | tr '>' ' ')
scramv1 setup clhep %clhepvers file:./clhep

cp $(dirname %i)/%v/.SCRAM/InstalledTools/boost ./boost
%define boostvers %(grep 'Tool name=' boost | cut -d= -f3 | tr '>' ' ')
scramv1 setup boost %boostvers file:./boost

#-ap end
cd src

%{?buildarch:%buildarch}

export BUILD_LOG=yes
export SCRAM_NOPLUGINREFRESH=yes
# export SCRAM_NOSYMCHECK=true

if [ $(uname) = Darwin ]; then
  # scramv1 doesn't know the rpath variable on darwin...
  scramv1 b echo_null # ensure lib, bin exist
  eval `scramv1 runtime -sh`
  export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
fi

%if "%{?preBuildCommand:set}" == "set"
echo "executing %preBuildCommand"
%preBuildCommand
%endif

%if "%{?buildtarget:set}" != "set"
%define buildtarget %{nil} 
%endif

scramv1 b -r echo_CXX </dev/null
%if "%{?prebuildtarget:set}" == "set"
scramv1 b --verbose -f %{prebuildtarget} </dev/null
%endif
scramv1 b --verbose -f %{compileOptions} %{makeprocesses}  %{buildtarget} </dev/null
%if "%{?additionalBuildTarget0:set}" == "set"
scramv1 b --verbose -f %{additionalBuildTarget0} < /dev/null
%endif
%if "%{?postbuildtarget:set}" == "set"
scramv1 b --verbose -f %{postbuildtarget} </dev/null
%endif

rm -rf %i/tmp
chmod -R 755 %i %i/.SCRAM
(eval `scramv1 run -sh` ; SealPluginRefresh) || true
rm -fR %i/lib/%cmsplatf/.edmplugincache
(eval `scramv1 run -sh` ; EdmPluginRefresh) || true

%install
cd %i
%{?buildarch:%buildarch}
perl -p -i -e "s|^#!.*perl(.*)|#!/usr/bin/env perl$1|" $(grep -r -e "^#!.*perl.*" . | cut -d: -f1)
# need writeable directory for profile stuff
mkdir -p etc
yes | scramv1 install # FIXME: do by hand?

%post
%initenv
source $RPM_INSTALL_PREFIX/%cmsplatf/lcg/SCRAMV1/V1_0_3-p2/etc/profile.d/init.sh
cd $RPM_INSTALL_PREFIX/%cmsplatf/cms/%n/%v
perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" $(find config -type f) $(find .SCRAM -type f)
%{?buildarch:%buildarch}
yes | scramv1 install
(rm -rf external/%cmsplatf; ./config/linkexternal.pl --arch %cmsplatf --nolink INCLUDE) || true
cd $RPM_INSTALL_PREFIX/%pkgrel
eval `scramv1 run -sh`
for cmd in SealPluginRefresh EdmPluginRefresh IgPluginRefresh ; do
  cmdpath=`which $cmd 2> /dev/null`
  if [ "X$cmdpath" != X ] ; then
    $cmd || true
  fi
done
