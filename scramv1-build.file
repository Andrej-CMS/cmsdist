### FILE scramv1-build

# This is a generic template to build a scram-based project.  Set the
# following parameters and import this to the spec.
#
#  cvsrepo	main project repository
#  cvstag	tag to check out the main project (normally: %{n}_%{v})
#  cvsconfig	cvs module to check out as "config" (normally: config)
#  cvssrc	cvs module to check out as project sources (normally: %n)
#  srctree	name of the cvssrcin export tree (normally: src)
#
#  tbxrepo	scram tool box repository
#  conftag	tag for SCRAMToolBox in the above
#  confsite	name of the directory to link as "config/site" (under SCRAMToolBox)
#  toolfile	tool configuration file (normally: $CMS_TOOL_CONF/tool.conf)
#
#  buildarch	optional command to override build architecture
#  buildtarget  scram build target to generate the full release (normally: release)
#
#  patchsrc	patch to apply to the sources (optional)
#
# FIXME: support building all platforms together like scram does?
# FIXME: produce requirements from "scram tool info"?
# FIXME: automatic sub-packages for "doc" etc?
# FIXME: post-install stuff for modules etc?

Requires: SCRAMV1
Source0: %{tbxrepo}&tag=-r%{conftag}&module=SCRAMToolBox&output=/toolbox.tar.gz
Source1: %{cvsrepo}&tag=-r%{cvstag}&module=%{cvsconfig}&export=config&output=/config.tar.gz
Source2: %{cvsrepo}&tag=-r%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz

# Pick additional sources.  Since install.sh does a grep for "^Source",
# we need to arrange an expansion that always works, regardless of whether
# %additionalSrc* are defined.
%if "%{?additionalSrc0:set}" == "set"
%define source3 %{additionalSrc0}&output=/src1.tar.gz
%else
%define source3 none
%endif 

%if "%{?additionalSrc1:set}" == "set"
%define source4 %{additionalSrc1}&output=/src2.tar.gz
%else
%define source4 none
%endif

Source3: %source3
Source4: %source4


%prep
# Create a SCRAM project area, but using the already extracted
# sources.  In other words, pick up the files from the project config
# area, but munge all instances of <base url="cvs:*"> into a local
# reference so SCRAM won't try to download stuff from the network.

%setup -T -b 0 -n SCRAMToolBox
%setup -D -T -b 1 -n config
%setup -D -T -b 2 -n %{srctree}

%if "%{?additionalSrc0:set}" == "set"
%setup -D -T -a 3 -n %{srctree}
%endif

%if "%{?additionalSrc1:set}" == "set"
%setup -D -T -a 4 -n %{srctree}
%endif

cd ..
%{?patchsrc:%patchsrc}
%{?patchsrc2:%patchsrc2}
%{?patchsrc3:%patchsrc3}

pwd
perl -p -i -e '
  # Keep track whether we are in a toolbox area or not
  if ($. == 1) { $intbx = 1; }
  if (/<base/) { $intbx = /SPITOOLS|SCRAMToolBox/; }

  # Replace base locations
  s!cvs://.*/(SPITOOLS|SCRAMToolBox)\?[^">]+!file:%_builddir/SCRAMToolBox/!;
  s!cvs://.*/%cvsdir\?[^">]+!file:%_builddir/!;
  

  # Replace relative references depending on whether this is in
  # toolbox, or for project itself; configuration is always in
  # toolbox.  In toolbox keep cvs module name but drop the leading
  # SCRAMToolBox if there is one.  In project always replace with
  # rewritten paths.  (FIXME: produce source archive in cvs order?)
  if ($intbx) {
    s!url="cvs:\?module="?([^">]+)"?\s+name="?([^">]+)"?>!url="file:$1" name="$2">!;
    s!url="(cvs:\?module=|file:)SCRAMToolBox/(.*)">!url="file:$2">!;
  } else {
    s!url="cvs:\?module="?([^">]+)"?\s+name="?([^">]+)"?>!url="file:$2" name="$2">!;
  }
 ' config/bootsrc \
   config/requirements \
   SCRAMToolBox/CMS/Configuration/CMSconfiguration
#   SCRAMToolBox/Configuration/Configuration 

# Handle toolbox
pwd 
perl -p -i -e '
    # Replace base locations
    s!cvs://.*/(SPITOOLS|SCRAMToolBox)\?[^">]+!file:%_builddir/SCRAMToolBox/!;
    s!cvs://.*/%cvsdir\?[^">]+!file:%_builddir/!;

    s!url="cvs:\?module="?([^">]+)"?\s+name="?([^">]+)"?>!url="file:$1" name="$2">!;
    s!url="(cvs:\?module=|file:)SCRAMToolBox/(.*)">!url="file:$2">!;
' SCRAMToolBox/CMS/Configuration/CMSconfiguration

# In case we are on some linux system which is not slc3, we substitute
# all the slc3 references to be %%cmsplatf in an attempt to compile anyway.
if [ "%cmsplatf" != "slc3_ia32_gcc323" ] && [ "$(uname)" = "Linux" ]
then
    perl -p -i -e '
      s!slc3_ia32_gcc323!%cmsplatf!;
      s!slc3_ia32_gcc32!%cmsplatf!;
      s!slc3_ia32_gcc3!%cmsplatf!;
      ' config/bootsrc \
      config/BuildFile \
      config/requirements \
      SCRAMToolBox/Configuration/Configuration \
      SCRAMToolBox/CMS/Configuration/CMSconfiguration

    TOOLFILESTOPATCH=$(grep -e "<[aA]rchitecture.*name=\(slc3_ia32_gcc\|sl>\)" SCRAMToolBox/*/* SCRAMToolBox/*/*/* SCRAMToolBox/*/*/*/* | cut -d: -f1)
    echo TOOLS TO PATCH *$TOOLFILESTOPATCH*

    if [ "$TOOLFILESTOPATCH" != "" ]
    then
        perl -p -i -e '
        s!<[aA]rchitecture name=sl>!<architecture name=%{cmsplatf}>!;
        s!<[aA]rchitecture name=slc3_ia32_.*>!<architecture name=%{cmsplatf}>!;
        ' $TOOLFILESTOPATCH
    fi
fi

echo $PERL5LIB
mkdir -p $(dirname %i)

%{?buildarch:%buildarch}
{ while true; do sleep 0.5; echo "."; done |
scramv1 project -d $(dirname %i) \
  -b config/bootsrc \
  -f %toolconf; } || true 

%build
echo `scramv1 arch`
cd %i/%{srctree}

%{?buildarch:%buildarch}

export SCRAM_NOSYMCHECK=true

if [ $(uname) = Darwin ]; then
  # scramv1 doesn't know the rpath variable on darwin...
  scramv1 b echo_null # ensure lib, bin exist
  eval `scramv1 runtime -sh`
  export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
fi

%if "%{?preBuildCommand:set}" == "set"
echo "executing %preBuildCommand"
%preBuildCommand
%endif

scramv1 b -r %{buildtarget} </dev/null
%if "%{?additionalBuildTarget0:set}" == "set"
scramv1 b %{additionalBuildTarget0} < /dev/null
%endif
rm -rf %i/tmp

%install
cd %i
%{?buildarch:%buildarch}
# need writeable directory for profile stuff
mkdir etc
yes | scramv1 install # FIXME: do by hand?

%post
%initenv
source $RPM_INSTALL_PREFIX/%cmsplatf/lcg/SCRAMV1/V1_0_2/etc/profile.d/init.sh
cd $RPM_INSTALL_PREFIX/%cmsplatf/cms/%n/%v
perl -p -i -e 's|%{instroot}|$RPM_INSTALL_PREFIX|g' $(find config) $(find .SCRAM)
%{?buildarch:%buildarch}
yes | scramv1 install

