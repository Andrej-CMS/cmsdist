### FILE scramv1-build

# This is a generic template to build a scram-based project.  Set the
# following parameters and import this to the spec.
#
#  cvsrepo	main project repository
#  cvstag	tag to check out the main project (normally: %{n}_%{v})
#  cvsconfig	cvs module to check out as "config" (normally: config)
#  cvssrc	cvs module to check out as project sources (normally: %n)
#  srctree	name of the cvssrcin export tree (normally: src)
#
#  buildarch	optional command to override build architecture
#  buildtarget  scram build target to generate the full release (normally: release)
#
#  patchsrc	patch to apply to the sources (optional)
#
# FIXME: support building all platforms together like scram does?
# FIXME: produce requirements from "scram tool info"?
# FIXME: automatic sub-packages for "doc" etc?
# FIXME: post-install stuff for modules etc?

Requires: SCRAMV1

%define scram_xml   .xml
%define scramcmd    scramv1

# NR: allow to specify repository and tag 
# (default: cvsrepo and cvstag)
%if "%{?configtag:set}" != "set"
%define configtag	%cvstag
%endif
%if "%{?configrepo:set}" != "set"
%define configrepo	%cvsrepo
%endif

# NR: allow to change tarball names, otherwise old distributions
# are fetched from the apt SOURCE repository. 

%if "%{?configtar:set}" != "set"
%define configtar	config.tar.gz
%endif

# NR: Allow to define bootstrap and requirements file names
%if "%{?bootstrapfile:set}" != "set"
%define bootstrapfile config/bootsrc%scram_xml
%define reqfile config/requirements%scram_xml
%endif

Source0: %{configrepo}&tag=-r%{configtag}&module=%{cvsconfig}&export=config&output=/%configtar
%if  "%{cvsrepo}" != "cmstc"
%define source1 %{cvsrepo}&tag=-r%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%else
%define source1 %{cvsrepo}://?tag=%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%endif

# Pick additional sources.  Since install.sh does a grep for "^Source",
# we need to arrange an expansion that always works, regardless of whether
# %additionalSrc* are defined.
%if "%{?additionalSrc0:set}" == "set"
%define source2 %{additionalSrc0}&output=/src1.tar.gz
%else
%define source2 none
%endif 

%if "%{?additionalSrc1:set}" == "set"
%define source3 %{additionalSrc1}&output=/src2.tar.gz
%else
%define source3 none
%endif

%if "%{?ucprojname:set}" != "set"
%define ucprojname  %(echo %n | sed -e "s|-debug||"| tr 'a-z' 'A-Z')
%endif
%define lcprojname  %(echo %ucprojname | tr 'A-Z' 'a-z')

Source1: %source1
Source2: %source2

# For partial releases re-using CMSSW sources:
%if "%{?cmsswsrc:set}" == "set"
Source0: %{cmsswsrc}/config.tar.gz
Source1: %{cmsswsrc}/src.tar.gz
%endif

Source3: %source3
Source4: %lcprojname-tool
Source5: findDependencies.pl

%prep
rm -rf config
rm -rf %{srctree}
# Create a SCRAM project area, but using the already extracted
# sources.  In other words, pick up the files from the project config
# area, but munge all instances of <base url="cvs:*"> into a local
# reference so SCRAM won't try to download stuff from the network.

%setup -T -b 0 -n config
%setup -D -T -b 1 -n %{srctree}

%if "%{?additionalSrc0:set}" == "set"
%setup -D -T -a 2 -n %{srctree}
%endif

%if "%{?additionalSrc1:set}" == "set"
%setup -D -T -a 3 -n %{srctree}
%endif

touch %_builddir/config/%{ucprojname}_ignore%{scram_xml}.file
for file in `ls %_builddir/config/%{ucprojname}_*%{scram_xml}.file | grep -v  '/%{ucprojname}_ignore%{scram_xml}.file$' | sed 's|.*/%{ucprojname}_||;s|.file$||'`; do
  sed 's|@PROJECT_NAME@|%ucprojname|g;s|@PROJECT_VERSION@|%v|g;s|@PROJECT_BUILD_PATH@|%_builddir|g' %_builddir/config/%{ucprojname}_${file}.file > %_builddir/config/${file}
done
if [ ${%{ucprojname}_TOOL_CONF_ROOT}/configurations/requirements%scram_xml ] ; then 
  cp ${%{ucprojname}_TOOL_CONF_ROOT}/configurations/requirements%scram_xml %_builddir/config/
fi
rm -f %_builddir/config/%{ucprojname}_ignore%{scram_xml}.file
rm -rf %_builddir/config/site
cp -rf ${%{ucprojname}_TOOL_CONF_ROOT}/configurations/SCRAMToolBox/CMSconfigs %_builddir/config/site
echo $SCRAMV1_VERSION > %_builddir/config/scram_version

pwd
cd %_builddir

%{?patchsrc:%patchsrc}
%{?patchsrc2:%patchsrc2}
%{?patchsrc3:%patchsrc3}
%{?patchsrc4:%patchsrc4}
%{?patchsrc5:%patchsrc5}

echo $PERL5LIB
echo rm -rf %i
mkdir -p $(dirname %i)

%{?buildarch:%buildarch}
export SCRAM_TOOLBOXVERSION=%v
export SCRAM_VERSION=$SCRAMV1_VERSION
%scramcmd project -d $(dirname %i) -b %{bootstrapfile} -f %_builddir/config/site/tools-`cat %_builddir/config/site/sitename`.conf
cd %i
%scramcmd setup

%build
pwd
# Remove cmt stuff that brings unwanted dependencies: 
rm -rf `find %{i}/src -type d -name cmt`
echo `%scramcmd arch`
cd %i
cd src

%{?buildarch:%buildarch}

export BUILD_LOG=yes
export SCRAM_NOPLUGINREFRESH=yes
# export SCRAM_NOSYMCHECK=true

if [ $(uname) = Darwin ]; then
  # %scramcmd doesn't know the rpath variable on darwin...
  %scramcmd b echo_null # ensure lib, bin exist
  eval `%scramcmd runtime -sh`
  export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
fi

%if "%{?nolibchecks:set}" == "set"
export SCRAM_NOLOADCHECK=true
export SCRAM_NOSYMCHECK=true
%endif

%if "%{?preBuildCommand:set}" == "set"
echo "executing %preBuildCommand"
%preBuildCommand
%endif

%if "%{?buildtarget:set}" != "set"
%define buildtarget %{nil} 
%endif

%scramcmd b -r echo_CXX </dev/null
%if "%{?prebuildtarget:set}" == "set"
%scramcmd b --verbose -f %{prebuildtarget} </dev/null
%endif
%scramcmd b --verbose -f %{compileOptions} %{makeprocesses}  %{buildtarget} </dev/null
%if "%{?additionalBuildTarget0:set}" == "set"
%scramcmd b --verbose -f %{additionalBuildTarget0} < /dev/null
%endif
%if "%{?postbuildtarget:set}" == "set"
%scramcmd b --verbose -f %{postbuildtarget} </dev/null
%endif

# strip out dependencies first...
%if "%{?saveDeps:set}" == "set" 
mkdir -p %i/etc/dependencies
chmod +x %{_sourcedir}/findDependencies.pl
%{_sourcedir}/findDependencies.pl -rel %i
gzip %i/etc/dependencies/uses.out
gzip %i/etc/dependencies/usedby.out
%endif


rm -rf %i/tmp
chmod -R 755 %i %i/.SCRAM
(eval `%scramcmd run -sh` ; SealPluginRefresh) || true
rm -fR %i/lib/%cmsplatf/.edmplugincache
(eval `%scramcmd run -sh` ; EdmPluginRefresh) || true

%install
cd %i
%{?buildarch:%buildarch}
perl -p -i -e "s|^#!.*perl(.*)|#!/usr/bin/env perl$1|" $(grep -r -e "^#!.*perl.*" . | cut -d: -f1)
# need writeable directory for profile stuff
mkdir -p etc/scram.d
sed 's|@PROJECT_NAME@|%ucprojname|g;s|@PROJECT_VERSION@|%v|g;s|@PROJECT_BUILD_PATH@|%_builddir|g;s|@PROJECT_ROOT@|%i|g' %_sourcedir/%lcprojname-tool > etc/scram.d/%lcprojname
yes | %scramcmd install # FIXME: do by hand?

%post
cd $RPM_INSTALL_PREFIX/%pkgrel
%{relocateConfig}etc/scram.d/%lcprojname
perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" $(find config -type f)
scramver=`cat config/scram_version`
source $RPM_INSTALL_PREFIX/%cmsplatf/lcg/SCRAMV1/$scramver/etc/profile.d/init.sh
(SCRAM_TOOL_HOME=$SCRAMV1_ROOT/src; export SCRAM_TOOL_HOME; ./config/projectAreaRename.pl %{instroot} $RPM_INSTALL_PREFIX  %cmsplatf )
%{?buildarch:%buildarch}
yes | %scramcmd install
(SCRAM_TOOL_HOME=$SCRAMV1_ROOT/src; export SCRAM_TOOL_HOME; rm -rf external/%cmsplatf; ./config/linkexternal.pl --arch %cmsplatf --nolink INCLUDE) || true
eval `%scramcmd run -sh`
for cmd in SealPluginRefresh EdmPluginRefresh IgPluginRefresh ; do
  cmdpath=`which $cmd 2> /dev/null`
  if [ "X$cmdpath" != X ] ; then
    $cmd || true
  fi
done
