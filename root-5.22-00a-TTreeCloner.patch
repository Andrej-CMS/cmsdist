Index: tree/tree/src/TTreeCloner.cxx
===================================================================
--- tree/tree/src/TTreeCloner.cxx	(revision 29361)
+++ tree/tree/src/TTreeCloner.cxx	(revision 29362)
@@ -327,14 +327,14 @@
                curInfo = matchInfo;
             }
          }
-         curInfo->TagFile(toFile);
+         curInfo->ForceWriteInfo(toFile);
       } else {
          // If there is no default constructor the GetStreamerInfo
          // will not work. It also means (hopefully) that an
          // inheriting class has a streamerInfo in the list (which
          // will induces the setting of this streamerInfo)
 
-         oldInfo->TagFile(toFile);
+         oldInfo->ForceWriteInfo(toFile);
       }
    }
    delete l;
Index: io/io/src/TStreamerInfo.cxx
===================================================================
--- io/io/src/TStreamerInfo.cxx	(revision 29361)
+++ io/io/src/TStreamerInfo.cxx	(revision 29362)
@@ -863,7 +863,7 @@
             // All is good.
             newClass->GetStreamerInfos()->AddAtAndExpand(info,oldv);
          } else {
-            // We verify that we are consitent and that
+            // We verify that we are consistent and that
             //   newcl->GetStreamerInfos()->UncheckedAt(info->GetClassVersion)
             // is already the same as info.
             if (strcmp(newClass->GetStreamerInfos()->At(oldv)->GetName(),
@@ -1648,7 +1648,14 @@
    }
    // We do not want to write streamer info to the file
    // for STL containers.
-   if (fClass->GetCollectionProxy()) { // We are an STL collection.
+   if (fClass==0) {
+      // Build or BuildCheck has not been called yet.
+      // Let's use another means of checking.
+      if (fElements && fElements->GetEntries()==1 && strcmp("This",fElements->UncheckedAt(0)->GetName())==0) {
+         // We are an STL collection.
+         return;
+      }
+   } else if (fClass->GetCollectionProxy()) { // We are an STL collection.
       return;
    }
    // Mark ourselves for output, and block
