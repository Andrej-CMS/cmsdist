### FILE scram-build

# This is a generic template to build a scram-based project.  Set the
# following parameters and import this to the spec.
#
#  cvsrepo	main project repository
#  cvstag	tag to check out the main project (normally: %{n}_%{v})
#  cvsconfig	cvs module to check out as "config" (normally: config)
#  cvssrc	cvs module to check out as project sources (normally: %n)
#  srctree	name of the cvssrcin export tree (normally: src)
#
#  tbxrepo	scram tool box repository
#  conftag	tag for SCRAMToolBox in the above
#  confsite	name of the directory to link as "config/site" (under SCRAMToolBox)
#  toolfile	tool configuration file (normally: $CMS_TOOL_CONF/tool.conf)
#
#  buildarch	optional command to override build architecture
#  buildtarget  scram build target to generate the full release (normally: release)
#
#  patchsrc	patch to apply to the sources (optional)
#
# FIXME: support building all platforms together like scram does?
# FIXME: produce requirements from "scram tool info"?
# FIXME: automatic sub-packages for "doc" etc?
# FIXME: post-install stuff for modules etc?

%if "%{?configtree:set}" != "set"
    %define configtree config
%endif

%if "%{?bootstrapfile:set}" != "set"
    %define bootstrapfile %{configtree}/BootStrapFileSRC
%endif

# FIXME: this allows customization of the scram build process. It is necessary in the case of
# genser, since its building not a simple matter of doing "scram b something" in the 
# main directory. I probably would be better to fix genser build process to work in a proper way,
# but that is probably a desperate task.

%if "%{?scrambuildcmd:set}" != "set"
    %define scrambuildcmd scram b %{buildtarget} </dev/null
%endif

Requires: SCRAM
Source0: %{tbxrepo}&tag=-r%{conftag}&module=SCRAMToolBox&output=/toolbox.tar.gz
Source1: %{cvsrepo}&tag=-r%{cvstag}&module=%{cvsconfig}&export=%{configtree}&output=/config.tar.gz

%if "%{?isGenser:set}" != "set"
%define src2 %{cvsrepo}&tag=-r%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%else
%define src2 none
%endif



Source2: %{src2}

# Pick additional sources.  Since install.sh does a grep for "^Source",
# we need to arrange an expansion that always works, regardless of whether
# %additionalSrc* are defined.
%if "%{?additionalSrc0:set}" == "set"
%define source3 %{additionalSrc0}&output=/src1.tar.gz
%else
%define source3 none
%endif 

%if "%{?additionalSrc1:set}" == "set"
%define source4 %{additionalSrc1}&output=/src2.tar.gz
%else
%define source4 none
%endif

%if "%{?additionalSrc2:set}" == "set"
%define source5 %{additionalSrc2}&output=/src3.tar.gz
%else
%define source5 none
%endif

%if "%{?additionalSrc3:set}" == "set"
%define source6 %{additionalSrc3}&output=/src4.tar.gz
%else
%define source6 none
%endif

%if "%{?additionalSrc4:set}" == "set"
%define source7 %{additionalSrc4}&output=/src5.tar.gz
%else
%define source7 none
%endif

%if "%{?additionalSrc5:set}" == "set"
%define source8 %{additionalSrc5}&output=/src6.tar.gz
%else
%define source8 none
%endif

Source3: %source3
Source4: %source4
Source5: %source5
Source6: %source6
Source7: %source7
Source8: %source8

####%define scramVersion %(scram version)

%prep
# Create a SCRAM project area, but using the already extracted
# sources.  In other words, pick up the files from the project config
# area, but munge all instances of <base url="cvs:*"> into a local
# reference so SCRAM won't try to download stuff from the network.

%setup -T -b 0 -n SCRAMToolBox
%setup -D -T -b 1 -n %{configtree}

%if "%{?isGenser:set}" != "set"
%setup -D -T -b 2 -n %{srctree}
%else
mkdir -p %{_builddir}/%{srctree}
%endif


%if "%{?additionalSrc0:set}" == "set"
%setup -D -T -a 3 -n %{srctree}
%endif

%if "%{?additionalSrc1:set}" == "set"
%setup -D -T -a 4 -n %{srctree}
%endif


%if "%{?additionalSrc2:set}" == "set"
%setup -D -T -a 5 -n %{srctree}
%endif


%if "%{?additionalSrc3:set}" == "set"
%setup -D -T -a 6 -n %{srctree}
%endif

%if "%{?additionalSrc4:set}" == "set"
%setup -D -T -a 7 -n %{srctree}
%endif

%if "%{?additionalSrc5:set}" == "set"
%setup -D -T -a 8 -n %{srctree}
%endif



cd ..
# Makes sure that GCC_EXEC_PREFIX is not a Runtime_PATH
perl -p -i -e 's!(.*)GCC_EXEC_PREFIX(.*)Runtime_path(.*)!$1GCC_EXEC_PREFIX$2$3!' SCRAMToolBox/Compilers/CXX/*

%{?patchsrc:%patchsrc}
%{?patchsrc2:%patchsrc2}
%{?patchsrc3:%patchsrc3}
%{?patchsrc4:%patchsrc4}
%{?patchsrc5:%patchsrc5}
%{?patchsrc6:%patchsrc6}

perl -p -i -e '
  # Keep track whether we are in a toolbox area or not
  # If we are at the beginning of the file, then initialise $intbx
  if ($. == 1) { $intbx = 1; }
  # If the line contains <base, than we are in a toolbox fragment 
  # if the URL contains either SCRAMToolBox or SPITOOLS
  if (/<base/) { $intbx = /SPITOOLS|SCRAMToolBox/; }

  # Replace base locations
  s!cvs://.*/(SPITOOLS|SCRAMToolBox)\?[^">]+!file:%_builddir/SCRAMToolBox/!;
  s!cvs://.*/%cvsdir\?[^">]+!file:%_builddir/!;
  %{?additionalSubst:%additionalSubst}
  # Replace relative references depending on whether this is in
  # toolbox, or for project itself; configuration is always in
  # toolbox.  In toolbox keep cvs module name but drop the leading
  # SCRAMToolBox if there is one.  In project always replace with
  # rewritten paths.  (FIXME: produce source archive in cvs order?)
  s!url="cvs:\?module="?([^">]+)"?\s+name="?([^">]+)"?>!url="file:$1" name="$2">!;
  if ($intbx) {
    s!url="(cvs:\?module=|file:)SCRAMToolBox/(.*)">!url="file:$2">!;
  } 
 ' %{bootstrapfile} \
   %{configtree}/RequirementsDoc \
   SCRAMToolBox/Configuration/Configuration \
   SCRAMToolBox/CMS/Configuration/CMSconfiguration

perl -p -i -e '
    s!url="(cvs:\?module=|file:)SCRAMToolBox/(.*)">!url="file:$2">!;
' SCRAMToolBox/Configuration/Configuration \
  SCRAMToolBox/CMS/Configuration/CMSconfiguration

mkdir -p $(dirname %i)
%{?buildarch:%buildarch}
%define realVersion %(echo %v | cut -f1 -d-)
perl -p -i -e 's|%{realVersion}([^-])|%{v}$1|g' %{bootstrapfile}
{ while true; do sleep 0.5; echo "."; done |
scramv0 project -d $(dirname %i) \
  file:%{bootstrapfile} \
  -f %toolconf; } || true

%build
cd %i/src
%{?buildarch:%buildarch}
if [ $(uname) = Darwin ]; then
  # scram doesn't know the rpath variable on darwin...
  scram b echo_null # ensure lib, bin exist
  eval `scram runtime -sh`
  export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
fi

%scrambuildcmd
rm -rf %i/tmp
chmod -R 755 %i %i/.SCRAM

%install
cd %i
# need writeable directory for profile stuff
mkdir etc
%{?patchinstall:%patchinstall}

%post
%initenv
#FIXME: hardcoded until we understand how to get it from SCRAM installation.
source $RPM_INSTALL_PREFIX/%cmsplatf/lcg/SCRAM/V0_20_1/etc/profile.d/init.sh
cd $RPM_INSTALL_PREFIX/%{pkgrel}
perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|" $(grep -r %{instroot} $RPM_INSTALL_PREFIX/%{pkgrel}/{.SCRAM,config} | cut -d: -f1)
%{?buildarch:%buildarch}
yes | scramv0 install

