diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveBoxGL.h root/graf3d/eve/inc/TEveBoxGL.h
--- root-old/graf3d/eve/inc/TEveBoxGL.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveBoxGL.h	2010-12-15 13:33:59.000000000 +0100
@@ -47,6 +47,8 @@
    virtual void Draw(TGLRnrCtx& rnrCtx) const;
    virtual void DirectDraw(TGLRnrCtx& rnrCtx) const;
 
+   virtual Bool_t IgnoreSizeForOfInterest() const { return kTRUE; }
+
    // To support two-level selection
    // virtual Bool_t SupportsSecondarySelect() const { return kTRUE; }
    // virtual void ProcessSelection(TGLRnrCtx & rnrCtx, TGLSelectRecord & rec);
@@ -80,6 +82,8 @@
    virtual void Draw(TGLRnrCtx& rnrCtx) const;
    virtual void DirectDraw(TGLRnrCtx& rnrCtx) const;
 
+   virtual Bool_t IgnoreSizeForOfInterest() const { return kTRUE; }
+
    // To support two-level selection
    // virtual Bool_t SupportsSecondarySelect() const { return kTRUE; }
    // virtual void ProcessSelection(TGLRnrCtx & rnrCtx, TGLSelectRecord & rec);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveBoxSet.h root/graf3d/eve/inc/TEveBoxSet.h
--- root-old/graf3d/eve/inc/TEveBoxSet.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveBoxSet.h	2010-12-15 13:33:59.000000000 +0100
@@ -26,19 +26,16 @@
    TEveBoxSet& operator=(const TEveBoxSet&); // Not implemented
 
 public:
-   enum EBoxType_e
-      {
-         kBT_Undef,           // unknown-ignored
-         kBT_FreeBox,         // arbitrary box: specify 8*(x,y,z) box corners
-         kBT_AABox,           // axis-aligned box: specify (x,y,z) and (w, h, d)
-         kBT_AABoxFixedDim,   // axis-aligned box w/ fixed dimensions: specify (x,y,z)
-         kBT_Cone,
-         kBT_EllipticCone
-      };
+   enum EBoxType_e {
+      kBT_Undef,           // unknown-ignored
+      kBT_FreeBox,         // arbitrary box: specify 8*(x,y,z) box corners
+      kBT_AABox,           // axis-aligned box: specify (x,y,z) and (w, h, d)
+      kBT_AABoxFixedDim,   // axis-aligned box w/ fixed dimensions: specify (x,y,z)
+      kBT_Cone,
+      kBT_EllipticCone
+   };
 
-protected:
-
-   struct BFreeBox_t       : public DigitBase_t { Float_t fVertices[24]; };
+   struct BFreeBox_t       : public DigitBase_t { Float_t fVertices[8][3]; };
 
    struct BOrigin_t        : public DigitBase_t { Float_t fA, fB, fC; };
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveBoxSetGL.h root/graf3d/eve/inc/TEveBoxSetGL.h
--- root-old/graf3d/eve/inc/TEveBoxSetGL.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveBoxSetGL.h	2010-12-15 13:33:59.000000000 +0100
@@ -26,8 +26,9 @@
    mutable UInt_t  fBoxDL;   // Display-list id for a box atom.
 
    Int_t  PrimitiveType() const;
-   void   MakeOriginBox(Float_t p[24], Float_t dx, Float_t dy, Float_t dz) const;
-   void   RenderBox(const Float_t p[24]) const;
+   void   MakeOriginBox(Float_t p[8][3], Float_t dx, Float_t dy, Float_t dz) const;
+   void   RenderBoxStdNorm(const Float_t p[8][3]) const;
+   void   RenderBoxAutoNorm(const Float_t p[8][3]) const;
    void   MakeDisplayList() const;
 
    void   RenderBoxes(TGLRnrCtx& rnrCtx) const;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveBrowser.h root/graf3d/eve/inc/TEveBrowser.h
--- root-old/graf3d/eve/inc/TEveBrowser.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveBrowser.h	2010-12-15 13:33:59.000000000 +0100
@@ -156,6 +156,8 @@
    TGMenuBar*         GetMenuBar()      const { return fMenuBar; }
    TGHorizontalFrame* GetTopMenuFrame() const { return fTopMenuFrame; }
 
+   void HideBottomTab();
+
    ClassDef(TEveBrowser, 0); // Specialization of TRootBrowser for Eve.
 };
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveCaloLegoGL.h root/graf3d/eve/inc/TEveCaloLegoGL.h
--- root-old/graf3d/eve/inc/TEveCaloLegoGL.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveCaloLegoGL.h	2010-12-15 13:33:59.000000000 +0100
@@ -62,7 +62,6 @@
    typedef std::map<Int_t, UInt_t>::iterator SliceDLMap_i;
 
    // histogram base
-   mutable Float_t                   fDataMax;
    mutable Color_t                   fGridColor;
    mutable Color_t                   fFontColor;
 
@@ -95,7 +94,8 @@
    TEveCaloLegoGL(const TEveCaloLegoGL&);            // Stop default
    TEveCaloLegoGL& operator=(const TEveCaloLegoGL&); // Stop default
 
-protected:
+private:
+   void    GetScaleForMatrix(Float_t& sx, Float_t& sy, Float_t& sz) const;
    Int_t   GetGridStep(TGLRnrCtx &rnrCtx) const;
    void    RebinAxis(TAxis *orig, TAxis *curr) const;
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveDigitSet.h root/graf3d/eve/inc/TEveDigitSet.h
--- root-old/graf3d/eve/inc/TEveDigitSet.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveDigitSet.h	2010-12-15 13:33:59.000000000 +0100
@@ -44,7 +44,6 @@
    typedef void (*Callback_foo)(TEveDigitSet*, Int_t, TObject*);
    typedef TString (*TooltipCB_foo)(TEveDigitSet*, Int_t);
 
-protected:
    struct DigitBase_t
    {
       // Base-class for digit representation classes.
@@ -55,6 +54,7 @@
       DigitBase_t(Int_t v=0) : fValue(v), fUserData(0) {}
    };
 
+protected:
    TRefArray        *fDigitIds;       //  Array holding references to external objects.
 
    Int_t             fDefaultValue;   //  Default signal value.
@@ -70,7 +70,7 @@
    TEveFrameBox*     fFrame;          //  Pointer to frame structure.
    TEveRGBAPalette*  fPalette;        //  Pointer to signal-color palette.
    ERenderMode_e     fRenderMode;     //  Render mode: as-is / line / filled.
-   Bool_t            fDisableLigting; //  Disable lighting for rendering.
+   Bool_t            fDisableLighting;//  Disable lighting for rendering.
    Bool_t            fHistoButtons;   //  Show histogram buttons in object editor.
 
    Bool_t            fEmitSignals;    //  Emit signals on secondary-select.
@@ -155,6 +155,9 @@
    ERenderMode_e  GetRenderMode()           const { return fRenderMode; }
    void           SetRenderMode(ERenderMode_e rm) { fRenderMode = rm; }
 
+   Bool_t GetDisableLighting() const   { return fDisableLighting; }
+   void   SetDisableLighting(Bool_t l) { fDisableLighting = l; }
+
    Bool_t GetHistoButtons() const   { return fHistoButtons; }
    void   SetHistoButtons(Bool_t f) { fHistoButtons = f; }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveGeoPolyShape.h root/graf3d/eve/inc/TEveGeoPolyShape.h
--- root-old/graf3d/eve/inc/TEveGeoPolyShape.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveGeoPolyShape.h	2010-12-15 13:33:59.000000000 +0100
@@ -13,10 +13,10 @@
 #define ROOT_TEveGeoPolyShape
 
 #include "TGeoBBox.h"
-#include "TAttBBox.h"
 
 class TBuffer3D;
 class TGLFaceSet;
+class TGeoCompositeShape;
 
 class TEveGeoPolyShape : public TGeoBBox
 {
@@ -33,10 +33,30 @@
 
    virtual void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections, Bool_t localFrame) const;
 
+   struct Edge_t
+   {
+      Int_t fI, fJ;
+      Edge_t(Int_t i, Int_t j)
+      {
+         if (i <= j) { fI = i; fJ = j; }
+         else        { fI = j; fJ = i; }
+      }
+
+      bool operator<(const Edge_t& e) const
+      {
+         if (fI == e.fI)
+            return fJ < e.fJ;
+         else
+            return fI < e.fI;
+      }
+   };
+
 public:
    TEveGeoPolyShape();
    virtual ~TEveGeoPolyShape() {}
 
+   static TEveGeoPolyShape* Construct(TGeoCompositeShape *cshp, Int_t n_seg);
+
    void SetFromFaceSet(TGLFaceSet* fs);
 
    virtual const TBuffer3D& GetBuffer3D(Int_t reqSections, Bool_t localFrame) const;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveGeoShape.h root/graf3d/eve/inc/TEveGeoShape.h
--- root-old/graf3d/eve/inc/TEveGeoShape.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveGeoShape.h	2010-12-15 13:33:59.000000000 +0100
@@ -12,32 +12,31 @@
 #ifndef ROOT_TEveGeoShape
 #define ROOT_TEveGeoShape
 
-#include "TEveElement.h"
-#include "TEveProjectionBases.h"
-#include "TAttBBox.h"
+#include "TEveShape.h"
 
 class TGeoShape;
+class TGeoCompositeShape;
 class TEveGeoShapeExtract;
 class TBuffer3D;
 
-class TEveGeoShape : public TEveElement,
-                     public TNamed,
-                     public TEveProjectable
+class TEveGeoShape : public TEveShape
 {
 private:
    TEveGeoShape(const TEveGeoShape&);            // Not implemented
    TEveGeoShape& operator=(const TEveGeoShape&); // Not implemented
 
 protected:
-   Color_t           fColor;
-   Int_t             fNSegments;
-   TGeoShape*        fShape;
+   Int_t               fNSegments;
+   TGeoShape          *fShape;
+   TGeoCompositeShape *fCompositeShape; //! Temporary holder (if passed shape is composite shape).
 
-   static TGeoManager* fgGeoMangeur;
+   static TGeoManager *fgGeoMangeur;
 
    static TEveGeoShape* SubImportShapeExtract(TEveGeoShapeExtract* gse, TEveElement* parent);
    TEveGeoShapeExtract* DumpShapeTree(TEveGeoShape* geon, TEveGeoShapeExtract* parent=0);
 
+   TGeoShape* MakePolyShape();
+
 public:
    TEveGeoShape(const char* name="TEveGeoShape", const char* title=0);
    virtual ~TEveGeoShape();
@@ -45,12 +44,12 @@
    virtual TObject* GetObject(const TEveException&) const
    { const TObject* obj = this; return const_cast<TObject*>(obj); }
 
-   Color_t     GetColor()      const { return fColor; }
    Int_t       GetNSegments()  const { return fNSegments; }
-   void        SetNSegments(Int_t s) { fNSegments = s; }
-   TGeoShape*  GetShape()            { return fShape; }
+   TGeoShape*  GetShape()      const { return fShape;     }
+   void        SetNSegments(Int_t s);
    void        SetShape(TGeoShape* s);
 
+   virtual void ComputeBBox();
    virtual void Paint(Option_t* option="");
 
    void Save(const char* file, const char* name="Extract");
@@ -65,21 +64,20 @@
 
    static TGeoManager*  GetGeoMangeur();
 
-   ClassDef(TEveGeoShape, 1); // Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).
+   ClassDef(TEveGeoShape, 2); // Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).
 };
 
 //------------------------------------------------------------------------------
 
-class TEveGeoShapeProjected : public TEveElementList,
-                              public TEveProjected,
-                              public TAttBBox
+class TEveGeoShapeProjected : public TEveShape,
+                              public TEveProjected
 {
 private:
    TEveGeoShapeProjected(const TEveGeoShapeProjected&);            // Not implemented
    TEveGeoShapeProjected& operator=(const TEveGeoShapeProjected&); // Not implemented
 
 protected:
-   TBuffer3D*  fBuff;
+   TBuffer3D   *fBuff;
 
    virtual void SetDepthLocal(Float_t d);
 
@@ -87,14 +85,11 @@
    TEveGeoShapeProjected();
    virtual ~TEveGeoShapeProjected() {}
 
-   virtual Bool_t  CanEditMainTransparency() const { return kTRUE; }
-
    virtual void SetProjection(TEveProjectionManager* proj, TEveProjectable* model);
    virtual void UpdateProjection();
    virtual TEveElement* GetProjectedAsElement() { return this; }
 
    virtual void ComputeBBox();
-   virtual void Paint(Option_t* option = ""); 
 
    ClassDef(TEveGeoShapeProjected, 0);
 };
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveGeoShapeExtract.h root/graf3d/eve/inc/TEveGeoShapeExtract.h
--- root-old/graf3d/eve/inc/TEveGeoShapeExtract.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveGeoShapeExtract.h	2010-12-15 13:33:59.000000000 +0100
@@ -25,8 +25,11 @@
 protected:
    Double_t    fTrans[16];   // Transformation matrix, 4x4 column major.
    Float_t     fRGBA[4];     // RGBA color.
+   Float_t     fRGBALine[4]; // RGBA color.
    Bool_t      fRnrSelf;     // Render this object.
    Bool_t      fRnrElements; // Render children of this object.
+   Bool_t      fRnrFrame;    // Also draw shape outline.
+   Bool_t      fMiniFrame;   // Minimize shape outline when drawing.
    TGeoShape*  fShape;       // Shape to be drawn for this object.
    TList*      fElements;    // Children elements.
 
@@ -39,19 +42,25 @@
 
    void SetTrans(const Double_t arr[16]);
    void SetRGBA (const Float_t  arr[4]);
+   void SetRGBALine(const Float_t  arr[4]);
    void SetRnrSelf(Bool_t r)     { fRnrSelf = r;     }
    void SetRnrElements(Bool_t r) { fRnrElements = r; }
+   void SetRnrFrame(Bool_t r)    { fRnrFrame = r; }
+   void SetMiniFrame(Bool_t r)   { fMiniFrame = r; }
    void SetShape(TGeoShape* s)   { fShape = s;       }
    void SetElements(TList* e)    { fElements = e;    }
 
    Double_t*  GetTrans()       { return fTrans; }
    Float_t*   GetRGBA()        { return fRGBA;  }
+   Float_t*   GetRGBALine()    { return fRGBALine; }
    Bool_t     GetRnrSelf()     { return fRnrSelf;     }
    Bool_t     GetRnrElements() { return fRnrElements; }
+   Bool_t     GetRnrFrame()    { return fRnrFrame; }
+   Bool_t     GetMiniFrame()   { return fMiniFrame; }
    TGeoShape* GetShape()       { return fShape;    }
    TList*     GetElements()    { return fElements; }
 
-   ClassDef(TEveGeoShapeExtract, 1); // Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.
+   ClassDef(TEveGeoShapeExtract, 2); // Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.
 };
 
 #endif
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEvePolygonSetProjected.h root/graf3d/eve/inc/TEvePolygonSetProjected.h
--- root-old/graf3d/eve/inc/TEvePolygonSetProjected.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEvePolygonSetProjected.h	2010-12-15 13:33:59.000000000 +0100
@@ -14,7 +14,6 @@
 
 #include "TEveVector.h"
 #include "TEveShape.h"
-#include "TEveProjectionBases.h"
 
 class TBuffer3D;
 
@@ -41,7 +40,12 @@
       { fNPnts = x.fNPnts; fPnts = x.fPnts; return *this; }
 
       Int_t FindPoint(Int_t pi)
-      { for (Int_t i=0; i<fNPnts; ++i) if (fPnts[i] == pi) return i; return -1; }
+      {
+         for (Int_t i=0; i<fNPnts; ++i) {
+            if (fPnts[i] == pi) return i;
+         }
+         return -1;
+      }
    };
 
    typedef std::list<Polygon_t>                    vpPolygon_t;
@@ -68,6 +72,8 @@
 
    virtual void SetDepthLocal(Float_t d);
 
+   Float_t PolygonSurfaceXY(const Polygon_t& poly) const;
+
 public:
    TEvePolygonSetProjected(const char* n="TEvePolygonSetProjected", const char* t="");
    virtual ~TEvePolygonSetProjected();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEvePolygonSetProjectedGL.h root/graf3d/eve/inc/TEvePolygonSetProjectedGL.h
--- root-old/graf3d/eve/inc/TEvePolygonSetProjectedGL.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEvePolygonSetProjectedGL.h	2010-12-15 13:33:59.000000000 +0100
@@ -14,8 +14,31 @@
 
 #include "TGLObject.h"
 
+class TEvePolygonSetProjected;
+
 class TEvePolygonSetProjectedGL : public TGLObject
 {
+protected:
+   struct Edge_t
+   {
+      Int_t fI, fJ;
+      Edge_t(Int_t i, Int_t j)
+      {
+         if (i <= j) { fI = i; fJ = j; }
+         else        { fI = j; fJ = i; }
+      }
+
+      bool operator<(const Edge_t& e) const
+      {
+         if (fI == e.fI)
+            return fJ < e.fJ;
+         else
+            return fI < e.fI;
+      }
+   };
+
+   TEvePolygonSetProjected *fM;
+
 public:
    TEvePolygonSetProjectedGL();
    virtual  ~TEvePolygonSetProjectedGL() {}
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveQuadSet.h root/graf3d/eve/inc/TEveQuadSet.h
--- root-old/graf3d/eve/inc/TEveQuadSet.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveQuadSet.h	2010-12-15 13:33:59.000000000 +0100
@@ -24,36 +24,33 @@
    TEveQuadSet& operator=(const TEveQuadSet&); // Not implemented
 
 public:
-   enum EQuadType_e
-      {
-         kQT_Undef,                // unknown-ignored
-         kQT_FreeQuad,             // arbitrary quad: specify 4*(x,y,z) quad corners
-         kQT_RectangleXY,          // rectangle in x-y plane: specify x, y, z, w, h
-         kQT_RectangleXZ,          // rectangle in x-z plane: specify x, y, z, w, h
-         kQT_RectangleYZ,          // rectangle in y-z plane: specify x, y, z, w, h
-         kQT_RectangleXYFixedDim,  // rectangle in x-y plane: specify x, y, z; w, h taken from fDefWidth/Height
-         kQT_RectangleXYFixedZ,    // rectangle in x-y plane: specify x, y, w, h; z taken from fDefCoord
-         kQT_RectangleXZFixedY,    // rectangle in x-z plane: specify x, z, w, h; y taken from fDefCoord
-         kQT_RectangleYZFixedX,    // rectangle in y-z plane: specify y, z, w, h; x taken from fDefWidth/Height/Coord
-         kQT_RectangleXYFixedDimZ, // rectangle in x-y plane: specify x, y; w, h, z taken from fDefWidth/Height/Coord
-         kQT_RectangleXZFixedDimY, // rectangle in x-z plane: specify x, z; w, h, y taken from fDefWidth/Height/Coord
-         kQT_RectangleYZFixedDimX, // rectangle in y-z plane: specify y, z; w, h, x taken from fDefWidth/Height/Coord
-         kQT_Rectangle_End,
-         // line modes (needed for uniform handling of silicon-strip digits)
-         kQT_LineXYFixedZ,         // line in x-y plane: specify x, y, w(dx), h(dy); z taken from fDefCoord
-         kQT_LineXZFixedY,         // line in x-z plane: specify x, z, w(dx), h(dz); y taken from fDefCoord
-         kQT_Line_End,
-         // hexagon modes
-         kQT_HexagonXY,            // horizontal hexagon: specify x, y, z, r
-         kQT_HexagonYX,            // vertical   hexagon: specify x, y, z, r
-         kQT_Hexagon_End
-         // circle modes:
-         // QT_CircleXY,          // specify r, z
-         // QT_CircleXYFixedZ,    // specify r
-         // QT_CircleXYFixedR,    // specify z
-      };
-
-protected:
+   enum EQuadType_e {
+      kQT_Undef,                // unknown-ignored
+      kQT_FreeQuad,             // arbitrary quad: specify 4*(x,y,z) quad corners
+      kQT_RectangleXY,          // rectangle in x-y plane: specify x, y, z, w, h
+      kQT_RectangleXZ,          // rectangle in x-z plane: specify x, y, z, w, h
+      kQT_RectangleYZ,          // rectangle in y-z plane: specify x, y, z, w, h
+      kQT_RectangleXYFixedDim,  // rectangle in x-y plane: specify x, y, z; w, h taken from fDefWidth/Height
+      kQT_RectangleXYFixedZ,    // rectangle in x-y plane: specify x, y, w, h; z taken from fDefCoord
+      kQT_RectangleXZFixedY,    // rectangle in x-z plane: specify x, z, w, h; y taken from fDefCoord
+      kQT_RectangleYZFixedX,    // rectangle in y-z plane: specify y, z, w, h; x taken from fDefWidth/Height/Coord
+      kQT_RectangleXYFixedDimZ, // rectangle in x-y plane: specify x, y; w, h, z taken from fDefWidth/Height/Coord
+      kQT_RectangleXZFixedDimY, // rectangle in x-z plane: specify x, z; w, h, y taken from fDefWidth/Height/Coord
+      kQT_RectangleYZFixedDimX, // rectangle in y-z plane: specify y, z; w, h, x taken from fDefWidth/Height/Coord
+      kQT_Rectangle_End,
+      // line modes (needed for uniform handling of silicon-strip digits)
+      kQT_LineXYFixedZ,         // line in x-y plane: specify x, y, w(dx), h(dy); z taken from fDefCoord
+      kQT_LineXZFixedY,         // line in x-z plane: specify x, z, w(dx), h(dz); y taken from fDefCoord
+      kQT_Line_End,
+      // hexagon modes
+      kQT_HexagonXY,            // horizontal hexagon: specify x, y, z, r
+      kQT_HexagonYX,            // vertical   hexagon: specify x, y, z, r
+      kQT_Hexagon_End
+      // circle modes:
+      // QT_CircleXY,          // specify r, z
+      // QT_CircleXYFixedZ,    // specify r
+      // QT_CircleXYFixedR,    // specify z
+   };
 
    struct QFreeQuad_t     : public DigitBase_t     { Float_t fVertices[12]; };
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveShape.h root/graf3d/eve/inc/TEveShape.h
--- root-old/graf3d/eve/inc/TEveShape.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveShape.h	2010-12-15 13:33:59.000000000 +0100
@@ -40,6 +40,7 @@
 
    Bool_t       fDrawFrame;      // draw frame
    Bool_t       fHighlightFrame; // highlight frame / all shape
+   Bool_t       fMiniFrame;      // draw minimal frame
 
 public:
    TEveShape(const char* n="TEveShape", const char* t="");
@@ -53,12 +54,14 @@
    virtual Float_t GetLineWidth() const { return fLineWidth;}
    virtual Bool_t  GetDrawFrame()      const { return fDrawFrame; }
    virtual Bool_t  GetHighlightFrame() const { return fHighlightFrame; }
+   virtual Bool_t  GetMiniFrame()      const { return fMiniFrame; }
 
    virtual void    SetFillColor(Color_t c)  { fFillColor = c; }
    virtual void    SetLineColor(Color_t c)  { fLineColor = c; }
    virtual void    SetLineWidth(Float_t lw) { fLineWidth = lw;}
    virtual void    SetDrawFrame(Bool_t f)      { fDrawFrame = f; }
    virtual void    SetHighlightFrame(Bool_t f) { fHighlightFrame = f; }
+   virtual void    SetMiniFrame(Bool_t r)      { fMiniFrame = r; }
 
    // ----------------------------------------------------------------
 
@@ -78,7 +81,13 @@
 
    // ----------------------------------------------------------------
 
-   static Int_t FindConvexHull(const vVector2_t& pin, vVector2_t& pout, TEveElement* caller=0);
+   static Int_t  FindConvexHull(const vVector2_t& pin, vVector2_t& pout, TEveElement* caller=0);
+
+   static Bool_t IsBoxOrientationConsistentEv(const TEveVector box[8]);
+   static Bool_t IsBoxOrientationConsistentFv(const Float_t    box[8][3]);
+
+   static void   CheckAndFixBoxOrientationEv(TEveVector box[8]);
+   static void   CheckAndFixBoxOrientationFv(Float_t    box[8][3]);
 
    ClassDef(TEveShape, 0); // Abstract base-class for 2D/3D shapes.
 };
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveStraightLineSet.h root/graf3d/eve/inc/TEveStraightLineSet.h
--- root-old/graf3d/eve/inc/TEveStraightLineSet.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveStraightLineSet.h	2010-12-15 13:33:59.000000000 +0100
@@ -97,6 +97,9 @@
    Marker_t* AddMarker(const TEveVector& p, Int_t line_id=-1);
    Marker_t* AddMarker(Int_t line_id, Float_t pos);
 
+   void      SetLine(int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);
+   void      SetLine(int idx, const TEveVector& p1, const TEveVector& p2);
+
    TEveChunkManager& GetLinePlex()   { return fLinePlex;   }
    TEveChunkManager& GetMarkerPlex() { return fMarkerPlex; }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveViewer.h root/graf3d/eve/inc/TEveViewer.h
--- root-old/graf3d/eve/inc/TEveViewer.h	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/inc/TEveViewer.h	2010-12-15 13:33:59.000000000 +0100
@@ -132,4 +132,7 @@
    ClassDef(TEveViewerList, 0); // List of Viewers providing common operations on TEveViewer collections.
 };
 
+// AMT: temporary workaround till root pactches are integrated in CMSSW
+#define TEVEVIEW_TQSENDER_SIGNALS_FIX
+
 #endif
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveBox.cxx root/graf3d/eve/src/TEveBox.cxx
--- root-old/graf3d/eve/src/TEveBox.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveBox.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -51,6 +51,7 @@
    fVertices[i][0] = x;
    fVertices[i][1] = y;
    fVertices[i][2] = z;
+   ResetBBox();
 }
 
 //______________________________________________________________________________
@@ -61,6 +62,7 @@
    fVertices[i][0] = v[0];
    fVertices[i][1] = v[1];
    fVertices[i][2] = v[2];
+   ResetBBox();
 }
 
 //______________________________________________________________________________
@@ -69,6 +71,7 @@
    // Set vertices.
 
    memcpy(fVertices, vs, sizeof(fVertices));
+   ResetBBox();
 }
 
 //==============================================================================
@@ -78,6 +81,8 @@
 {
    // Compute bounding-box of the data.
 
+   TEveShape::CheckAndFixBoxOrientationFv(fVertices);
+
    BBoxInit();
    for (Int_t i=0; i<8; ++i)
    {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveBoxGL.cxx root/graf3d/eve/src/TEveBoxGL.cxx
--- root-old/graf3d/eve/src/TEveBoxGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveBoxGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -100,7 +100,7 @@
 //______________________________________________________________________________
 void TEveBoxGL::RenderBoxStdNorm(const Float_t p[8][3]) const
 {
-   // Render box with "standard" normals.
+   // Render box with standard axis-aligned normals.
 
    glBegin(GL_QUADS);
 
@@ -142,7 +142,7 @@
    subtract_and_normalize(p[3], p[0], e[1]);
    subtract_and_normalize(p[4], p[0], e[2]);
    subtract_and_normalize(p[5], p[6], e[3]);
-   subtract_and_normalize(p[4], p[6], e[4]);
+   subtract_and_normalize(p[7], p[6], e[4]);
    subtract_and_normalize(p[2], p[6], e[5]);
 
    glBegin(GL_QUADS);
@@ -156,7 +156,7 @@
    glVertex3fv(p[7]); glVertex3fv(p[6]);
    glVertex3fv(p[5]); glVertex3fv(p[4]);
    // back:  0451
-   glNormal3fv(TMath::Cross(e[2], e[1], n));
+   glNormal3fv(TMath::Cross(e[2], e[0], n));
    glVertex3fv(p[0]); glVertex3fv(p[4]);
    glVertex3fv(p[5]); glVertex3fv(p[1]);
    // front:   3267
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveBoxSet.cxx root/graf3d/eve/src/TEveBoxSet.cxx
--- root-old/graf3d/eve/src/TEveBoxSet.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveBoxSet.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -10,11 +10,9 @@
  *************************************************************************/
 
 #include "TEveBoxSet.h"
+#include "TEveShape.h"
+
 #include "TRandom.h"
-#include "TBuffer3D.h"
-#include "TBuffer3DTypes.h"
-#include "TVirtualPad.h"
-#include "TVirtualViewer3D.h"
 
 //==============================================================================
 // TEveBoxSet
@@ -60,7 +58,7 @@
    // Constructor.
 
    // Override from TEveDigitSet.
-   fDisableLigting = kFALSE;
+   fDisableLighting = kFALSE;
 }
 
 /******************************************************************************/
@@ -126,6 +124,7 @@
 
    BFreeBox_t* b = (BFreeBox_t*) NewDigit();
    memcpy(b->fVertices, verts, sizeof(b->fVertices));
+   TEveShape::CheckAndFixBoxOrientationFv(b->fVertices);
 }
 
 //______________________________________________________________________________
@@ -233,9 +232,8 @@
       {
          while (bi.next()) {
             BFreeBox_t& b = * (BFreeBox_t*) bi();
-            Float_t * p = b.fVertices;
-            for(int i=0; i<8; ++i, p+=3)
-               BBoxCheckPoint(p);
+            for (Int_t i = 0; i < 8; ++i)
+               BBoxCheckPoint(b.fVertices[i]);
          }
          break;
       }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveBoxSetGL.cxx root/graf3d/eve/src/TEveBoxSetGL.cxx
--- root-old/graf3d/eve/src/TEveBoxSetGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveBoxSetGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -61,51 +61,110 @@
 }
 
 //______________________________________________________________________________
-void TEveBoxSetGL::MakeOriginBox(Float_t p[24], Float_t dx, Float_t dy, Float_t dz) const
+void TEveBoxSetGL::MakeOriginBox(Float_t p[8][3], Float_t dx, Float_t dy, Float_t dz) const
 {
    // Fill array p to represent a box (0,0,0) - (dx,dy,dz).
 
    // bottom
-   p[0] = 0;  p[1] = dy; p[2] = 0;  p += 3;
-   p[0] = dx; p[1] = dy; p[2] = 0;  p += 3;
-   p[0] = dx; p[1] = 0;  p[2] = 0;  p += 3;
-   p[0] = 0;  p[1] = 0;  p[2] = 0;  p += 3;
+   p[0][0] = 0;  p[0][1] = dy; p[0][2] = 0;
+   p[1][0] = dx; p[1][1] = dy; p[1][2] = 0;
+   p[2][0] = dx; p[2][1] = 0;  p[2][2] = 0;
+   p[3][0] = 0;  p[3][1] = 0;  p[3][2] = 0;
    // top
-   p[0] = 0;  p[1] = dy; p[2] = dz; p += 3;
-   p[0] = dx; p[1] = dy; p[2] = dz; p += 3;
-   p[0] = dx; p[1] = 0;  p[2] = dz; p += 3;
-   p[0] = 0;  p[1] = 0;  p[2] = dz;
+   p[4][0] = 0;  p[4][1] = dy; p[4][2] = dz;
+   p[5][0] = dx; p[5][1] = dy; p[5][2] = dz;
+   p[6][0] = dx; p[6][1] = 0;  p[6][2] = dz;
+   p[7][0] = 0;  p[7][1] = 0;  p[7][2] = dz;
 }
 
 //______________________________________________________________________________
-inline void TEveBoxSetGL::RenderBox(const Float_t p[24]) const
+inline void TEveBoxSetGL::RenderBoxStdNorm(const Float_t p[8][3]) const
 {
-   // Render a box specified by points in array p.
+   // Render a box specified by points in array p with standard
+   // axis-aligned normals.
 
    // bottom: 0123
    glNormal3f(0, 0, -1);
-   glVertex3fv(p);      glVertex3fv(p + 3);
-   glVertex3fv(p + 6);  glVertex3fv(p + 9);
+   glVertex3fv(p[0]);  glVertex3fv(p[1]);
+   glVertex3fv(p[2]);  glVertex3fv(p[3]);
    // top:    7654
    glNormal3f(0, 0, 1);
-   glVertex3fv(p + 21); glVertex3fv(p + 18);
-   glVertex3fv(p + 15); glVertex3fv(p + 12);
+   glVertex3fv(p[7]); glVertex3fv(p[6]);
+   glVertex3fv(p[5]); glVertex3fv(p[4]);
    // back:  0451
    glNormal3f(0, 1, 0);
-   glVertex3fv(p);      glVertex3fv(p + 12);
-   glVertex3fv(p + 15); glVertex3fv(p + 3);
+   glVertex3fv(p[0]); glVertex3fv(p[4]);
+   glVertex3fv(p[5]); glVertex3fv(p[1]);
    // front:   3267
    glNormal3f(0, -1, 0);
-   glVertex3fv(p + 9);   glVertex3fv(p + 6);
-   glVertex3fv(p + 18);  glVertex3fv(p + 21);
+   glVertex3fv(p[3]);  glVertex3fv(p[2]);
+   glVertex3fv(p[6]);  glVertex3fv(p[7]);
    // left:    0374
    glNormal3f(-1, 0, 0);
-   glVertex3fv(p);       glVertex3fv(p + 9);
-   glVertex3fv(p + 21);  glVertex3fv(p + 12);
+   glVertex3fv(p[0]);  glVertex3fv(p[3]);
+   glVertex3fv(p[7]);  glVertex3fv(p[4]);
    // right:   1562
    glNormal3f(1, 0, 0);
-   glVertex3fv(p + 3);   glVertex3fv(p + 15);
-   glVertex3fv(p + 18);  glVertex3fv(p + 6);
+   glVertex3fv(p[1]);  glVertex3fv(p[5]);
+   glVertex3fv(p[6]);  glVertex3fv(p[2]);
+}
+
+namespace
+{
+   void subtract_and_normalize(const Float_t a[3], const Float_t b[3],
+                               Float_t o[3])
+   {
+      // Calculate a - b and normalize the result.
+      o[0] = a[0] - b[0];
+      o[1] = a[1] - b[1];
+      o[2] = a[2] - b[2];
+      Float_t d = sqrtf(o[0]*o[0] + o[1]*o[1] + o[2]*o[2]);
+      if (d != 0)
+      {
+         d = 1.0f / d;
+         o[0] *= d;
+         o[1] *= d;
+         o[2] *= d;
+      }
+   }
+}
+//______________________________________________________________________________
+void TEveBoxSetGL::RenderBoxAutoNorm(const Float_t p[8][3]) const
+{
+   // Render box, calculate normals on the fly from first three points.
+
+   Float_t e[6][3], n[3];
+   subtract_and_normalize(p[1], p[0], e[0]);
+   subtract_and_normalize(p[3], p[0], e[1]);
+   subtract_and_normalize(p[4], p[0], e[2]);
+   subtract_and_normalize(p[5], p[6], e[3]);
+   subtract_and_normalize(p[7], p[6], e[4]);
+   subtract_and_normalize(p[2], p[6], e[5]);
+
+   // bottom: 0123
+   glNormal3fv(TMath::Cross(e[0], e[1], n));
+   glVertex3fv(p[0]); glVertex3fv(p[1]);
+   glVertex3fv(p[2]); glVertex3fv(p[3]);
+   // top:    7654
+   glNormal3fv(TMath::Cross(e[3], e[4], n));
+   glVertex3fv(p[7]); glVertex3fv(p[6]);
+   glVertex3fv(p[5]); glVertex3fv(p[4]);
+   // back:  0451
+   glNormal3fv(TMath::Cross(e[2], e[0], n));
+   glVertex3fv(p[0]); glVertex3fv(p[4]);
+   glVertex3fv(p[5]); glVertex3fv(p[1]);
+   // front:   3267
+   glNormal3fv(TMath::Cross(e[4], e[5], n));
+   glVertex3fv(p[3]); glVertex3fv(p[2]);
+   glVertex3fv(p[6]); glVertex3fv(p[7]);
+   // left:    0374
+   glNormal3fv(TMath::Cross(e[1], e[2], n));
+   glVertex3fv(p[0]); glVertex3fv(p[3]);
+   glVertex3fv(p[7]); glVertex3fv(p[4]);
+   // right:   1562
+   glNormal3fv(TMath::Cross(e[5], e[3], n));
+   glVertex3fv(p[1]); glVertex3fv(p[5]);
+   glVertex3fv(p[6]); glVertex3fv(p[2]);
 }
 
 //______________________________________________________________________________
@@ -129,12 +188,12 @@
       if (fM->fBoxType < TEveBoxSet::kBT_Cone)
       {
          glBegin(PrimitiveType());
-         Float_t p[24];
+         Float_t p[8][3];
          if (fM->fBoxType == TEveBoxSet::kBT_AABox)
             MakeOriginBox(p, 1.0f, 1.0f, 1.0f);
          else
             MakeOriginBox(p, fM->fDefWidth, fM->fDefHeight, fM->fDefDepth);
-         RenderBox(p);
+         RenderBoxStdNorm(p);
          glEnd();
       }
       else
@@ -253,12 +312,12 @@
             {
                if (rnrCtx.SecSelection()) glLoadName(bi.index());
                glBegin(primitiveType);
-               RenderBox(b.fVertices);
+               RenderBoxAutoNorm(b.fVertices);
                glEnd();
                if (fM->fAntiFlick)
-                  AntiFlick(0.5f*(b.fVertices[0] + b.fVertices[18]),
-                            0.5f*(b.fVertices[1] + b.fVertices[19]),
-                            0.5f*(b.fVertices[2] + b.fVertices[20]));
+                  AntiFlick(0.5f*(b.fVertices[0][0] + b.fVertices[6][0]),
+                            0.5f*(b.fVertices[0][1] + b.fVertices[6][1]),
+                            0.5f*(b.fVertices[0][2] + b.fVertices[6][2]));
             }
             if (boxSkip) { Int_t s = boxSkip; while (s--) bi.next(); }
          }
@@ -395,10 +454,13 @@
 
       glPushAttrib(GL_ENABLE_BIT | GL_POLYGON_BIT);
 
-      if (mB.fRenderMode == TEveDigitSet::kRM_Fill)
-         glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
-      else if (mB.fRenderMode == TEveDigitSet::kRM_Line)
-         glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+      if ( ! rnrCtx.IsDrawPassOutlineLine())
+      {
+         if (mB.fRenderMode == TEveDigitSet::kRM_Fill)
+            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+         else if (mB.fRenderMode == TEveDigitSet::kRM_Line)
+            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+      }
 
       if (mB.fBoxType == TEveBoxSet::kBT_Cone ||
           mB.fBoxType == TEveBoxSet::kBT_EllipticCone)
@@ -406,7 +468,7 @@
          glDisable(GL_CULL_FACE);
       }
 
-      if (mB.fDisableLigting) glDisable(GL_LIGHTING);
+      if (mB.fDisableLighting) glDisable(GL_LIGHTING);
 
       RenderBoxes(rnrCtx);
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveBrowser.cxx root/graf3d/eve/src/TEveBrowser.cxx
--- root-old/graf3d/eve/src/TEveBrowser.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveBrowser.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -788,3 +788,9 @@
 
    delete this;    // will in turn delete this object
 }
+
+void TEveBrowser::HideBottomTab()
+{
+   fV2->HideFrame(fHSplitter);
+   fV2->HideFrame(fH2);
+}
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCalo.cxx root/graf3d/eve/src/TEveCalo.cxx
--- root-old/graf3d/eve/src/TEveCalo.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveCalo.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -161,10 +161,7 @@
 
    // Get maximum plotted value.
 
-   if (fScaleAbs)
-      return fMaxValAbs;
-   else
-      return fData->GetMaxVal(fPlotEt);
+   return fData->GetMaxVal(fPlotEt);
 
 }
 
@@ -629,12 +626,15 @@
 }
 
 //______________________________________________________________________________
-void TEveCalo2D::CellSelectionChangedInternal(TEveCaloData::vCellId_t& cells, std::vector<TEveCaloData::vCellId_t*>& cellLists)
+void TEveCalo2D::CellSelectionChangedInternal(TEveCaloData::vCellId_t& inputCells, std::vector<TEveCaloData::vCellId_t*>& outputCellLists)
 {
    // Sort slected cells in eta or phi bins.
 
+   Bool_t isRPhi = (fManager->GetProjection()->GetType() == TEveProjection::kPT_RPhi);
+   const TAxis* axis = isRPhi ? fData->GetPhiBins() :  fData->GetEtaBins();
+
    // clear old cache
-   for (vBinCells_i it = cellLists.begin(); it != cellLists.end(); it++)
+   for (vBinCells_i it = outputCellLists.begin(); it != outputCellLists.end(); it++)
    {
       if (*it)
       {
@@ -642,35 +642,29 @@
          delete *it;
       }
    }
-   cellLists.clear();
-
-   TEveCaloData::CellData_t  cellData;
-   if (cells.size())
-   {
-      Bool_t rPhi  = fManager->GetProjection()->GetType() == TEveProjection::kPT_RPhi;
-      UInt_t nBins = rPhi ? fData->GetPhiBins()->GetNbins() : fData->GetEtaBins()->GetNbins();
-
-      cellLists.resize(nBins+1);
-      for (UInt_t b = 0; b <= nBins; ++b)
-         cellLists[b] = 0;
-
-      Int_t bin;
-      for (TEveCaloData::vCellId_i i=cells.begin(); i!=cells.end(); i++)
-      {
-         fData->GetCellData(*i, cellData);
-         if (CellInEtaPhiRng(cellData))
+   outputCellLists.clear();
+   UInt_t nBins = axis->GetNbins();
+   outputCellLists.resize(nBins+1);
+   for (UInt_t b = 0; b <= nBins; ++b)
+      outputCellLists[b] = 0;
+
+   for(UInt_t bin = 1; bin <= nBins; ++bin)
+   {
+      TEveCaloData::vCellId_t* idsInBin = fCellLists[bin];
+      if (!idsInBin)
+         continue;
+
+      for (TEveCaloData::vCellId_i i = idsInBin->begin(); i != idsInBin->end(); i++)
+      { 
+         for (TEveCaloData::vCellId_i j = inputCells.begin(); j != inputCells.end(); j++)
          {
-            if (rPhi)
+            if( (*i).fTower == (*j).fTower && (*i).fSlice == (*j).fSlice)
             {
-               bin = fData->GetPhiBins()->FindBin(cellData.Phi());
-            }
-            else {
-               bin = fData->GetEtaBins()->FindBin(cellData.Eta());
-            }
-            if (cellLists[bin] == 0)
-               cellLists[bin] = new TEveCaloData::vCellId_t();
+               if (!outputCellLists[bin])
+                  outputCellLists[bin] = new TEveCaloData::vCellId_t();
 
-            cellLists[bin]->push_back(*i);
+               outputCellLists[bin]->push_back(TEveCaloData::CellId_t((*i).fTower, (*i).fSlice, (*i).fFraction));
+            }
          }
       }
    }
@@ -699,13 +693,13 @@
    }
    else
    {
-     if (fData->Empty())
-       return 1;
+      if (fData->Empty())
+         return 1;
 
-     if (fPlotEt)
-      return fMaxTowerH/fMaxEtSumBin;
-     else
-      return fMaxTowerH/fMaxESumBin;
+      if (fPlotEt)
+         return fMaxTowerH/fMaxEtSumBin;
+      else
+         return fMaxTowerH/fMaxESumBin;
    }
 }
 
@@ -819,7 +813,7 @@
 
    BBoxZero();
 
-   Float_t ex = 1.2*fMaxTowerH;
+   Float_t ex = 1.2; // 20% offset for axis labels
 
    Float_t a = 0.5*ex;
 
@@ -845,8 +839,8 @@
    }
 
    fBBox[4] =  0;
-   if (fScaleAbs)
-      fBBox[5] = fMaxTowerH;
+   if (fScaleAbs && !fData->Empty())
+      fBBox[5] = GetMaxVal()*GetValToHeight();
    else
-      fBBox[5] = 1;
+      fBBox[5] = fMaxTowerH;
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCalo2DGL.cxx root/graf3d/eve/src/TEveCalo2DGL.cxx
--- root-old/graf3d/eve/src/TEveCalo2DGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveCalo2DGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -111,7 +111,7 @@
    Float_t towerH;
 
    UInt_t nPhi = data->GetPhiBins()->GetNbins();
-
+   TAxis* axis = data->GetPhiBins();
    for(UInt_t phiBin = 1; phiBin <= nPhi; ++phiBin)
    {
       if (cellLists[phiBin] )
@@ -126,7 +126,7 @@
          for (TEveCaloData::vCellId_i it = cids->begin(); it != cids->end(); it++)
          {
             data->GetCellData(*it, cellData);
-            sliceVal[(*it).fSlice] += cellData.Value(fM->fPlotEt);
+            sliceVal[(*it).fSlice] += cellData.Value(fM->fPlotEt)*(*it).fFraction;
          }
 
          if (rnrCtx.SecSelection()) {
@@ -137,7 +137,7 @@
          {
             if (rnrCtx.SecSelection())  glLoadName(s); // set name-stack slice
             fM->SetupColorHeight(sliceVal[s], s, towerH);
-            MakeRPhiCell(cellData.PhiMin(), cellData.PhiMax(), towerH, off);
+            MakeRPhiCell(axis->GetBinLowEdge(phiBin), axis->GetBinUpEdge(phiBin), towerH, off);
             off += towerH;
          }
          if (rnrCtx.SecSelection()) glPopName(); // slice
@@ -162,6 +162,7 @@
    Float_t *sliceValRef = new Float_t[nSlices];
    Float_t  towerH, towerHRef;
 
+   TAxis* axis = data->GetPhiBins();
    for(UInt_t phiBin = 1; phiBin <= nPhiBins; ++phiBin)
    {
       if (cellLists[phiBin])
@@ -175,14 +176,14 @@
          TEveCaloData::vCellId_t& cids = *(cellLists[phiBin]);
          for (TEveCaloData::vCellId_i i=cids.begin(); i!=cids.end(); i++) {
             data->GetCellData((*i), cellData);
-            sliceVal[i->fSlice] += cellData.Value(fM->fPlotEt);
+            sliceVal[i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
          }
          // referenced eta sum
          for (Int_t s=0; s<nSlices; ++s) sliceValRef[s] = 0;
          TEveCaloData::vCellId_t& cidsRef = *(fM->fCellLists[phiBin]);
          for (TEveCaloData::vCellId_i i=cidsRef.begin(); i!=cidsRef.end(); i++) {
             data->GetCellData(*i, cellData);
-            sliceValRef[i->fSlice] += cellData.Value(fM->fPlotEt);
+            sliceValRef[i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
          }
          // draw
          for (Int_t s = 0; s < nSlices; ++s)  {
@@ -190,7 +191,7 @@
             if (sliceVal[s] > 0)
             {
                fM->SetupColorHeight(sliceVal[s], s, towerH);
-               MakeRPhiCell(cellData.PhiMin(), cellData.PhiMax(), towerH, off);
+               MakeRPhiCell(axis->GetBinLowEdge(phiBin), axis->GetBinUpEdge(phiBin), towerH, off);
             }
             off += towerHRef;
          }
@@ -270,12 +271,18 @@
    Float_t  towerH;
    Float_t transEta = fM->GetTransitionEta();
 
-   UInt_t nEta = data->GetEtaBins()->GetNbins();
+   TAxis* axis = data->GetEtaBins();
+   UInt_t nEta = axis->GetNbins();
    for (UInt_t etaBin = 1; etaBin <= nEta; ++etaBin)
    {
       if (cellLists[etaBin] )
       {
          assert(fM->fCellLists[etaBin]);
+         Float_t etaMin = axis->GetBinLowEdge(etaBin);
+         Float_t etaMax = axis->GetBinUpEdge(etaBin);
+         Float_t thetaMin = TEveCaloData::EtaToTheta(etaMax);
+         Float_t thetaMax = TEveCaloData::EtaToTheta(etaMin);
+
          // clear
          Float_t offUp  = 0;
          Float_t offLow = 0;
@@ -289,14 +296,14 @@
          {
             data->GetCellData(*it, cellData);
             if (cellData.Phi() > 0)
-               sliceValsUp [it->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsUp [it->fSlice] += cellData.Value(fM->fPlotEt)*(*it).fFraction;
             else
-               sliceValsLow[it->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsLow[it->fSlice] += cellData.Value(fM->fPlotEt)*(*it).fFraction;
          }
 
          isBarrel = true;
-         if ((cellData.EtaMax() > 0 && cellData.EtaMax() > transEta) ||
-             (cellData.EtaMin() < 0 && cellData.EtaMin() < -transEta))
+         if ((etaMax > 0 && etaMax > transEta) ||
+             (etaMin < 0 && etaMin < -transEta))
          {
             isBarrel = false;
          }
@@ -314,7 +321,7 @@
             {
                if (rnrCtx.SecSelection()) glLoadName(1);  // name-stack phi sign
                fM->SetupColorHeight(sliceValsUp[s], s, towerH);
-               MakeRhoZCell(cellData.ThetaMin(), cellData.ThetaMax(), offUp, isBarrel, kTRUE , towerH);
+               MakeRhoZCell(thetaMin, thetaMax, offUp, isBarrel, kTRUE , towerH);
                offUp += towerH;
             }
             // phi -
@@ -322,7 +329,7 @@
             {
                if (rnrCtx.SecSelection()) glLoadName(0);  // name-stack phi sign
                fM->SetupColorHeight(sliceValsLow[s], s, towerH);
-               MakeRhoZCell(cellData.ThetaMin(), cellData.ThetaMax(), offLow, isBarrel, kFALSE , towerH);
+               MakeRhoZCell(thetaMin, thetaMax, offLow, isBarrel, kFALSE , towerH);
                offLow += towerH;
             }
             if (rnrCtx.SecSelection())  glPopName(); // phi sign is pos
@@ -344,8 +351,9 @@
    static const TEveException eh("TEveCalo2DGL::DrawRhoZHighlighted ");
 
    TEveCaloData* data = fM->GetData();
+   TAxis* axis        = data->GetEtaBins();
+   UInt_t nEtaBins    = axis->GetNbins();
    Int_t  nSlices     = data->GetNSlices();
-   UInt_t nEtaBins    = data->GetEtaBins()->GetNbins();
 
    Float_t *sliceValsUp     = new Float_t[nSlices];
    Float_t *sliceValsLow    = new Float_t[nSlices];
@@ -372,9 +380,9 @@
          for (TEveCaloData::vCellId_i i=cids.begin(); i!=cids.end(); i++) {
             data->GetCellData(*i, cellData);
             if (cellData.Phi() > 0)
-               sliceValsUp [i->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsUp [i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
             else
-               sliceValsLow[i->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsLow[i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
          }
 
          // reference phi sum
@@ -385,19 +393,21 @@
          for (TEveCaloData::vCellId_i i=cidsRef.begin(); i!=cidsRef.end(); i++) {
             data->GetCellData(*i, cellData);
             if (cellData.Phi() > 0)
-               sliceValsUpRef [i->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsUpRef [i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
             else
-               sliceValsLowRef[i->fSlice] += cellData.Value(fM->fPlotEt);
+               sliceValsLowRef[i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
          }
 
-         isBarrel = TMath::Abs(cellData.EtaMax()) < fM->GetTransitionEta();
+         isBarrel = TMath::Abs(axis->GetBinCenter(etaBin)) < fM->GetTransitionEta();
          for (Int_t s = 0; s < nSlices; ++s)
          {
+            Float_t thetaMin = TEveCaloData::EtaToTheta(axis->GetBinUpEdge(etaBin));
+            Float_t thetaMax = TEveCaloData::EtaToTheta(axis->GetBinLowEdge(etaBin));
             //  phi +
             fM->SetupColorHeight(sliceValsUpRef[s], s, towerHRef);
             if (sliceValsUp[s] > 0) {
                fM->SetupColorHeight(sliceValsUp[s], s, towerH);
-               MakeRhoZCell(cellData.ThetaMin(), cellData.ThetaMax(), offUp, isBarrel, kTRUE , towerH);
+               MakeRhoZCell(thetaMin, thetaMax, offUp, isBarrel, kTRUE , towerH);
             }
             offUp += towerHRef;
 
@@ -405,7 +415,7 @@
             fM->SetupColorHeight(sliceValsLowRef[s], s, towerHRef);
             if (sliceValsLow[s] > 0) {
                fM->SetupColorHeight(sliceValsLow[s], s, towerH);
-               MakeRhoZCell(cellData.ThetaMin(), cellData.ThetaMax(), offLow, isBarrel, kFALSE , towerH);
+               MakeRhoZCell(thetaMin, thetaMax, offLow, isBarrel, kFALSE , towerH);
             }
             offLow += towerHRef;
          } // slices
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCalo3DGL.cxx root/graf3d/eve/src/TEveCalo3DGL.cxx
--- root-old/graf3d/eve/src/TEveCalo3DGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveCalo3DGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -638,7 +638,7 @@
 
       if (fM->CellInEtaPhiRng(cellData)) 
       {
-         if (TMath::Abs(cellData.EtaMax()) < fM->GetTransitionEta())
+         if (TMath::Abs(cellData.Eta()) < fM->GetTransitionEta())
             RenderBarrelCell(cellData, towerH, offset);
          else
             RenderEndCapCell(cellData, towerH, offset);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCaloData.cxx root/graf3d/eve/src/TEveCaloData.cxx
--- root-old/graf3d/eve/src/TEveCaloData.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveCaloData.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -604,7 +604,7 @@
    // Get cell geometry and value from cell ID.
 
    cellData.CellGeom_t::operator=( fGeomVec[id.fTower] );
-   cellData.fValue = fSliceVec[id.fSlice][id.fTower]*id.fFraction;
+   cellData.fValue = fSliceVec[id.fSlice][id.fTower];
 }
 
 //______________________________________________________________________________
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCaloLegoGL.cxx root/graf3d/eve/src/TEveCaloLegoGL.cxx
--- root-old/graf3d/eve/src/TEveCaloLegoGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveCaloLegoGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -42,7 +42,6 @@
 TEveCaloLegoGL::TEveCaloLegoGL() :
    TGLObject(),
 
-   fDataMax(0),
    fGridColor(-1),
    fFontColor(-1),
 
@@ -320,7 +319,7 @@
          idxLeft = i;
       }
    }
-   fZAxisTitlePos.Set(cornerX[idxLeft], cornerY[idxLeft], 1.05 * fDataMax);
+   fZAxisTitlePos.Set(cornerX[idxLeft], cornerY[idxLeft], 1.05 * fMaxVal);
 
 
    // XY axis location (closest to eye) first
@@ -422,7 +421,7 @@
    // tick-marks and labels.
 
    // set font size first depending on size of projected axis
-
+ 
    TGLMatrix mm;
    GLdouble pm[16];
    GLint    vp[4];
@@ -452,7 +451,7 @@
       fZAxis->SetLabelColor(fFontColor);
       fZAxis->SetTitleColor(fFontColor);
       fZAxis->SetNdivisions(fM->fNZSteps*100 + 10);
-      fZAxis->SetLimits(0, fDataMax);
+      fZAxis->SetLimits(0, fMaxVal);
       fZAxis->SetTitle(fM->GetPlotEt() ? "Et[GeV]" : "E[GeV]");
 
       fAxisPainter.SetTMNDim(1);
@@ -481,21 +480,21 @@
          TGLUtil::Color(fGridColor);
 
          glVertex3f(fBackPlaneXConst[0].fX   ,fBackPlaneXConst[0].fY   ,0);
-         glVertex3f(fBackPlaneXConst[0].fX   ,fBackPlaneXConst[0].fY   ,fDataMax);
+         glVertex3f(fBackPlaneXConst[0].fX   ,fBackPlaneXConst[0].fY   ,fMaxVal);
          glVertex3f(fBackPlaneXConst[1].fX   ,fBackPlaneXConst[1].fY   ,0);
-         glVertex3f(fBackPlaneXConst[1].fX   ,fBackPlaneXConst[1].fY   ,fDataMax);
+         glVertex3f(fBackPlaneXConst[1].fX   ,fBackPlaneXConst[1].fY   ,fMaxVal);
 
 
          glVertex3f(fBackPlaneYConst[0].fX   ,fBackPlaneYConst[0].fY   ,0);
-         glVertex3f(fBackPlaneYConst[0].fX   ,fBackPlaneYConst[0].fY   ,fDataMax);
+         glVertex3f(fBackPlaneYConst[0].fX   ,fBackPlaneYConst[0].fY   ,fMaxVal);
          glVertex3f(fBackPlaneYConst[1].fX   ,fBackPlaneYConst[1].fY   ,0);
-         glVertex3f(fBackPlaneYConst[1].fX   ,fBackPlaneYConst[1].fY   ,fDataMax);
+         glVertex3f(fBackPlaneYConst[1].fX   ,fBackPlaneYConst[1].fY   ,fMaxVal);
 
          // box top
-         glVertex3f(fBackPlaneXConst[0].fX   ,fBackPlaneXConst[0].fY   ,fDataMax);
-         glVertex3f(fBackPlaneXConst[1].fX   ,fBackPlaneXConst[1].fY   ,fDataMax);
-         glVertex3f(fBackPlaneYConst[0].fX   ,fBackPlaneYConst[0].fY   ,fDataMax);
-         glVertex3f(fBackPlaneYConst[1].fX   ,fBackPlaneYConst[1].fY   ,fDataMax);
+         glVertex3f(fBackPlaneXConst[0].fX   ,fBackPlaneXConst[0].fY   ,fMaxVal);
+         glVertex3f(fBackPlaneXConst[1].fX   ,fBackPlaneXConst[1].fY   ,fMaxVal);
+         glVertex3f(fBackPlaneYConst[0].fX   ,fBackPlaneYConst[0].fY   ,fMaxVal);
+         glVertex3f(fBackPlaneYConst[1].fX   ,fBackPlaneYConst[1].fY   ,fMaxVal);
 
          glEnd();
 
@@ -503,7 +502,7 @@
          glEnable(GL_LINE_STIPPLE);
          Int_t ondiv;
          Double_t omin, omax, bw1;
-         THLimitsFinder::Optimize(0, fDataMax, fM->fNZSteps, omin, omax, ondiv, bw1);
+         THLimitsFinder::Optimize(0, fMaxVal, fM->fNZSteps, omin, omax, ondiv, bw1);
 
          glLineStipple(1, 0x5555);
          glBegin(GL_LINES);
@@ -537,7 +536,7 @@
    ax.SetLabelOffset(0.02);
    ax.SetTickLength(0.05);
    fAxisPainter.SetTMNDim(2);
-   fAxisPainter.RefTMOff(1).Set(0, 0, -fDataMax);
+   fAxisPainter.RefTMOff(1).Set(0, 0, -fMaxVal);
    fAxisPainter.SetLabelAlign(TGLFont::kCenterH, TGLFont::kBottom);
 
    // eta
@@ -548,7 +547,7 @@
    ax.SetNdivisions(710);
    ax.SetLimits(fM->GetEtaMin(), fM->GetEtaMax());
    ax.SetTitle(fM->GetData()->GetEtaBins()->GetTitle());
-   fAxisPainter.RefTitlePos().Set(fXAxisTitlePos.fX, yOff*1.5*ax.GetTickLength(), -fDataMax*ax.GetTickLength());
+   fAxisPainter.RefTitlePos().Set(fXAxisTitlePos.fX, yOff*1.5*ax.GetTickLength(), -fMaxVal*ax.GetTickLength());
    fAxisPainter.PaintAxis(rnrCtx, &ax);
    glPopMatrix();
 
@@ -560,13 +559,34 @@
    ax.SetTitle(fM->GetData()->GetPhiBins()->GetTitle());
    glPushMatrix();
    glTranslatef(fYAxisTitlePos.fX, 0, 0);
-   fAxisPainter.RefTitlePos().Set( xOff*1.5*ax.GetTickLength(), fYAxisTitlePos.fY,  -fDataMax*ax.GetTickLength());
+   fAxisPainter.RefTitlePos().Set( xOff*1.5*ax.GetTickLength(), fYAxisTitlePos.fY,  -fMaxVal*ax.GetTickLength());
    fAxisPainter.PaintAxis(rnrCtx, &ax);
    glPopMatrix();
 
 } // DrawAxis3D
 
 //______________________________________________________________________________
+void  TEveCaloLegoGL::GetScaleForMatrix(Float_t& sx, Float_t& sy, Float_t& sz) const
+{
+   Double_t em, eM, pm, pM;
+   fM->fData->GetEtaLimits(em, eM);
+   fM->fData->GetPhiLimits(pm, pM);
+   Double_t unit = ((eM - em) < (pM - pm)) ? (eM - em) : (pM - pm);
+   sx = (eM - em) / (fM->GetEtaRng() * unit);
+   sy = (pM - pm) / (fM->GetPhiRng() * unit);
+
+   sz = 1;
+   if (fM->fScaleAbs)
+   {
+      sz = fM->GetMaxTowerH() / fM->fMaxValAbs;
+   }
+   else if (!fM->fData->Empty())
+   {
+      sz = fM->GetMaxTowerH() / fMaxVal;
+   }
+}
+
+//______________________________________________________________________________
 void TEveCaloLegoGL::DrawAxis2D(TGLRnrCtx & rnrCtx) const
 {
    // Draw XY axis.
@@ -995,7 +1015,7 @@
          { 
             glPushAttrib(GL_ENABLE_BIT | GL_POLYGON_BIT);
             Float_t z    = 0;
-            Float_t zOff = fDataMax*0.001 ; // avoid polygon stpiling
+            Float_t zOff = fMaxVal*0.001 ; // avoid polygon stipling
             glBegin(GL_QUADS);
             for ( vCell2D_i i = cells2D.begin(); i != cells2D.end(); ++i) {
                Char_t transp = TMath::Min(100, 80 + fM->fData->GetSliceTransparency(i->fMaxSlice) / 5);
@@ -1065,14 +1085,9 @@
 
    // modelview matrix
    glPushMatrix();
-   Double_t em, eM, pm, pM;
-   fM->fData->GetEtaLimits(em, eM);
-   fM->fData->GetPhiLimits(pm, pM);
-   Double_t unit = ((eM - em) < (pM - pm)) ? (eM - em) : (pM - pm);
-   Float_t sx = (eM - em) / fM->GetEtaRng();
-   Float_t sy = (pM - pm) / fM->GetPhiRng();
-   Float_t sz = (fM->fData->Empty() && (fM->GetScaleAbs() == false)) ? 1 : fM->GetMaxTowerH() / fDataMax;
-   glScalef(sx / unit, sy / unit, sz);
+   Float_t sx, sy, sz;
+   GetScaleForMatrix(sx, sy, sz);
+   glScalef(sx, sy, sz);
    glTranslatef(-fM->GetEta(), -fM->fPhi, 0);
 
    glDisable(GL_LIGHTING);
@@ -1278,19 +1293,11 @@
       }
    }
 
-   // cache max val
-   fDataMax = (fM->fScaleAbs) ? fM->fMaxValAbs : fMaxVal;
-
    // modelview matrix
-   Double_t em, eM, pm, pM;
-   fM->fData->GetEtaLimits(em, eM);
-   fM->fData->GetPhiLimits(pm, pM);
-   Double_t unit = ((eM - em) < (pM - pm)) ? (eM - em) : (pM - pm);
    glPushMatrix();
-   Float_t sx = (eM - em) / fM->GetEtaRng();
-   Float_t sy = (pM - pm) / fM->GetPhiRng();
-   Float_t sz = (fM->fData->Empty() && (fM->GetScaleAbs() == false)) ? 1 : fM->GetMaxTowerH() / fDataMax;
-   glScalef(sx / unit, sy / unit, sz);
+   Float_t sx, sy, sz;
+   GetScaleForMatrix(sx, sy, sz);
+   glScalef(sx, sy, sz);
    glTranslatef(-fM->GetEta(), -fM->fPhi, 0);
 
    fFontColor = fM->fFontColor;
@@ -1364,7 +1371,7 @@
          glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
          glDisable(GL_CULL_FACE);
          TGLUtil::ColorTransparency(fM->fPlaneColor, fM->fPlaneTransparency);
-         Float_t zhp = fM->fHPlaneVal * fDataMax;
+         Float_t zhp = fM->fHPlaneVal * fMaxVal;
          glBegin(GL_POLYGON);
          glVertex3f(fM->fEtaMin, fM->GetPhiMin(), zhp);
          glVertex3f(fM->fEtaMax, fM->GetPhiMin(), zhp);
@@ -1423,43 +1430,4 @@
       }
    }
    fM->fData->ProcessSelection(sel, rec);
-
-   // if (rec.GetN() > 1)
-   // {
-   //    Int_t cellID = rec.GetItem(2);
-   //    Int_t slice = rec.GetItem(1);
-
-   //    if (fBinStep == 1)
-   //    {
-   //       Int_t tower = fM->fCellList[cellID].fTower;
-   //       while (cellID > 0 && tower == fM->fCellList[cellID].fTower)
-   //       {
-   //          cells.push_back(fM->fCellList[cellID]);
-   //          if (fCells3D) break;
-   //          --cellID;
-   //       }
-   //    }
-   //    else
-   //    {
-   //       if (cellID > 0)
-   //       {
-   //          Int_t nEta   = fEtaAxis->GetNbins();
-   //          Int_t phiBin = Int_t(cellID/(nEta+2));
-   //          Int_t etaBin = cellID - phiBin*(nEta+2);
-   //          TEveCaloData::vCellId_t sl;
-   //          fM->fData->GetCellList(fEtaAxis->GetBinCenter(etaBin), fEtaAxis->GetBinWidth(etaBin),
-   //                                 fPhiAxis->GetBinCenter(phiBin), fPhiAxis->GetBinWidth(phiBin),
-   //                                 sl);
-
-   //          for (TEveCaloData::vCellId_i it = sl.begin(); it != sl.end(); ++it)
-   //          {
-   //             if (fCells3D) {
-   //                if ((*it).fSlice == slice ) cells.push_back(*it);
-   //             } else {
-   //                if ((*it).fSlice <= slice ) cells.push_back(*it);
-   //             }
-   //          }
-   //       }
-   //    }
-   // }
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveDigitSet.cxx root/graf3d/eve/src/TEveDigitSet.cxx
--- root-old/graf3d/eve/src/TEveDigitSet.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveDigitSet.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -75,7 +75,7 @@
    fFrame          (0),
    fPalette        (0),
    fRenderMode     (kRM_AsIs),
-   fDisableLigting (kTRUE),
+   fDisableLighting(kTRUE),
    fHistoButtons   (kTRUE),
    fEmitSignals    (kFALSE),
    fCallbackFoo    (0),
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveGeoNode.cxx root/graf3d/eve/src/TEveGeoNode.cxx
--- root-old/graf3d/eve/src/TEveGeoNode.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveGeoNode.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -420,6 +420,16 @@
       rgba[2] = c->GetBlue();
    }
    gse->SetRGBA(rgba);
+   rgba[3] = 1;
+   c = gROOT->GetColor(TColor::GetColorDark(ci));
+   if (c) {
+      rgba[0] = c->GetRed();
+      rgba[1] = c->GetGreen();
+      rgba[2] = c->GetBlue();
+   }
+   gse->SetRGBALine(rgba);
+
+   // Keep default extract line color --> black.
    Bool_t rnr     = tnode ? tnode->IsVisible()      : geon->GetRnrSelf();
    Bool_t rnr_els = tnode ? tnode->IsVisDaughters() : geon->GetRnrChildren();
    if (tvolume) {
@@ -428,6 +438,8 @@
    }
    gse->SetRnrSelf    (rnr);
    gse->SetRnrElements(rnr_els);
+   gse->SetRnrFrame   (kTRUE);
+   gse->SetMiniFrame  (kTRUE);
 
    gse->SetShape((leafs_only && geon->HasChildren()) ? 0 : tshape);
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveGeoPolyShape.cxx root/graf3d/eve/src/TEveGeoPolyShape.cxx
--- root-old/graf3d/eve/src/TEveGeoPolyShape.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveGeoPolyShape.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -10,11 +10,20 @@
  *************************************************************************/
 
 #include "TEveGeoPolyShape.h"
-#include "TGLFaceSet.h"
+#include "TEveGeoShape.h"
+#include "TEvePad.h"
+#include "TEveUtil.h"
 
 #include "TVirtualPad.h"
 #include "TBuffer3D.h"
 #include "TBuffer3DTypes.h"
+#include "TGLScenePad.h"
+#include "TGLFaceSet.h"
+
+#include "TList.h"
+#include "TGeoBoolNode.h"
+#include "TGeoCompositeShape.h"
+#include "TGeoMatrix.h"
 
 //______________________________________________________________________________
 // Description of TEveGeoPolyShape
@@ -31,6 +40,69 @@
 }
 
 //______________________________________________________________________________
+TEveGeoPolyShape* TEveGeoPolyShape::Construct(TGeoCompositeShape *cshape, Int_t n_seg)
+{
+   // Static constructor from a composite shape.
+
+   TEvePad       pad;
+   TEvePadHolder gpad(kFALSE, &pad);
+   TGLScenePad   scene_pad(&pad);
+   pad.GetListOfPrimitives()->Add(cshape);
+   pad.SetViewer3D(&scene_pad);
+
+   TEveGeoManagerHolder gmgr(TEveGeoShape::GetGeoMangeur(), n_seg);
+
+   scene_pad.BeginScene();
+   {
+      Double_t halfLengths[3] = { cshape->GetDX(), cshape->GetDY(), cshape->GetDZ() };
+
+      TBuffer3D buff(TBuffer3DTypes::kComposite);
+      buff.fID           = cshape;
+      buff.fLocalFrame   = kTRUE;
+      buff.SetLocalMasterIdentity();
+      buff.SetAABoundingBox(cshape->GetOrigin(), halfLengths);
+      buff.SetSectionsValid(TBuffer3D::kCore|TBuffer3D::kBoundingBox);
+
+      Bool_t paintComponents = kTRUE;
+
+      // Start a composite shape, identified by this buffer
+      if (TBuffer3D::GetCSLevel() == 0)
+         paintComponents = gPad->GetViewer3D()->OpenComposite(buff);
+
+      TBuffer3D::IncCSLevel();
+
+      // Paint the boolean node - will add more buffers to viewer
+      TGeoHMatrix xxx;
+      TGeoMatrix *gst = TGeoShape::GetTransform();
+      TGeoShape::SetTransform(&xxx);
+      if (paintComponents) cshape->GetBoolNode()->Paint("");
+      TGeoShape::SetTransform(gst);
+      // Close the composite shape
+      if (TBuffer3D::DecCSLevel() == 0)
+         gPad->GetViewer3D()->CloseComposite();
+   }
+   scene_pad.EndScene();
+   pad.SetViewer3D(0);
+
+   TGLFaceSet* fs = dynamic_cast<TGLFaceSet*>(scene_pad.FindLogical(cshape));
+   if (!fs) {
+      ::Warning("TEveGeoPolyShape::Construct", "Failed extracting CSG tesselation for shape '%s'.", cshape->GetName());
+      return 0;
+   }
+
+   TEveGeoPolyShape *egps = new TEveGeoPolyShape;
+   egps->SetFromFaceSet(fs);
+   egps->fOrigin[0] = cshape->GetOrigin()[0];
+   egps->fOrigin[1] = cshape->GetOrigin()[1];
+   egps->fOrigin[2] = cshape->GetOrigin()[2];
+   egps->fDX = cshape->GetDX();
+   egps->fDY = cshape->GetDY();
+   egps->fDZ = cshape->GetDZ();
+
+   return egps;
+}
+
+//______________________________________________________________________________
 void TEveGeoPolyShape::SetFromFaceSet(TGLFaceSet* fs)
 {
    // Set data-members from a face-set.
@@ -64,19 +136,38 @@
       UInt_t nvrt = fVertices.size() / 3;
       UInt_t nseg = 0;
 
+      std::map<Edge_t, Int_t> edges;
+
       const Int_t *pd = &fPolyDesc[0];
       for (UInt_t i = 0; i < fNbPols; ++i)
       {
-         nseg += pd[0];
-         pd   += pd[0] + 1;
+         UInt_t nv = pd[0]; ++pd;
+         for (UInt_t j = 0; j < nv; ++j)
+         {
+            Edge_t e(pd[j], (j != nv - 1) ? pd[j+1] : pd[0]);
+            if (edges.find(e) == edges.end())
+            {
+               edges.insert(std::make_pair(e, 0));
+               ++nseg;
+            }
+         }
+         pd += nv;
       }
 
       b.SetRawSizes(nvrt, 3*nvrt, nseg, 3*nseg, fNbPols, fNbPols+fPolyDesc.size());
 
       memcpy(b.fPnts, &fVertices[0], sizeof(Double_t)*fVertices.size());
 
-      Int_t si = 0, pi = 0, ns = 0;
+      Int_t si = 0, scnt = 0;
+      for (std::map<Edge_t, Int_t>::iterator i = edges.begin(); i != edges.end(); ++i)
+      {
+         b.fSegs[si++] = 0;
+         b.fSegs[si++] = i->first.fI;
+         b.fSegs[si++] = i->first.fJ;
+         i->second = scnt++;
+      }
 
+      Int_t pi = 0;
       pd = &fPolyDesc[0];
       for (UInt_t i = 0; i < fNbPols; ++i)
       {
@@ -85,15 +176,13 @@
          b.fPols[pi++] = nv;
          for (UInt_t j = 0; j < nv; ++j)
          {
-            b.fSegs[si++] = 0;
-            b.fSegs[si++] = pd[j];
-            b.fSegs[si++] = (j != nv - 1) ? pd[j+1] : pd[0];
-
-            b.fPols[pi++] = ns++;
+            b.fPols[pi++] = edges[Edge_t(pd[j], (j != nv - 1) ? pd[j+1] : pd[0])];
          }
          pd += nv;
       }
 
+      
+
       b.SetSectionsValid(TBuffer3D::kRawSizes | TBuffer3D::kRaw);
    }
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveGeoShape.cxx root/graf3d/eve/src/TEveGeoShape.cxx
--- root-old/graf3d/eve/src/TEveGeoShape.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveGeoShape.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -21,6 +21,7 @@
 
 #include "TROOT.h"
 #include "TBuffer3D.h"
+#include "TBuffer3DTypes.h"
 #include "TVirtualViewer3D.h"
 #include "TColor.h"
 #include "TFile.h"
@@ -30,6 +31,7 @@
 #include "TGeoNode.h"
 #include "TGeoShapeAssembly.h"
 #include "TGeoCompositeShape.h"
+#include "TGeoBoolNode.h"
 #include "TGeoManager.h"
 #include "TGeoMatrix.h"
 #include "TVirtualGeoPainter.h"
@@ -92,16 +94,13 @@
 
 //______________________________________________________________________________
 TEveGeoShape::TEveGeoShape(const char* name, const char* title) :
-   TEveElement   (fColor),
-   TNamed        (name, title),
-   fColor        (0),
-   fNSegments    (0),
-   fShape        (0)
+   TEveShape       (name, title),
+   fNSegments      (0),
+   fShape          (0),
+   fCompositeShape (0)
 {
    // Constructor.
 
-   fCanEditMainColor        = kTRUE;
-   fCanEditMainTransparency = kTRUE;
    InitMainTrans();
 }
 
@@ -114,26 +113,87 @@
 }
 
 //______________________________________________________________________________
+TGeoShape* TEveGeoShape::MakePolyShape()
+{
+   // Create derived TEveGeoShape form a TGeoCompositeShape.
+
+   return TEveGeoPolyShape::Construct(fCompositeShape, fNSegments);
+}
+
+//______________________________________________________________________________
+void TEveGeoShape::SetNSegments(Int_t s)
+{
+   // Set number of segments.
+
+   if (s != fNSegments && fCompositeShape != 0)
+   {
+      delete fShape;
+      fShape = MakePolyShape();
+   }
+   fNSegments = s;
+}
+
+//______________________________________________________________________________
 void TEveGeoShape::SetShape(TGeoShape* s)
 {
    // Set TGeoShape shown by this object.
+   //
+   // The shape is owned by TEveGeoShape but TGeoShape::fUniqueID is
+   // used for reference counting so you can pass the same shape to
+   // several TEveGeoShapes.
+   //
+   // If it if is taken from an existing TGeoManager, manually
+   // increase the fUniqueID before passing it to TEveGeoShape.
 
    TEveGeoManagerHolder gmgr(fgGeoMangeur);
 
-   if (fShape) {
+   if (fCompositeShape)
+   {
+      delete fShape;
+      fShape = fCompositeShape;
+   }
+   if (fShape)
+   {
       fShape->SetUniqueID(fShape->GetUniqueID() - 1);
       if (fShape->GetUniqueID() == 0)
+      {
          delete fShape;
+      }
    }
    fShape = s;
-   if (fShape) {
+   if (fShape)
+   {
       fShape->SetUniqueID(fShape->GetUniqueID() + 1);
+      fCompositeShape = dynamic_cast<TGeoCompositeShape*>(fShape);
+      if (fCompositeShape)
+      {
+         fShape = MakePolyShape();
+      }
    }
 }
 
 /******************************************************************************/
 
 //______________________________________________________________________________
+void TEveGeoShape::ComputeBBox()
+{
+   // Compute bounding-box.
+
+   TGeoBBox *bb = dynamic_cast<TGeoBBox*>(fShape);
+   if (bb)
+   {
+      BBoxInit();
+      const Double_t *o = bb->GetOrigin();
+      BBoxCheckPoint(o[0] - bb->GetDX(), o[0] - bb->GetDY(), o[0] - bb->GetDZ());
+      BBoxCheckPoint(o[0] + bb->GetDX(), o[0] + bb->GetDY(), o[0] + bb->GetDZ());
+   }
+   else
+   {
+      BBoxZero();
+   }
+}
+
+//______________________________________________________________________________
 void TEveGeoShape::Paint(Option_t* /*option*/)
 {
    // Paint object.
@@ -145,35 +205,69 @@
 
    TEveGeoManagerHolder gmgr(fgGeoMangeur, fNSegments);
 
-   TBuffer3D& buff = (TBuffer3D&) fShape->GetBuffer3D
-      (TBuffer3D::kCore, kFALSE);
+   if (fCompositeShape)
+   {
+      Double_t halfLengths[3] = { fCompositeShape->GetDX(), fCompositeShape->GetDY(), fCompositeShape->GetDZ() };
 
-   buff.fID           = this;
-   buff.fColor        = GetMainColor();
-   buff.fTransparency = GetMainTransparency();
-   RefMainTrans().SetBuffer3D(buff);
-   buff.fLocalFrame   = kTRUE; // Always enforce local frame (no geo manager).
-
-   Int_t sections = TBuffer3D::kBoundingBox | TBuffer3D::kShapeSpecific;
-   if (fNSegments > 2)
-      sections |= TBuffer3D::kRawSizes | TBuffer3D::kRaw;
-   fShape->GetBuffer3D(sections, kTRUE);
-
-   Int_t reqSec = gPad->GetViewer3D()->AddObject(buff);
-
-   if (reqSec != TBuffer3D::kNone) {
-      // This shouldn't happen, but I suspect it does sometimes.
-      if (reqSec & TBuffer3D::kCore)
-         Warning(eh, "Core section required again for shape='%s'. This shouldn't happen.", GetName());
-      fShape->GetBuffer3D(reqSec, kTRUE);
-      reqSec = gPad->GetViewer3D()->AddObject(buff);
+      TBuffer3D buff(TBuffer3DTypes::kComposite);
+      buff.fID           = this;
+      buff.fColor        = GetMainColor();
+      buff.fTransparency = GetMainTransparency();
+      RefMainTrans().SetBuffer3D(buff);
+      buff.fLocalFrame   = kTRUE; // Always enforce local frame (no geo manager).
+      buff.SetAABoundingBox(fCompositeShape->GetOrigin(), halfLengths);
+      buff.SetSectionsValid(TBuffer3D::kCore|TBuffer3D::kBoundingBox);
+
+      Bool_t paintComponents = kTRUE;
+
+      // Start a composite shape, identified by this buffer
+      if (TBuffer3D::GetCSLevel() == 0)
+         paintComponents = gPad->GetViewer3D()->OpenComposite(buff);
+
+      TBuffer3D::IncCSLevel();
+
+      // Paint the boolean node - will add more buffers to viewer
+      TGeoHMatrix xxx;
+      TGeoMatrix *gst = TGeoShape::GetTransform();
+      TGeoShape::SetTransform(&xxx);
+      if (paintComponents) fCompositeShape->GetBoolNode()->Paint("");
+      TGeoShape::SetTransform(gst);
+      // Close the composite shape
+      if (TBuffer3D::DecCSLevel() == 0)
+         gPad->GetViewer3D()->CloseComposite();
    }
+   else
+   {
+      TBuffer3D& buff = (TBuffer3D&) fShape->GetBuffer3D
+         (TBuffer3D::kCore, kFALSE);
+
+      buff.fID           = this;
+      buff.fColor        = GetMainColor();
+      buff.fTransparency = GetMainTransparency();
+      RefMainTrans().SetBuffer3D(buff);
+      buff.fLocalFrame   = kTRUE; // Always enforce local frame (no geo manager).
+
+      Int_t sections = TBuffer3D::kBoundingBox | TBuffer3D::kShapeSpecific;
+      if (fNSegments > 2)
+         sections |= TBuffer3D::kRawSizes | TBuffer3D::kRaw;
+      fShape->GetBuffer3D(sections, kTRUE);
+
+      Int_t reqSec = gPad->GetViewer3D()->AddObject(buff);
+
+      if (reqSec != TBuffer3D::kNone) {
+         // This shouldn't happen, but I suspect it does sometimes.
+         if (reqSec & TBuffer3D::kCore)
+            Warning(eh, "Core section required again for shape='%s'. This shouldn't happen.", GetName());
+         fShape->GetBuffer3D(reqSec, kTRUE);
+         reqSec = gPad->GetViewer3D()->AddObject(buff);
+      }
 
-   if (reqSec != TBuffer3D::kNone)
-      Warning(eh, "Extra section required: reqSec=%d, shape=%s.", reqSec, GetName());
+      if (reqSec != TBuffer3D::kNone)
+         Warning(eh, "Extra section required: reqSec=%d, shape=%s.", reqSec, GetName());
+   }
 }
 
-/******************************************************************************/
+//==============================================================================
 
 //______________________________________________________________________________
 void TEveGeoShape::Save(const char* file, const char* name)
@@ -218,18 +312,34 @@
 
    TEveGeoShapeExtract* she = new TEveGeoShapeExtract(gsre->GetName(), gsre->GetTitle());
    she->SetTrans(gsre->RefMainTrans().Array());
-   Int_t ci = gsre->GetColor();
-   TColor* c = gROOT->GetColor(ci);
-   Float_t rgba[4] = {1, 0, 0, 1 - gsre->GetMainTransparency()/100.};
-   if (c)
-   {
-      rgba[0] = c->GetRed();
-      rgba[1] = c->GetGreen();
-      rgba[2] = c->GetBlue();
+   {
+      Int_t   ci = gsre->GetFillColor();
+      TColor *c  = gROOT->GetColor(ci);
+      Float_t rgba[4] = { 1, 0, 0, 1 - gsre->GetMainTransparency()/100. };
+      if (c)
+      {
+         rgba[0] = c->GetRed();
+         rgba[1] = c->GetGreen();
+         rgba[2] = c->GetBlue();
+      }
+      she->SetRGBA(rgba);
+   }
+   {
+      Int_t   ci = gsre->GetLineColor();
+      TColor *c  = gROOT->GetColor(ci);
+      Float_t rgba[4] = { 1, 0, 0, 1 };
+      if (c)
+      {
+         rgba[0] = c->GetRed();
+         rgba[1] = c->GetGreen();
+         rgba[2] = c->GetBlue();
+      }
+      she->SetRGBALine(rgba);
    }
-   she->SetRGBA(rgba);
    she->SetRnrSelf(gsre->GetRnrSelf());
    she->SetRnrElements(gsre->GetRnrChildren());
+   she->SetRnrFrame(gsre->GetDrawFrame());
+   she->SetMiniFrame(gsre->GetMiniFrame());
    she->SetShape(gsre->GetShape());
    if (gsre->HasChildren())
    {
@@ -274,8 +384,12 @@
    const Float_t* rgba = gse->GetRGBA();
    gsre->SetMainColorRGB(rgba[0], rgba[1], rgba[2]);
    gsre->SetMainAlpha(rgba[3]);
+   rgba = gse->GetRGBALine();
+   gsre->SetLineColor(TColor::GetColor(rgba[0], rgba[1], rgba[2]));
    gsre->SetRnrSelf(gse->GetRnrSelf());
    gsre->SetRnrChildren(gse->GetRnrElements());
+   gsre->SetDrawFrame(gse->GetRnrFrame());
+   gsre->SetMiniFrame(gse->GetMiniFrame());
    gsre->SetShape(gse->GetShape());
 
    if (parent)
@@ -319,7 +433,7 @@
    if (fShape == 0) return 0;
 
    if (dynamic_cast<TGeoShapeAssembly*>(fShape)) {
-      // !!!! TGeoShapeAssembly makes a bad TBuffer3D
+      // TGeoShapeAssembly makes a bad TBuffer3D.
       return 0;
    }
 
@@ -353,7 +467,7 @@
 
 //______________________________________________________________________________
 TEveGeoShapeProjected::TEveGeoShapeProjected() :
-   TEveElementList("TEveGeoShapeProjected", "", kTRUE),
+   TEveShape("TEveGeoShapeProjected"),
    fBuff(0)
 {
    // Constructor.
@@ -379,7 +493,6 @@
    TEveProjected::SetProjection(mng, model);
 
    TEveGeoShape* gre = dynamic_cast<TEveGeoShape*>(fProjectable);
-   SetMainColor(gre->GetMainColor());
    CopyVizParams(gre);
 }
 
@@ -428,26 +541,3 @@
       BBoxZero();
    }
 }
-
-//______________________________________________________________________________
-void TEveGeoShapeProjected::Paint(Option_t* /*option*/)
-{
-   // Paint object.
-
-   static const TEveException eh("TEveGeoShapeProjected::Paint ");
-
-   if (fBuff == 0)
-      return;
-
-   TBuffer3D &buff = *fBuff;
-
-   buff.fID           = this;
-   buff.fColor        = GetMainColor();
-   buff.fTransparency = GetMainTransparency();
-   buff.fLocalFrame   = kTRUE;
-
-   Int_t reqSec = gPad->GetViewer3D()->AddObject(buff);
-
-   if (reqSec != TBuffer3D::kNone)
-      Warning(eh, "Extra section required: reqSec=%d, shape=%s.", reqSec, GetName());
-}
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveGeoShapeExtract.cxx root/graf3d/eve/src/TEveGeoShapeExtract.cxx
--- root-old/graf3d/eve/src/TEveGeoShapeExtract.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveGeoShapeExtract.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -34,9 +34,10 @@
 //______________________________________________________________________________
 TEveGeoShapeExtract::TEveGeoShapeExtract(const char* n, const char* t) :
    TNamed       (n,t),
-
    fRnrSelf     (kTRUE),
    fRnrElements (kTRUE),
+   fRnrFrame    (kTRUE),
+   fMiniFrame   (kTRUE),
    fShape       (0),
    fElements    (0)
 {
@@ -45,6 +46,7 @@
    memset(fTrans, 0, sizeof(fTrans));
    fTrans[0] = fTrans[5] = fTrans[10] = fTrans[15] = 1;
    fRGBA [0] = fRGBA [1] = fRGBA [2]  = fRGBA [3]  = 1;
+   fRGBALine[0] = fRGBALine[1] = fRGBALine[2] = 0; fRGBALine[3] = 1;
    gGeoManager = TEveGeoShape::GetGeoMangeur(); // To inforce phony geo-manager on load time.
 }
 
@@ -90,10 +92,19 @@
 }
 
 //______________________________________________________________________________
-void TEveGeoShapeExtract::SetRGBA (const Float_t  arr[4])
+void TEveGeoShapeExtract::SetRGBA(const Float_t  arr[4])
 {
    // Set RGBA color.
 
    for(Int_t i=0; i<4; ++i)
       fRGBA[i] = arr[i];
 }
+
+//______________________________________________________________________________
+void TEveGeoShapeExtract::SetRGBALine(const Float_t  arr[4])
+{
+   // Set RGBA color for line.
+
+   for(Int_t i=0; i<4; ++i)
+      fRGBALine[i] = arr[i];
+}
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEvePolygonSetProjected.cxx root/graf3d/eve/src/TEvePolygonSetProjected.cxx
--- root-old/graf3d/eve/src/TEvePolygonSetProjected.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEvePolygonSetProjected.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -20,20 +20,20 @@
 
 namespace
 {
-struct Seg_t
-{
-   // Helper class for building 2D polygons from TBuffer3D.
-   Int_t fV1;
-   Int_t fV2;
-
-   Seg_t(Int_t i1=-1, Int_t i2=-1) : fV1(i1), fV2(i2) {}
-};
+   struct Seg_t
+   {
+      // Helper class for building 2D polygons from TBuffer3D.
+      Int_t fV1;
+      Int_t fV2;
 
-typedef std::list<Seg_t>           LSeg_t;
-typedef std::list<Seg_t>::iterator LSegIt_t;
+      Seg_t(Int_t i1=-1, Int_t i2=-1) : fV1(i1), fV2(i2) {}
+   };
 
+   typedef std::list<Seg_t>           LSeg_t;
+   typedef std::list<Seg_t>::iterator LSegIt_t;
 }
 
+
 //==============================================================================
 //==============================================================================
 // TEvePolygonSetProjected
@@ -93,17 +93,10 @@
    // This is virtual method from base-class TEveProjected.
 
    TEveProjected::SetProjection(mng, model);
-   TEveGeoShape* gre = dynamic_cast<TEveGeoShape*>(model);
 
+   TEveGeoShape* gre = dynamic_cast<TEveGeoShape*>(model);
    fBuff = gre->MakeBuffer3D();
-   if (fBuff)
-   {
-      Color_t color = gre->GetMainColor();
-      SetMainColor(color);
-      SetLineColor(color);
-      // SetLineColor((Color_t)TColor::GetColorBright(color));
-      SetMainTransparency(gre->GetMainTransparency());
-   }
+   CopyVizParams(gre);
 }
 
 //______________________________________________________________________________
@@ -124,9 +117,8 @@
 
    if (fBuff == 0) return;
 
-   // drop polygons, and projected/reduced points
+   // drop polygons and projected/reduced points
    fPols.clear();
-
    ProjectBuffer3D();
 }
 
@@ -205,9 +197,8 @@
 
    if (pp.size() <= 2) return 0;
 
-   // dimension of bbox
-   Float_t bbox[] = { 1e6, -1e6, 1e6, -1e6, 1e6, -1e6 };
-   for (std::list<Int_t>::iterator u = pp.begin(); u!= pp.end(); ++u)
+   Float_t bbox[4] = { 1e6, -1e6, 1e6, -1e6 };
+   for (std::list<Int_t>::iterator u = pp.begin(); u != pp.end(); ++u)
    {
       Int_t idx = *u;
       if (fPnts[idx].fX < bbox[0]) bbox[0] = fPnts[idx].fX;
@@ -219,37 +210,58 @@
    Float_t eps = 2*TEveProjection::fgEps;
    if ((bbox[1]-bbox[0]) < eps || (bbox[3]-bbox[2]) < eps) return 0;
 
-   // duplication
+   // Duplication
    for (vpPolygon_i poi = pols.begin(); poi != pols.end(); ++poi)
    {
       Polygon_t& refP = *poi;
-      if ((Int_t)pp.size() != refP.fNPnts)
-         continue;
-      std::list<Int_t>::iterator u = pp.begin();
-      Int_t pidx = refP.FindPoint(*u);
-      if (pidx < 0)
+
+      if ((Int_t) pp.size() != refP.fNPnts)
          continue;
-      while (u != pp.end())
+
+      Int_t start_idx = refP.FindPoint(pp.front());
+      if (start_idx < 0)
+            continue;
+      if (++start_idx >= refP.fNPnts) start_idx = 0;
+      
+      // Same orientation duplicate
+      {
+         std::list<Int_t>::iterator u = ++pp.begin();
+         Int_t pidx = start_idx;
+         while (u != pp.end())
+         {
+            if ((*u) != refP.fPnts[pidx])
+               break;
+            ++u;
+            if (++pidx >= refP.fNPnts) pidx = 0;
+         }
+         if (u == pp.end()) return 0;
+      }
+      // Inverse orientation duplicate
       {
-         if ((*u) != refP.fPnts[pidx])
-            break;
-         ++u;
-         if (++pidx >= refP.fNPnts) pidx = 0;
+         std::list<Int_t>::iterator u = --pp.end();
+         Int_t pidx = start_idx;
+         while (u != pp.begin())
+         {
+            if ((*u) != refP.fPnts[pidx])
+               break;
+            --u;
+            if (++pidx >= refP.fNPnts) pidx = 0;
+         }
+         if (u == pp.begin()) return 0;
       }
-      if (u == pp.end()) return 0;
    }
 
-   Int_t* pv = new Int_t[pp.size()];
-   Int_t count=0;
-   for (std::list<Int_t>::iterator u = pp.begin(); u != pp.end(); u++)
+   Int_t *pv    = new Int_t[pp.size()];
+   Int_t  count = 0;
+   for (std::list<Int_t>::iterator u = pp.begin(); u != pp.end(); ++u)
    {
       pv[count] = *u;
-      count++;
+      ++count;
    }
 
    pols.push_back(Polygon_t());
-   pols.back().fNPnts = pp.size();
-   pols.back().fPnts = &pv[0];
+   pols.back().fNPnts =  pp.size();
+   pols.back().fPnts  = &pv[0];
 
    return (bbox[1]-bbox[0]) * (bbox[3]-bbox[2]);
 }
@@ -260,17 +272,17 @@
    // Build polygons from list of buffer polygons.
 
    TEveProjection* projection = fManager->GetProjection();
-   Int_t* bpols = fBuff->fPols;
-   Float_t surf =0; // surface of projected polygons
-   for (UInt_t pi = 0; pi< fBuff->NbPols(); pi++)
+   Int_t   *bpols = fBuff->fPols;
+   Float_t  surf  = 0; // surface of projected polygons
+   for (UInt_t pi = 0; pi < fBuff->NbPols(); ++pi)
    {
       std::list<Int_t> pp; // points in current polygon
-      UInt_t segN = bpols[1];
-      Int_t* seg =  &bpols[2];
+      UInt_t  segN =  bpols[1];
+      Int_t  *seg  = &bpols[2];
       // start idx in the fist segment depends of second segment
-      Int_t  tail, head;
-      Bool_t h = IsFirstIdxHead(seg[0], seg[1]);
-      if (h) {
+      Int_t   tail, head;
+      if (IsFirstIdxHead(seg[0], seg[1]))
+      {
          head = idxMap[fBuff->fSegs[3*seg[0] + 1]];
          tail = idxMap[fBuff->fSegs[3*seg[0] + 2]];
       }
@@ -285,24 +297,23 @@
       for (UInt_t s = 1; s < segN; ++s)
          segs.push_back(Seg_t(fBuff->fSegs[3*seg[s] + 1],fBuff->fSegs[3*seg[s] + 2]));
 
-      Bool_t accepted = kFALSE;
       for (LSegIt_t it = segs.begin(); it != segs.end(); ++it)
       {
          Int_t mv1 = idxMap[(*it).fV1];
          Int_t mv2 = idxMap[(*it).fV2];
-         accepted = projection->AcceptSegment(fPnts[mv1], fPnts[mv2], TEveProjection::fgEps);
 
-         if (accepted == kFALSE)
+         if ( ! projection->AcceptSegment(fPnts[mv1], fPnts[mv2], TEveProjection::fgEps))
          {
             pp.clear();
             break;
          }
          if (tail != pp.back()) pp.push_back(tail);
-         tail = (mv1 == tail) ? mv2 :mv1;
+         tail = (mv1 == tail) ? mv2 : mv1;
       }
-      // DirectDraw() implementation: last and first vertices should not be equal
-      if (pp.empty() == kFALSE)
+
+      if ( ! pp.empty())
       {
+         // DirectDraw() implementation: last and first vertices should not be equal
          if (pp.front() == pp.back()) pp.pop_front();
          surf += AddPolygon(pp, fPolsBP);
       }
@@ -429,6 +440,22 @@
 }
 
 //______________________________________________________________________________
+Float_t TEvePolygonSetProjected::PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& p) const
+{
+   // Calculate XY surface of a polygon.
+
+   Float_t surf = 0;
+   Int_t nPnts = p.fNPnts;
+   for (Int_t i = 0; i < nPnts - 1; ++i)
+   {
+      Int_t a = p.fPnts[i];
+      Int_t b = p.fPnts[i+1];
+      surf += fPnts[a].fX * fPnts[b].fY - fPnts[a].fY * fPnts[b].fX;
+   }
+   return 0.5f * TMath::Abs(surf);
+}
+
+//______________________________________________________________________________
 void TEvePolygonSetProjected::DumpPolys() const
 {
    // Dump information about built polygons.
@@ -441,9 +468,9 @@
       printf("Points of polygon %d [Np = %d]:\n", ++cnt, nPnts);
       for (Int_t vi = 0; vi<nPnts; ++vi) {
          Int_t pi = (*i).fPnts[vi];
-         printf("(%f, %f, %f)", fPnts[pi].fX, fPnts[pi].fY, fPnts[pi].fZ);
+         printf("  (%f, %f, %f)", fPnts[pi].fX, fPnts[pi].fY, fPnts[pi].fZ);
       }
-      printf("\n");
+      printf(", surf=%f\n", PolygonSurfaceXY(*i));
    }
 }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx root/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx
--- root-old/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -34,7 +34,7 @@
 {
    // Constructor
 
-   // fDLCache = false; // Disable DL.
+   // fDLCache = kFALSE; // Disable DL.
    fMultiColor = kTRUE; // Potentially false, reset in DirectDraw().
 }
 
@@ -45,7 +45,8 @@
 {
    // Set model object.
 
-   return SetModelCheckClass(obj, TEvePolygonSetProjected::Class());
+   fM = SetModelDynCast<TEvePolygonSetProjected>(obj);
+   return kTRUE;
 }
 
 //______________________________________________________________________________
@@ -53,7 +54,7 @@
 {
    // Setup bounding-box information.
 
-   SetAxisAlignedBBox(((TEvePolygonSetProjected*)fExternalObj)->AssertBBox());
+   SetAxisAlignedBBox(fM->AssertBBox());
 }
 
 /******************************************************************************/
@@ -75,21 +76,46 @@
 {
    // Draw polygons outline.
 
-   TEvePolygonSetProjected& refPS = * (TEvePolygonSetProjected*) fExternalObj;
-   if (refPS.fPols.size() == 0) return;
+   if (fM->fPols.size() == 0) return;
 
-   Int_t vi;
-   for (TEvePolygonSetProjected::vpPolygon_ci i = refPS.fPols.begin();
-        i != refPS.fPols.end(); ++i)
+   if (fM->GetMiniFrame())
    {
-      glBegin(GL_LINE_LOOP);
-      for(Int_t k = 0; k < (*i).fNPnts; ++k)
+      std::map<Edge_t, Int_t> edges;
+
+      for (TEvePolygonSetProjected::vpPolygon_ci i = fM->fPols.begin();
+           i != fM->fPols.end(); ++i)
       {
-         vi = (*i).fPnts[k];
-         glVertex3fv(refPS.fPnts[vi].Arr());
+         for(Int_t k = 0; k < i->fNPnts - 1; ++k)
+         {
+            ++edges[Edge_t(i->fPnts[k], i->fPnts[k+1])];
+         }
+         ++edges[Edge_t(i->fPnts[0], i->fPnts[i->fNPnts - 1])];
+      }
+
+      glBegin(GL_LINES);
+      for (std::map<Edge_t, Int_t>::iterator i = edges.begin(); i != edges.end(); ++i)
+      {
+         if (i->second == 1)
+         {
+            glVertex3fv(fM->fPnts[i->first.fI].Arr());
+            glVertex3fv(fM->fPnts[i->first.fJ].Arr());
+         }
       }
       glEnd();
    }
+   else
+   {
+      for (TEvePolygonSetProjected::vpPolygon_ci i = fM->fPols.begin();
+           i != fM->fPols.end(); ++i)
+      {
+         glBegin(GL_LINE_LOOP);
+         for(Int_t k = 0; k < i->fNPnts; ++k)
+         {
+            glVertex3fv(fM->fPnts[i->fPnts[k]].Arr());
+         }
+         glEnd();
+      }
+   }
 }
 
 //______________________________________________________________________________
@@ -97,8 +123,7 @@
 {
    // Do GL rendering.
 
-   TEvePolygonSetProjected& refPS = * (TEvePolygonSetProjected*) fExternalObj;
-   if (refPS.fPols.size() == 0) return;
+   if (fM->fPols.size() == 0) return;
 
    glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT | GL_POLYGON_BIT);
 
@@ -108,16 +133,16 @@
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    glDisable(GL_CULL_FACE);
 
-   fMultiColor = (refPS.fDrawFrame && refPS.fFillColor != refPS.fLineColor);
+   fMultiColor = (fM->fDrawFrame && fM->fFillColor != fM->fLineColor);
 
    // polygons
    glEnable(GL_POLYGON_OFFSET_FILL);
    glPolygonOffset(1.0f,1.0f);
    GLUtesselator *tessObj = TGLUtil::GetDrawTesselator3fv();
 
-   TEveVector* pnts = refPS.fPnts;
-   for (TEvePolygonSetProjected::vpPolygon_ci i = refPS.fPols.begin();
-        i != refPS.fPols.end(); ++i)
+   TEveVector* pnts = fM->fPnts;
+   for (TEvePolygonSetProjected::vpPolygon_ci i = fM->fPols.begin();
+        i != fM->fPols.end(); ++i)
    {
       Int_t vi; //current vertex index of curent polygon
       Int_t pntsN = (*i).fNPnts; // number of points in current polygon
@@ -151,11 +176,11 @@
    glDisable(GL_POLYGON_OFFSET_FILL);
 
    // Outline
-   if (refPS.fDrawFrame)
+   if (fM->fDrawFrame)
    {
-      TGLUtil::Color(refPS.fLineColor);
+      TGLUtil::Color(fM->fLineColor);
       glEnable(GL_LINE_SMOOTH);
-      TGLUtil::LineWidth(refPS.fLineWidth);
+      TGLUtil::LineWidth(fM->fLineWidth);
       DrawOutline();
    }
 
@@ -170,9 +195,7 @@
    // XXXX to support highlight AND selection ...
    if (lvl < 0) lvl = pshp->GetSelected();
 
-   TEvePolygonSetProjected& refPS = * (TEvePolygonSetProjected*) fExternalObj;
-
-   if (refPS.GetHighlightFrame())
+   if (fM->GetHighlightFrame())
    {
       glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT);
       glDisable(GL_LIGHTING);
@@ -196,7 +219,7 @@
       TGLUtil::UnlockColor();
       rnrCtx.SetHighlightOutline(kFALSE);
 
-      TGLUtil::Color(refPS.fLineColor);
+      TGLUtil::Color(fM->fLineColor);
       for (int i = 0; i < 4; ++i)
       {
          glViewport(vp.X() + inner[i][0], vp.Y() + inner[i][1], vp.Width(), vp.Height());
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveProjectionAxes.cxx root/graf3d/eve/src/TEveProjectionAxes.cxx
--- root-old/graf3d/eve/src/TEveProjectionAxes.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveProjectionAxes.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -75,7 +75,7 @@
    static const TEveException eH("TEveProjectionManager::ComputeBBox ");
 
    BBoxZero();
-   if(fManager == 0)
+   if(fManager == 0 || fManager->GetBBox() == 0)
       return;
 
    for (Int_t i=0; i<6; ++i)
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveQuadSetGL.cxx root/graf3d/eve/src/TEveQuadSetGL.cxx
--- root-old/graf3d/eve/src/TEveQuadSetGL.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveQuadSetGL.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -85,12 +85,15 @@
       glEnable(GL_COLOR_MATERIAL);
       glDisable(GL_CULL_FACE);
 
-      if (mQ.fRenderMode == TEveDigitSet::kRM_Fill)
-         glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
-      else if (mQ.fRenderMode == TEveDigitSet::kRM_Line)
-         glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+      if ( ! rnrCtx.IsDrawPassOutlineLine())
+      {
+         if (mQ.fRenderMode == TEveDigitSet::kRM_Fill)
+            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+         else if (mQ.fRenderMode == TEveDigitSet::kRM_Line)
+            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+      }
 
-      if (mQ.fDisableLigting)  glDisable(GL_LIGHTING);
+      if (mQ.fDisableLighting)  glDisable(GL_LIGHTING);
 
       if (mQ.fQuadType < TEveQuadSet::kQT_Rectangle_End)    RenderQuads(rnrCtx);
       else if (mQ.fQuadType < TEveQuadSet::kQT_Line_End)    RenderLines(rnrCtx);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveSecondarySelectable.cxx root/graf3d/eve/src/TEveSecondarySelectable.cxx
--- root-old/graf3d/eve/src/TEveSecondarySelectable.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveSecondarySelectable.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -25,9 +25,10 @@
 // and clear corresponding selection-set from there.
 //
 // To support tooltips for sub-elements, implement:
-//    virtual TString GetHighlightTooltip();
+//    virtual TString TEveElement::GetHighlightTooltip();
 // and return tooltip for the entry in the fHighlightedSet.
 // There should always be a single entry there.
+// See TEveDigitSet for an example.
 
 
 ClassImp(TEveSecondarySelectable);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveShape.cxx root/graf3d/eve/src/TEveShape.cxx
--- root-old/graf3d/eve/src/TEveShape.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveShape.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -28,10 +28,11 @@
 TEveShape::TEveShape(const char* n, const char* t) :
    TEveElementList(n, t),
    fFillColor(5),
-   fLineColor(3),
+   fLineColor(5),
    fLineWidth(1),
    fDrawFrame(kTRUE),
-   fHighlightFrame(kTRUE)
+   fHighlightFrame(kTRUE),
+   fMiniFrame(kTRUE)
 {
    // Constructor.
 
@@ -73,6 +74,7 @@
       fLineWidth = m->fLineWidth;
       fDrawFrame      = m->fDrawFrame;
       fHighlightFrame = m->fHighlightFrame;
+      fMiniFrame      = m->fMiniFrame;
    }
 
    TEveElementList::CopyVizParams(el);
@@ -210,3 +212,62 @@
 
    return N;
 }
+
+//==============================================================================
+
+//______________________________________________________________________________
+Bool_t TEveShape::IsBoxOrientationConsistentEv(const TEveVector box[8])
+{
+   // Checks if the first face normal is pointing into the other
+   // direction as the vector pointing towards the opposite face.
+   // This assumes standard box vertex arrangement.
+
+   TEveVector f1 = box[1] - box[0];
+   TEveVector f2 = box[3] - box[0];
+   TEveVector up = box[4] - box[0];
+
+   return up.Dot(f1.Cross(f2)) < 0;
+}
+
+//______________________________________________________________________________
+Bool_t TEveShape::IsBoxOrientationConsistentFv(const Float_t box[8][3])
+{
+   // Checks if the first face normal is pointing into the other
+   // direction as the vector pointing towards the opposite face.
+   // This assumes standard box vertex arrangement.
+
+   TEveVector b0(box[0]);
+   TEveVector f1(box[1]); f1 -= b0;
+   TEveVector f2(box[3]); f2 -= b0;
+   TEveVector up(box[4]); up -= b0;
+
+   return up.Dot(f1.Cross(f2)) < 0;
+}
+
+//______________________________________________________________________________
+void TEveShape::CheckAndFixBoxOrientationEv(TEveVector box[8])
+{
+   // Make sure box orientation is consistent with standard arrangement.
+
+   if ( ! IsBoxOrientationConsistentEv(box))
+   {
+      std::swap(box[1], box[3]);
+      std::swap(box[5], box[7]);
+   }
+}
+
+//______________________________________________________________________________
+void TEveShape::CheckAndFixBoxOrientationFv(Float_t box[8][3])
+{
+   // Make sure box orientation is consistent with standard arrangement.
+
+   if ( ! IsBoxOrientationConsistentFv(box))
+   {
+      std::swap(box[1][0], box[3][0]);
+      std::swap(box[1][1], box[3][1]);
+      std::swap(box[1][2], box[3][2]);
+      std::swap(box[5][0], box[7][0]);
+      std::swap(box[5][1], box[7][1]);
+      std::swap(box[5][2], box[7][2]);
+   }
+}
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveStraightLineSet.cxx root/graf3d/eve/src/TEveStraightLineSet.cxx
--- root-old/graf3d/eve/src/TEveStraightLineSet.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveStraightLineSet.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -75,6 +75,29 @@
 }
 
 //______________________________________________________________________________
+void
+TEveStraightLineSet::SetLine(int idx,
+                             Float_t x1, Float_t y1, Float_t z1,
+                             Float_t x2, Float_t y2, Float_t z2)
+{
+   // Set line vertices with given index.
+
+   Line_t* l = (Line_t*) fLinePlex.Atom(idx);
+
+   l->fV1[0] = x1; l->fV1[1] = y1; l->fV1[2] = z1;
+   l->fV2[0] = x2; l->fV2[1] = y2; l->fV2[2] = z2;
+}
+
+//______________________________________________________________________________
+void
+TEveStraightLineSet::SetLine(int idx, const TEveVector& p1, const TEveVector& p2)
+{
+   // Set line vertices with given index.
+
+   SetLine(idx, p1.fX, p1.fY, p1.fZ, p2.fX, p2.fY, p2.fZ);
+}
+
+//______________________________________________________________________________
 TEveStraightLineSet::Marker_t*
 TEveStraightLineSet::AddMarker(Float_t x, Float_t y, Float_t z, Int_t line_id)
 {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveViewer.cxx root/graf3d/eve/src/TEveViewer.cxx
--- root-old/graf3d/eve/src/TEveViewer.cxx	2010-10-27 18:44:04.000000000 +0200
+++ root/graf3d/eve/src/TEveViewer.cxx	2010-12-15 13:33:58.000000000 +0100
@@ -24,6 +24,7 @@
 #include "TGLEventHandler.h"
 
 #include "TApplication.h"
+#include "TEnv.h"
 #include "TSystem.h"
 namespace
 {
@@ -206,7 +207,10 @@
    cf->SetEditable(kFALSE);
    v->ToggleEditObject();
    v->DisableCloseMenuEntries();
-   v->EnableMenuBarHiding();
+   if (gEnv->GetValue("Eve.Viewer.HideMenus", 1) == 1)
+   {
+      v->EnableMenuBarHiding();
+   }
    SetGLViewer(v, v->GetFrame());
 
    if (stereo)
@@ -588,7 +592,10 @@
    TEveElement *el = dynamic_cast<TEveElement*>(obj);
    if (el && !el->IsPickable())
       el = 0;
+
+   void *qsender = gTQSender;
    gEve->GetHighlight()->UserPickedElement(el, kFALSE);
+   gTQSender = qsender;
 
    HandleTooltip();
 }
@@ -607,7 +614,10 @@
    TEveElement* el = dynamic_cast<TEveElement*>(obj);
    if (el && !el->IsPickable())
       el = 0;
+
+   void *qsender = gTQSender;
    gEve->GetHighlight()->UserRePickedElement(el);
+   gTQSender = qsender;
 
    HandleTooltip();
 }
@@ -626,7 +636,10 @@
    TEveElement* el = dynamic_cast<TEveElement*>(obj);
    if (el && !el->IsPickable())
       el = 0;
+
+   void *qsender = gTQSender;
    gEve->GetHighlight()->UserUnPickedElement(el);
+   gTQSender = qsender;
 
    HandleTooltip();
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLAnnotation.h root/graf3d/gl/inc/TGLAnnotation.h
--- root-old/graf3d/gl/inc/TGLAnnotation.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLAnnotation.h	2010-12-15 13:33:59.000000000 +0100
@@ -75,18 +75,27 @@
    TGLAnnotation(TGLViewerBase *parent, const char *text, Float_t posx, Float_t posy, TGLVector3 ref);
    virtual ~TGLAnnotation();
 
-   void SetTransparency(Char_t x) { fTransparency = x; }
-   Char_t GetTransparency() const { return fTransparency; }
-   void SetUseColorSet(Bool_t x)  { fUseColorSet = x; }
-   Bool_t GetUseColorSet() const  { return fUseColorSet; }
-   void SetBackColor(Color_t x)   { fBackColor = x; }
-   Color_t GetBackColor() const   { return fBackColor; }
-   void SetTextColor(Color_t x)   { fTextColor = x; }
-   Color_t GetTextColor() const   { return fTextColor; }
-   void SetTextSize(Float_t x)    { fTextSize = x; }
-   Float_t GetTextSize() const    { return fTextSize; }
-   void SetAllowClose(Bool_t x)   { fAllowClose = x; }
-   Bool_t GetAllowClose() const   { return fAllowClose;}
+   void  SetText(const TString& x)   { fText = x; }
+   const TString& GetText()    const { return fText; }
+
+   void    SetTransparency(Char_t x) { fTransparency = x; }
+   Char_t  GetTransparency()   const { return fTransparency; }
+
+   void    SetUseColorSet(Bool_t x)  { fUseColorSet = x; }
+   Bool_t  GetUseColorSet()    const { return fUseColorSet; }
+
+   void    SetBackColor(Color_t x)   { fBackColor = x; }
+   Color_t GetBackColor()      const { return fBackColor; }
+
+   void    SetTextColor(Color_t x)   { fTextColor = x; }
+   Color_t GetTextColor()      const { return fTextColor; }
+
+   void    SetTextSize(Float_t x)    { fTextSize = x; }
+   Float_t GetTextSize()       const { return fTextSize; }
+
+   void    SetAllowClose(Bool_t x)   { fAllowClose = x; }
+   Bool_t  GetAllowClose()     const { return fAllowClose; }
+
    TGLFont::ETextAlignH_e GetTextAlign() const { return fTextAlign; }
    void SetTextAlign(TGLFont::ETextAlignH_e a) { fTextAlign = a; }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLBoundingBox.h root/graf3d/gl/inc/TGLBoundingBox.h
--- root-old/graf3d/gl/inc/TGLBoundingBox.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLBoundingBox.h	2010-12-15 13:33:59.000000000 +0100
@@ -55,7 +55,7 @@
    // For axis aligned 2 verticies would suffice.
    // Rest could be calculated on demand - however speed more important
    // than memory considerations
-   std::vector<TGLVertex3> fVertex;     //! the 8 bounding box vertices
+   TGLVertex3              fVertex[8];  //! the 8 bounding box vertices
    Double_t                fVolume;     //! box volume - cached for speed
    Double_t                fDiagonal;   //! max box diagonal - cached for speed
    TGLVector3              fAxes[3];    //! box axes in global frame - cached for speed
@@ -107,7 +107,9 @@
    TGLVertex3 MaxAAVertex() const;
 
    // Multiple vertices accessors
-   const std::vector<TGLVertex3> & Vertices() const;           // All 8 box vertices
+   const TGLVertex3* Vertices() const;           // All 8 box vertices
+   Int_t             NumVertices() const { return 8; }
+
    enum EFace { kFaceLowX, kFaceHighX, kFaceLowY, kFaceHighY, kFaceLowZ, kFaceHighZ, kFaceCount };
    const std::vector<UInt_t> & FaceVertices(EFace face) const; // 4 box face vertices
 
@@ -154,7 +156,7 @@
 }
 
 //______________________________________________________________________________
-inline const std::vector<TGLVertex3> & TGLBoundingBox::Vertices() const
+inline const TGLVertex3* TGLBoundingBox::Vertices() const
 {
    return fVertex;
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLFaceSet.h root/graf3d/gl/inc/TGLFaceSet.h
--- root-old/graf3d/gl/inc/TGLFaceSet.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLFaceSet.h	2010-12-15 13:33:59.000000000 +0100
@@ -38,6 +38,7 @@
    virtual void DirectDraw(TGLRnrCtx & rnrCtx) const;
 
    void SetFromMesh(const RootCsg::TBaseMesh *m);
+   void CalculateNormals();
    void EnforceTriangles();
 
    std::vector<Double_t>& GetVertices() { return fVertices; }
@@ -49,10 +50,10 @@
    static void   SetEnforceTriangles(Bool_t e);
 
 private:
-   void GLDrawPolys()const;
-   Int_t CheckPoints(const Int_t *source, Int_t *dest)const;
+   void  GLDrawPolys() const;
+   Int_t CheckPoints(const Int_t *source, Int_t *dest) const;
+
    static Bool_t Eq(const Double_t *p1, const Double_t *p2);
-   void CalculateNormals();
 
    ClassDef(TGLFaceSet,0) // a faceset logical shape
 };
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLSAViewer.h root/graf3d/gl/inc/TGLSAViewer.h
--- root-old/graf3d/gl/inc/TGLSAViewer.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLSAViewer.h	2010-12-15 13:33:59.000000000 +0100
@@ -45,7 +45,7 @@
       kGLOrthoRotate, kGLOrthoDolly,
       kGLSaveEPS, kGLSavePDF, kGLSavePNG, kGLSaveGIF, kGLSaveAnimGIF,
       kGLSaveJPG, kGLSaveAS, kGLCloseViewer, kGLQuitROOT,
-      kGLEditObject };
+      kGLEditObject, kGLHideMenus };
 
 private:
    // GUI components
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLScenePad.h root/graf3d/gl/inc/TGLScenePad.h
--- root-old/graf3d/gl/inc/TGLScenePad.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLScenePad.h	2010-12-15 13:33:59.000000000 +0100
@@ -56,7 +56,7 @@
 
    TGLLogicalShape* AttemptDirectRenderer(TObject* id);
 
-   Bool_t         fSmartRefresh;   //! cache logicals during scene rebuilds, use TAtt3D time-stamp to determine if they are still valid
+   Bool_t         fSmartRefresh;   //! cache logicals during scene rebuilds
 
 public:
    TGLScenePad(TVirtualPad* pad);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLViewer.h root/graf3d/gl/inc/TGLViewer.h
--- root-old/graf3d/gl/inc/TGLViewer.h	2010-10-27 18:44:06.000000000 +0200
+++ root/graf3d/gl/inc/TGLViewer.h	2010-12-15 13:33:59.000000000 +0100
@@ -148,7 +148,7 @@
    TGLCameraOverlay  *fCameraOverlay; //! markup size of viewport in scene units
 
    Bool_t         fInitGL;         //! has GL been initialised?
-   Bool_t         fSmartRefresh;   //! cache logicals during scene rebuilds, use TAtt3D time-stamp to determine if they are still valid
+   Bool_t         fSmartRefresh;   //! cache logicals during scene rebuilds
 
    // Debug tracing (for scene rebuilds)
    Bool_t         fDebugMode;            //! debug mode (forced rebuild + draw scene/frustum/interest boxes)
@@ -280,6 +280,7 @@
    TGLCameraOverlay* GetCameraOverlay() const { return fCameraOverlay; }
    void SetCameraOverlay(TGLCameraOverlay* m) { fCameraOverlay = m; }
    TGLAutoRotator* GetAutoRotator();
+   void SetAutoRotator(TGLAutoRotator* ar);
 
    // Stereo
    Bool_t  GetStereo()               const { return fStereo; }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLBoundingBox.cxx root/graf3d/gl/src/TGLBoundingBox.cxx
--- root-old/graf3d/gl/src/TGLBoundingBox.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLBoundingBox.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -28,40 +28,35 @@
 ClassImp(TGLBoundingBox)
 
 //______________________________________________________________________________
-TGLBoundingBox::TGLBoundingBox() :
-   fVertex(8)
+TGLBoundingBox::TGLBoundingBox()
 {
    // Construct an empty bounding box
    SetEmpty();
 }
 
 //______________________________________________________________________________
-TGLBoundingBox::TGLBoundingBox(const TGLVertex3 vertex[8]) :
-   fVertex(8)
+TGLBoundingBox::TGLBoundingBox(const TGLVertex3 vertex[8])
 {
    // Construct a bounding box from provided 8 vertices
    Set(vertex);
 }
 
 //______________________________________________________________________________
-TGLBoundingBox::TGLBoundingBox(const Double_t vertex[8][3]) :
-   fVertex(8)
+TGLBoundingBox::TGLBoundingBox(const Double_t vertex[8][3])
 {
    // Construct a bounding box from provided 8 vertices
    Set(vertex);
 }
 
 //______________________________________________________________________________
-TGLBoundingBox::TGLBoundingBox(const TGLVertex3 & lowVertex, const TGLVertex3 & highVertex) :
-   fVertex(8)
+TGLBoundingBox::TGLBoundingBox(const TGLVertex3 & lowVertex, const TGLVertex3 & highVertex)
 {
    // Construct an global axis ALIGNED bounding box from provided low/high vertex pair
    SetAligned(lowVertex, highVertex);
 }
 
 //______________________________________________________________________________
-TGLBoundingBox::TGLBoundingBox(const TGLBoundingBox & other) :
-   fVertex(8)
+TGLBoundingBox::TGLBoundingBox(const TGLBoundingBox & other)
 {
    // Construct a bounding box as copy of existing one
    Set(other);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLCamera.cxx root/graf3d/gl/src/TGLCamera.cxx
--- root-old/graf3d/gl/src/TGLCamera.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLCamera.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -359,13 +359,13 @@
    if (face) {
       vertexCount = box.FaceVertices(*face).size();
    } else {
-      vertexCount = box.Vertices().size();
+      vertexCount = box.NumVertices();
    }
 
    for (UInt_t i = 0; i < vertexCount; i++)
    {
-      const TGLVertex3 & vertex = face ? box.Vertices().at(box.FaceVertices(*face).at(i)) :
-                                      box.Vertices().at(i);
+      const TGLVertex3 & vertex = face ? box.Vertex(box.FaceVertices(*face).at(i)) :
+                                         box.Vertex(i);
 
       gluProject(vertex.X(), vertex.Y(), vertex.Z(),
                  fModVM.CArr(), fProjM.CArr(), fViewport.CArr(),
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLFaceSet.cxx root/graf3d/gl/src/TGLFaceSet.cxx
--- root-old/graf3d/gl/src/TGLFaceSet.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLFaceSet.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -75,8 +75,9 @@
    }
 
    fPolyDesc.resize(descSize);
-   {//fix for scope
-   for (UInt_t numPol = 0, currInd = 0, j = 1; numPol < fNbPols; ++numPol) {
+
+   for (UInt_t numPol = 0, currInd = 0, j = 1; numPol < fNbPols; ++numPol)
+   {
       Int_t segmentInd = pols[j] + j;
       Int_t segmentCol = pols[j];
       Int_t s1 = pols[segmentInd];
@@ -119,12 +120,11 @@
       }
       j += segmentCol + 2;
    }
+
+   if (fgEnforceTriangles) {
+      EnforceTriangles();
    }
-   //if (fgEnforceTriangles) {
-   //   EnforceTriangles();
-   //} else {
-      CalculateNormals();
-      //}
+   CalculateNormals();
 }
 
 //______________________________________________________________________________
@@ -135,7 +135,6 @@
 
    UInt_t nv = mesh->NumberOfVertices();
    fVertices.reserve(3 * nv);
-   fNormals.resize(mesh->NumberOfPolys() * 3);
    UInt_t i;
 
    for (i = 0; i < nv; ++i) {
@@ -161,9 +160,8 @@
 
    if (fgEnforceTriangles) {
       EnforceTriangles();
-   } else {
-      CalculateNormals();
    }
+   CalculateNormals();
 }
 
 //______________________________________________________________________________
@@ -172,9 +170,8 @@
    // Use GLU tesselator to replace all polygons with N > 3 with triangles.
    // After this call polygon descriptions are changed.
    // New vertices are not expected -- exception is thrown if this is
-   // requested by the triangulator. Support for addin of new vertices can be
+   // requested by the triangulator. Support for adding of new vertices can be
    // provided.
-   // Normals are automatically recalculated at the end.
 
    class TriangleCollector
    {
@@ -305,8 +302,6 @@
 
    fPolyDesc.swap(tc.RefPolyDesc());
    fNbPols = tc.GetNTrianlges();
-
-   CalculateNormals();
 }
 
 //______________________________________________________________________________
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLLogicalShape.cxx root/graf3d/gl/src/TGLLogicalShape.cxx
--- root-old/graf3d/gl/src/TGLLogicalShape.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLLogicalShape.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -11,7 +11,6 @@
 #include "TGLIncludes.h"
 
 #include "TBuffer3D.h"
-#include "TAtt3D.h"
 #include "TClass.h"
 #include "TContextMenu.h"
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLObject.cxx root/graf3d/gl/src/TGLObject.cxx
--- root-old/graf3d/gl/src/TGLObject.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLObject.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -17,8 +17,6 @@
 #include "TBaseClass.h"
 #include "TList.h"
 #include "TString.h"
-#include "TAtt3D.h"
-#include "TAttBBox.h"
 
 //==============================================================================
 // TGLObject
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLSAViewer.cxx root/graf3d/gl/src/TGLSAViewer.cxx
--- root-old/graf3d/gl/src/TGLSAViewer.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLSAViewer.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -383,6 +383,7 @@
    //File/Camera/Help menus.
 
    fFileMenu = new TGPopupMenu(fFrame->GetClient()->GetDefaultRoot());
+   fFileMenu->AddEntry("&Hide Menus", kGLHideMenus);
    fFileMenu->AddEntry("&Edit Object", kGLEditObject);
    fFileMenu->AddSeparator();
    fFileMenu->AddEntry("&Close Viewer", kGLCloseViewer);
@@ -425,7 +426,7 @@
    fMenuBar = new TGMenuBar(fFrame);
    fMenuBar->AddPopup("&File", fFileMenu, new TGLayoutHints(kLHintsTop | kLHintsLeft, 0, 4, 0, 0));
    fMenuBar->AddPopup("&Camera", fCameraMenu, new TGLayoutHints(kLHintsTop | kLHintsLeft, 0, 4, 0, 0));
-   fMenuBar->AddPopup("&Help",    fHelpMenu,    new TGLayoutHints(kLHintsTop | kLHintsRight));
+   fMenuBar->AddPopup("&Help",   fHelpMenu,   new TGLayoutHints(kLHintsTop | kLHintsRight));
    fFrame->AddFrame(fMenuBar, new TGLayoutHints(kLHintsTop | kLHintsLeft | kLHintsExpandX, 0, 0, 1, 1));
    gVirtualX->SelectInput(fMenuBar->GetId(),
                           kKeyPressMask | kExposureMask | kPointerMotionMask
@@ -552,6 +553,8 @@
 
    fMenuHidingTimer = new TTimer;
    fMenuHidingTimer->Connect("Timeout()", "TGLSAViewer", this, "MenuHidingTimeout()");
+
+   fFileMenu->CheckEntry(kGLHideMenus);
 }
 
 //______________________________________________________________________________
@@ -571,8 +574,11 @@
    fFrame->HideFrame(fMenuBut);
    fFrame->Layout();
 
+   fMenuHidingTimer->TurnOff();
    delete fMenuHidingTimer;
    fMenuHidingTimer = 0;
+
+   fFileMenu->UnCheckEntry(kGLHideMenus);
 }
 
 //______________________________________________________________________________
@@ -617,6 +623,10 @@
 {
    // Reset the timer for menu-bar hiding.
 
+   // This happens, mysteriously.
+   if (fMenuHidingTimer == 0)
+      return;
+
    fMenuHidingTimer->TurnOff();
 
    fMenuHidingShowMenu = show_menu;
@@ -777,6 +787,12 @@
                SavePicture(file);
             }
             break;
+         case kGLHideMenus:
+            if (fHideMenuBar)
+               DisableMenuBarHiding();
+            else
+               EnableMenuBarHiding();
+            break;
          case kGLEditObject:
             ToggleEditObject();
             break;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLScene.cxx root/graf3d/gl/src/TGLScene.cxx
--- root-old/graf3d/gl/src/TGLScene.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLScene.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -926,7 +926,7 @@
          assert(kFALSE);
          continue;
       }
-      TGLBoundingBox box = physicalShape->BoundingBox();
+      const TGLBoundingBox& box = physicalShape->BoundingBox();
       if (physicalShapeIt == fPhysicalShapes.begin()) {
          xMin = box.XMin(); xMax = box.XMax();
          yMin = box.YMin(); yMax = box.YMax();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLScenePad.cxx root/graf3d/gl/src/TGLScenePad.cxx
--- root-old/graf3d/gl/src/TGLScenePad.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLScenePad.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -154,8 +154,7 @@
    }
    else if (obj->InheritsFrom(TAtt3D::Class()))
    {
-      //Since TH3's derived from TAtt3D, it should be checked here.
-      //printf("normal-painting %s / %s\n", obj->GetName(), obj->ClassName());
+      // Handle 3D primitives here.
       obj->Paint(opt);
    }
    else if (obj->InheritsFrom(TVirtualPad::Class()))
@@ -165,8 +164,6 @@
    else
    {
       // Handle 2D primitives here.
-      // printf("TGLScenePad::ObjectPaint skipping %p, %s, %s.\n",
-      //        obj, obj->GetName(), obj->ClassName());
       obj->Paint(opt);
    }
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLViewer.cxx root/graf3d/gl/src/TGLViewer.cxx
--- root-old/graf3d/gl/src/TGLViewer.cxx	2010-10-27 18:44:05.000000000 +0200
+++ root/graf3d/gl/src/TGLViewer.cxx	2010-12-15 13:33:59.000000000 +0100
@@ -30,7 +30,6 @@
 #include "TGLOutput.h"
 
 #include "TVirtualPad.h" // Remove when pad removed - use signal
-#include "TAtt3D.h"      // Remove when PadPaint delegated to PadScene.
 #include "TVirtualX.h"
 
 #include "TMath.h"
@@ -1800,6 +1799,15 @@
    return fAutoRotator;
 }
 
+//______________________________________________________________________________
+void TGLViewer::SetAutoRotator(TGLAutoRotator* ar)
+{
+   // Set the auto-rotator for this viewer. The old rotator is deleted.
+
+   delete fAutoRotator;
+   fAutoRotator = ar;
+}
+
 
 /**************************************************************************/
 // Guide methods
