diff -arupN fastjet-2.4.4.orig/include/fastjet/ClusterSequence.hh fastjet-2.4.4/include/fastjet/ClusterSequence.hh
--- fastjet-2.4.4.orig/include/fastjet/ClusterSequence.hh	2011-04-13 23:24:34.000000000 +0200
+++ fastjet-2.4.4/include/fastjet/ClusterSequence.hh	2012-03-27 11:43:16.000000000 +0200
@@ -56,6 +56,7 @@
 #include<string>
 #include<set>
 #include<cmath> // needed to get double std::abs(double)
+#include<algorithm>
 #include "fastjet/Error.hh"
 #include "fastjet/JetDefinition.hh"
 
diff -arupN fastjet-2.4.4.orig/include/fastjet/internal/ClusterSequence_N2.icc fastjet-2.4.4/include/fastjet/internal/ClusterSequence_N2.icc
--- fastjet-2.4.4.orig/include/fastjet/internal/ClusterSequence_N2.icc	2011-04-13 23:24:33.000000000 +0200
+++ fastjet-2.4.4/include/fastjet/internal/ClusterSequence_N2.icc	2012-03-27 12:52:12.000000000 +0200
@@ -106,7 +106,7 @@ template<class BJ> void ClusterSequence:
       // the larger of them == newtail then that ends up being jetA and 
       // the new jet that is added as jetB is inserted in a position that
       // has a future!
-      if (jetA < jetB) {swap(jetA,jetB);}
+      if (jetA < jetB) {std::swap(jetA,jetB);}
 
       int nn; // new jet index
       _do_ij_recombination_step(jetA->_jets_index, jetB->_jets_index, diJ_min, nn);
diff -arupN fastjet-2.4.4.orig/include/fastjet/NNH.hh fastjet-2.4.4/include/fastjet/NNH.hh
--- fastjet-2.4.4.orig/include/fastjet/NNH.hh	2011-04-13 23:24:33.000000000 +0200
+++ fastjet-2.4.4/include/fastjet/NNH.hh	2012-03-27 13:01:38.000000000 +0200
@@ -190,7 +190,7 @@ template<class BJ, class I> void NNH<BJ,
   // initialise the basic jet info 
   for (int i = 0; i< n; i++) {
     //jetA->init(jets[i], i);
-    init_jet(jetA, jets[i], i);
+    this->init_jet(jetA, jets[i], i);
     where_is[i] = jetA;
     jetA++; // move on to next entry of briefjets
   }
@@ -263,11 +263,11 @@ template<class BJ, class I> void NNH<BJ,
   // the larger of them == newtail then that ends up being jetA and 
   // the new jet that is added as jetB is inserted in a position that
   // has a future!
-  if (jetA < jetB) swap(jetA,jetB);
+  if (jetA < jetB) std::swap(jetA,jetB);
 
   // initialise jetB based on the new jet
   //jetB->init(jet, index);
-  init_jet(jetB, jet, index);
+  this->init_jet(jetB, jet, index);
   // and record its position (making sure we have the space)
   if (index >= int(where_is.size())) where_is.resize(2*index);
   where_is[jetB->index()] = jetB;
diff -arupN fastjet-2.4.4.orig/plugins/D0RunIICone/ILConeAlgorithm.hpp fastjet-2.4.4/plugins/D0RunIICone/ILConeAlgorithm.hpp
--- fastjet-2.4.4.orig/plugins/D0RunIICone/ILConeAlgorithm.hpp	2011-04-13 23:24:30.000000000 +0200
+++ fastjet-2.4.4/plugins/D0RunIICone/ILConeAlgorithm.hpp	2012-03-27 10:48:20.000000000 +0200
@@ -283,7 +283,7 @@ private:
 	  //std::cout << " is_stable: item y=" << (*tk)->y() << " phi=" << (*tk)->phi() << " RD2=" << RD2((*tk)->y(),(*tk)->phi(),Yst,PHIst) << " " << Yst-radius << " " << Yst+radius << endl;
 	  if(RD2((*tk)->y(),(*tk)->phi(),Yst,PHIst) <= radius2) 
 	    {
-	      addItem(*tk);
+	      this->addItem(*tk);
 	    }
 	}       
 #else
@@ -296,7 +296,7 @@ private:
 	    //std::cout << "     item " << (*tk)->y() << " " << (*tk)->phi() << " " << RD2((*tk)->y(),(*tk)->phi(),Yst,PHIst) << " " << Yst-radius << " " << Yst+radius << endl;
 	    if(RD2(((*tk).second)->y(),((*tk).second)->phi(),Yst,PHIst) <= radius2) 
 	      {
-		addItem((*tk).second);
+		this->addItem((*tk).second);
 	      }
 	  }
 	
@@ -309,7 +309,7 @@ private:
 	    if(RD2((*tk)->y(),(*tk)->phi(),Yst,PHIst) <= radius2) 
 	       {
 		 //cout << "add item to *tk" << endl;
-		addItem(*tk);
+		this->addItem(*tk);
 	      }
 	  }
 #endif
