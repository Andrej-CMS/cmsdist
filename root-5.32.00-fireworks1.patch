diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveElement.h root/graf3d/eve/inc/TEveElement.h
--- root-old/graf3d/eve/inc/TEveElement.h	2012-02-12 20:59:06.015916887 -0800
+++ root/graf3d/eve/inc/TEveElement.h	2012-02-15 19:54:10.218991655 -0800
@@ -338,6 +338,7 @@
 
    Bool_t IsPickable()    const { return fPickable; }
    void   SetPickable(Bool_t p) { fPickable = p; }
+   void   SetPickableRecursively(Bool_t p);
    
    virtual TEveElement* ForwardSelection();
    virtual TEveElement* ForwardEdit();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/inc/TEveScene.h root/graf3d/eve/inc/TEveScene.h
--- root-old/graf3d/eve/inc/TEveScene.h	2012-02-12 20:59:06.021916890 -0800
+++ root/graf3d/eve/inc/TEveScene.h	2012-02-12 21:14:33.070004310 -0800
@@ -41,6 +41,7 @@
 
 public:
    TEveScene(const char* n="TEveScene", const char* t="");
+   TEveScene(TGLScenePad* gl_scene, const char* n="TEveScene", const char* t="");
    virtual ~TEveScene();
 
    virtual void CollectSceneParents(List_t& scenes);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCalo2DGL.cxx root/graf3d/eve/src/TEveCalo2DGL.cxx
--- root-old/graf3d/eve/src/TEveCalo2DGL.cxx	2012-02-12 20:59:05.899916877 -0800
+++ root/graf3d/eve/src/TEveCalo2DGL.cxx	2012-02-20 12:46:41.286071492 -0800
@@ -386,11 +386,13 @@
          }
 
          // reference phi sum
-         for (Int_t s = 0; s < nSlices; ++s) {
+         for (Int_t s = 0; s < nSlices; ++s)
+         {
             sliceValsUpRef[s] = 0; sliceValsLowRef[s] = 0;
          }
          TEveCaloData::vCellId_t& cidsRef = *(fM->fCellLists[etaBin]);
-         for (TEveCaloData::vCellId_i i=cidsRef.begin(); i!=cidsRef.end(); i++) {
+         for (TEveCaloData::vCellId_i i=cidsRef.begin(); i!=cidsRef.end(); i++)
+         {
             data->GetCellData(*i, cellData);
             if (cellData.Phi() > 0)
                sliceValsUpRef [i->fSlice] += cellData.Value(fM->fPlotEt)*(*i).fFraction;
@@ -462,14 +464,12 @@
    static const TEveException eh("TEveCalo2DGL::DrawHighlight ");
 
    if (fM->fData->GetCellsSelected().empty() && fM->fData->GetCellsHighlighted().empty())
+   {
       return;
+   }
 
-   glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT |GL_POLYGON_BIT );
-   glDisable(GL_LIGHTING);
-   glDisable(GL_CULL_FACE);
-   glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+   TGLCapabilitySwitch cull_off (GL_CULL_FACE, kFALSE);
 
-   TGLUtil::LineWidth(2);
    TGLUtil::LockColor();
    try
    {
@@ -484,25 +484,19 @@
       }
       if (!fM->fData->GetCellsSelected().empty())
       {
-         Float_t dr[2];
-         glGetFloatv(GL_DEPTH_RANGE,dr);
          glColor4ubv(rnrCtx.ColorSet().Selection(1).CArr());
-         glDepthRange(dr[0], 0.8*dr[1]);
          if (IsRPhi())
             DrawRPhiHighlighted(fM->fCellListsSelected);
          else
             DrawRhoZHighlighted(fM->fCellListsSelected);
 
-         glDepthRange(dr[0], dr[1]);
       }
    }
    catch (TEveException& exc)
    {
       Warning(eh, "%s", exc.what());
    }
-
    TGLUtil::UnlockColor();
-   glPopAttrib();
 }
 
 //______________________________________________________________________________
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCalo3DGL.cxx root/graf3d/eve/src/TEveCalo3DGL.cxx
--- root-old/graf3d/eve/src/TEveCalo3DGL.cxx	2012-02-12 20:59:05.889916877 -0800
+++ root/graf3d/eve/src/TEveCalo3DGL.cxx	2012-02-15 19:54:03.969991066 -0800
@@ -610,6 +610,7 @@
       DrawSelectedCells(fM->fData->GetCellsSelected());
       glDepthRange(dr[0], dr[1]);
    }
+
    TGLUtil::UnlockColor();
    glPopAttrib();
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveCaloLegoGL.cxx root/graf3d/eve/src/TEveCaloLegoGL.cxx
--- root-old/graf3d/eve/src/TEveCaloLegoGL.cxx	2012-02-12 20:59:05.896916877 -0800
+++ root/graf3d/eve/src/TEveCaloLegoGL.cxx	2012-02-15 19:54:41.529994606 -0800
@@ -957,24 +957,21 @@
    }
    else
    {
-      Float_t x, y;
-      if (!rnrCtx.HighlightOutline())
-      {
-         Float_t maxv = 0;
-         bws = 1e5;
-         for (vCell2D_i i = fCells2D.begin(); i != fCells2D.end(); ++i)
-         {
-            if (i->MinSize() < bws)   bws  = i->MinSize();
-            if (i->fSumVal   > maxv)  maxv = i->fSumVal;
-         }
-         bws   *= 0.5f;
-         logMax = TMath::Log10(maxv + 1);
-         fValToPixel =  bws/logMax;
-      }
+      Float_t maxv = 0;
+      bws = 1e5;
+      for (vCell2D_i i = fCells2D.begin(); i != fCells2D.end(); ++i)
+      {
+         if (i->MinSize() < bws)   bws  = i->MinSize();
+         if (i->fSumVal   > maxv)  maxv = i->fSumVal;
+      }
+      bws   *= 0.5f;
+      logMax = TMath::Log10(maxv + 1);
+      fValToPixel = bws / logMax;
 
-      // special draw for name stack
       if (rnrCtx.SecSelection())
       {
+         // Special draw for name stack.
+
          for (vCell2D_i i = cells2D.begin(); i != cells2D.end(); ++i)
          {
             glLoadName(i->fMaxSlice);
@@ -992,8 +989,10 @@
          }
       }
       else
-      {// optimised draw without name stack
-         if (!rnrCtx.HighlightOutline())
+      {
+         // Optimised draw without name stack.
+
+         if ( ! rnrCtx.Highlight())
          {
             glBegin(GL_POINTS);
             for (vCell2D_i i = cells2D.begin(); i != cells2D.end(); ++i)
@@ -1010,8 +1009,8 @@
          {
             TGLUtil::ColorTransparency(fM->fData->GetSliceColor(i->fMaxSlice), fM->fData->GetSliceTransparency(i->fMaxSlice));
             Float_t bw = fValToPixel*TMath::Log10(i->fSumVal+1);
-            x = i->X();
-            y = i->Y();
+            Float_t x = i->X();
+            Float_t y = i->Y();
             Float_t z = fM->GetHasFixedHeightIn2DMode() ? baseOffset : i->fSumVal;
             glVertex3f(x - bw, y - bw, z);
             glVertex3f(x + bw, y - bw, z);
@@ -1057,7 +1056,7 @@
 
    // text
    if (fCurrentPixelsPerBin > fM->fDrawNumberCellPixels &&
-       (rnrCtx.Selection() || rnrCtx.Highlight() || rnrCtx.HighlightOutline()) == kFALSE)
+       ! rnrCtx.Selection() && ! rnrCtx.Highlight())
    {
       TGLUtil::Color(rnrCtx.ColorSet().Markup().GetColorIndex());
       TGLFont font;
@@ -1090,8 +1089,6 @@
       return;
    }
 
-   glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT | GL_POLYGON_BIT );
-
    // modelview matrix
    glPushMatrix();
    Float_t sx, sy, sz;
@@ -1099,11 +1096,15 @@
    glScalef(sx, sy, sz);
    glTranslatef(-fM->GetEta(), -fM->fPhi, 0);
 
-   glDisable(GL_LIGHTING);
-   glDisable(GL_CULL_FACE);
-   glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+   if (fCells3D)
+   {
+      glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT | GL_POLYGON_BIT);
+      glDisable(GL_LIGHTING);
+      glDisable(GL_CULL_FACE);
+      glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+      TGLUtil::LineWidth(2);
+   }
 
-   TGLUtil::LineWidth(2);
    TGLUtil::LockColor();
    if (!fM->fData->GetCellsHighlighted().empty()) 
    {
@@ -1112,17 +1113,17 @@
    }
    if (!fM->fData->GetCellsSelected().empty())
    {
-      Float_t dr[2];
-      glGetFloatv(GL_DEPTH_RANGE,dr);
       glColor4ubv(rnrCtx.ColorSet().Selection(1).CArr());
-      glDepthRange(dr[0], 0.8*dr[1]);
       DrawSelectedCells(rnrCtx, fM->fData->GetCellsSelected());
-      glDepthRange(dr[0], dr[1]);
    }
-
    TGLUtil::UnlockColor();
+
+   if (fCells3D)
+   {
+      glPopAttrib();
+   }
+
    glPopMatrix();
-   glPopAttrib();
 }
 
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveDigitSetGL.cxx root/graf3d/eve/src/TEveDigitSetGL.cxx
--- root-old/graf3d/eve/src/TEveDigitSetGL.cxx	2012-02-12 20:59:05.883916876 -0800
+++ root/graf3d/eve/src/TEveDigitSetGL.cxx	2012-02-15 19:54:01.607990842 -0800
@@ -34,7 +34,7 @@
 {
    // Set color for rendering of the specified digit.
 
-   TEveDigitSet &DS = * (TEveDigitSet*)fExternalObj;
+   TEveDigitSet &DS = * (TEveDigitSet*) fExternalObj;
 
    if (DS.fSingleColor)
    {
@@ -95,9 +95,6 @@
 
    if (AlwaysSecondarySelect())
    {
-      Float_t dr[2];
-      glGetFloatv(GL_DEPTH_RANGE,dr);
-
       if ( ! DS.RefHighlightedSet().empty())
       {
          fHighlightSet = & DS.RefHighlightedSet();
@@ -105,10 +102,8 @@
       }
       if ( ! DS.RefSelectedSet().empty())
       {
-         glDepthRange(dr[0], 0.8*dr[1]);
          fHighlightSet = & DS.RefSelectedSet();
          TGLObject::DrawHighlight(rnrCtx, pshp, 1);
-         glDepthRange(dr[0], dr[1]);
       }
       fHighlightSet = 0;
    }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveElement.cxx root/graf3d/eve/src/TEveElement.cxx
--- root-old/graf3d/eve/src/TEveElement.cxx	2012-02-12 20:59:05.890916877 -0800
+++ root/graf3d/eve/src/TEveElement.cxx	2012-02-15 19:54:05.669991226 -0800
@@ -1894,6 +1894,18 @@
 /******************************************************************************/
 
 //______________________________________________________________________________
+void TEveElement::SetPickableRecursively(Bool_t p)
+{
+   // Set pickable state on the element and all its children.
+
+   fPickable = p;
+   for (List_i i=fChildren.begin(); i!=fChildren.end(); ++i)
+   {
+      (*i)->SetPickableRecursively(p);
+   }
+}
+
+//______________________________________________________________________________
 TEveElement* TEveElement::ForwardSelection()
 {
    // Returns element to be selected on click.
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveGeoNodeEditor.cxx root/graf3d/eve/src/TEveGeoNodeEditor.cxx
--- root-old/graf3d/eve/src/TEveGeoNodeEditor.cxx	2012-02-12 20:59:05.900916878 -0800
+++ root/graf3d/eve/src/TEveGeoNodeEditor.cxx	2012-02-12 21:14:02.554001432 -0800
@@ -170,7 +170,7 @@
    fVisLevel->SetShowSlider(kFALSE);
    fVisLevel->SetNELength(4);
    fVisLevel->Build();
-   fVisLevel->SetLimits(0, 10, 10, TGNumberFormat::kNESInteger);
+   fVisLevel->SetLimits(0, 30, 31, TGNumberFormat::kNESInteger);
    fVisLevel->SetToolTip("Level (depth) to which the geometry is traversed.\nWhen zero, maximum number of nodes to draw can be specified.");
    fVisLevel->Connect("ValueSet(Double_t)", "TEveGeoTopNodeEditor", this, "DoVisLevel()");
    AddFrame(fVisLevel, new TGLayoutHints(kLHintsTop, 1, 1, 1, 1));
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx root/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx
--- root-old/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx	2012-02-12 20:59:05.888916876 -0800
+++ root/graf3d/eve/src/TEvePolygonSetProjectedGL.cxx	2012-02-16 14:13:22.408210851 -0800
@@ -78,6 +78,8 @@
 
    if (fM->fPols.size() == 0) return;
 
+   Bool_t done_p = kFALSE;
+
    if (fM->GetMiniFrame())
    {
       std::map<Edge_t, Int_t> edges;
@@ -99,11 +101,13 @@
          {
             glVertex3fv(fM->fPnts[i->first.fI].Arr());
             glVertex3fv(fM->fPnts[i->first.fJ].Arr());
+            done_p = kTRUE;
          }
       }
       glEnd();
    }
-   else
+
+   if ( ! done_p)
    {
       for (TEvePolygonSetProjected::vpPolygon_ci i = fM->fPols.begin();
            i != fM->fPols.end(); ++i)
@@ -133,11 +137,12 @@
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    glDisable(GL_CULL_FACE);
 
-   fMultiColor = (fM->fDrawFrame && fM->fFillColor != fM->fLineColor);
+   // This tells TGLObject we don't want display-lists in some cases.
+   fMultiColor = fM->fDrawFrame;
 
    // polygons
    glEnable(GL_POLYGON_OFFSET_FILL);
-   glPolygonOffset(1.0f,1.0f);
+   glPolygonOffset(1, 1);
    GLUtesselator *tessObj = TGLUtil::GetDrawTesselator3fv();
 
    TEveVector* pnts = fM->fPnts;
@@ -160,9 +165,9 @@
       {
          gluBeginPolygon(tessObj);
          gluNextContour(tessObj, (GLenum)GLU_UNKNOWN);
-         glNormal3f(0., 0., 1.);
+         glNormal3f(0, 0, 1);
          Double_t coords[3];
-         coords[2] = 0.;
+         coords[2] = 0;
          for (Int_t k = 0; k < pntsN; ++k)
          {
             vi = (*i).fPnts[k];
@@ -192,52 +197,19 @@
 {
    // Draw polygons in highlight mode.
 
-   // XXXX to support highlight AND selection ...
    if (lvl < 0) lvl = pshp->GetSelected();
 
+   glColor4ubv(rnrCtx.ColorSet().Selection(lvl).CArr());
+   TGLUtil::LockColor();
+
    if (fM->GetHighlightFrame())
    {
-      glPushAttrib(GL_ENABLE_BIT | GL_LINE_BIT);
-      glDisable(GL_LIGHTING);
-      glEnable(GL_LINE_SMOOTH);
-
-      glColor4ubv(rnrCtx.ColorSet().Selection(pshp->GetSelected()).CArr());
-
-      const TGLRect& vp = rnrCtx.RefCamera().RefViewport();
-      Int_t inner[4][2] = { { 0,-1}, { 1, 0}, { 0, 1}, {-1, 0} };
-      Int_t outer[8][2] = { {-1,-1}, { 1,-1}, { 1, 1}, {-1, 1},
-                            { 0,-2}, { 2, 0}, { 0, 2}, {-2, 0} };
-
-      rnrCtx.SetHighlightOutline(kTRUE);
-      TGLUtil::LockColor();
-      Int_t first_outer = (rnrCtx.CombiLOD() == TGLRnrCtx::kLODHigh) ? 0 : 4;
-      for (int i = first_outer; i < 8; ++i)
-      {
-         glViewport(vp.X() + outer[i][0], vp.Y() + outer[i][1], vp.Width(), vp.Height());
-         DrawOutline();
-      }
-      TGLUtil::UnlockColor();
-      rnrCtx.SetHighlightOutline(kFALSE);
-
-      TGLUtil::Color(fM->fLineColor);
-      for (int i = 0; i < 4; ++i)
-      {
-         glViewport(vp.X() + inner[i][0], vp.Y() + inner[i][1], vp.Width(), vp.Height());
-         DrawOutline();
-      }
-      glViewport(vp.X(), vp.Y(), vp.Width(), vp.Height());
-
-      pshp->SetupGLColors(rnrCtx);
-      Float_t dr[2];
-      glGetFloatv(GL_DEPTH_RANGE,dr);
-      glDepthRange(dr[0], 0.5*dr[1]);
       DrawOutline();
-      glDepthRange(dr[0], dr[1]);
-
-      glPopAttrib();
    }
    else
    {
-      TGLLogicalShape::DrawHighlight(rnrCtx, pshp);
+      Draw(rnrCtx);
    }
+
+   TGLUtil::UnlockColor();
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveQuadSetGL.cxx root/graf3d/eve/src/TEveQuadSetGL.cxx
--- root-old/graf3d/eve/src/TEveQuadSetGL.cxx	2012-02-12 20:59:05.873916875 -0800
+++ root/graf3d/eve/src/TEveQuadSetGL.cxx	2012-02-15 19:54:00.505990739 -0800
@@ -133,7 +133,6 @@
 
    switch (mQ.fQuadType)
    {
-
       case TEveQuadSet::kQT_FreeQuad:
       {
          Float_t e1[3], e2[3], normal[3];
@@ -467,7 +466,6 @@
 
    switch (mQ.fQuadType)
    {
-
       case TEveQuadSet::kQT_HexagonXY:
       {
          while (qi.next()) {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveScene.cxx root/graf3d/eve/src/TEveScene.cxx
--- root-old/graf3d/eve/src/TEveScene.cxx	2012-02-12 20:59:05.866916874 -0800
+++ root/graf3d/eve/src/TEveScene.cxx	2012-02-12 21:14:31.270004139 -0800
@@ -60,6 +60,25 @@
 }
 
 //______________________________________________________________________________
+TEveScene::TEveScene(TGLScenePad* gl_scene, const char* n, const char* t) :
+   TEveElementList(n, t),
+   fPad    (0),
+   fGLScene(gl_scene),
+   fChanged      (kFALSE),
+   fSmartRefresh (kTRUE),
+   fHierarchical (kFALSE)
+{
+   // Constructor.
+
+   fPad = new TEvePad;
+   fPad->GetListOfPrimitives()->Add(this);
+   fGLScene->SetPad(fPad);
+   fGLScene->SetName(n);
+   fGLScene->SetAutoDestruct(kFALSE);
+   fGLScene->SetSmartRefresh(kTRUE);
+}
+
+//______________________________________________________________________________
 TEveScene::~TEveScene()
 {
    // Destructor.
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveShape.cxx root/graf3d/eve/src/TEveShape.cxx
--- root-old/graf3d/eve/src/TEveShape.cxx	2012-02-12 20:59:05.875916875 -0800
+++ root/graf3d/eve/src/TEveShape.cxx	2012-02-15 20:51:46.963317620 -0800
@@ -31,7 +31,7 @@
    fLineColor(5),
    fLineWidth(1),
    fDrawFrame(kTRUE),
-   fHighlightFrame(kTRUE),
+   fHighlightFrame(kFALSE),
    fMiniFrame(kTRUE)
 {
    // Constructor.
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/eve/src/TEveTriangleSet.cxx root/graf3d/eve/src/TEveTriangleSet.cxx
--- root-old/graf3d/eve/src/TEveTriangleSet.cxx	2012-02-12 20:59:05.871916875 -0800
+++ root/graf3d/eve/src/TEveTriangleSet.cxx	2012-02-12 21:13:49.087000159 -0800
@@ -164,24 +164,32 @@
    }
 
    Int_t nv, nt;
-   if (fscanf(f, "%d %d", &nv, &nt) != 2)
+   if (fscanf(f, "%d %d", &nv, &nt) != 2) {
+      fclose(f);
       throw kEH + "Reading nv, nt failed.";
-   if (nv < 0 || nt < 0)
-      throw kEH + "Negative number of vertices / triangles specified.";
+   }
 
+   if (nv < 0 || nt < 0) {
+      fclose(f);
+      throw kEH + "Negative number of vertices / triangles specified.";
+   }
 
    TEveTriangleSet* ts = new TEveTriangleSet(nv, nt);
 
    Float_t *vtx = ts->Vertex(0);
    for (Int_t i=0; i<nv; ++i, vtx+=3) {
-      if (fscanf(f, "%f %f %f", &vtx[0], &vtx[1], &vtx[2]) != 3)
+      if (fscanf(f, "%f %f %f", &vtx[0], &vtx[1], &vtx[2]) != 3) {
+         fclose(f);
          throw kEH + TString::Format("Reading vertex data %d failed.", i);
+      }
     }
 
    Int_t *tngl = ts->Triangle(0);
    for (Int_t i=0; i<nt; ++i, tngl+=3) {
-      if (fscanf(f, "%d %d %d", &tngl[0], &tngl[1], &tngl[2]) != 3)
+      if (fscanf(f, "%d %d %d", &tngl[0], &tngl[1], &tngl[2]) != 3) {
+         fclose(f);
          throw kEH + TString::Format("Reading triangle data %d failed.", i);
+      }
    }
 
    fclose(f);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLRnrCtx.h root/graf3d/gl/inc/TGLRnrCtx.h
--- root-old/graf3d/gl/inc/TGLRnrCtx.h	2012-02-12 20:59:06.272916912 -0800
+++ root/graf3d/gl/inc/TGLRnrCtx.h	2012-02-12 21:15:18.892008630 -0800
@@ -81,6 +81,13 @@
       kSSLEnd
    };
 
+   enum ESelectabilityOfTransparents
+   {
+      kIfNoOpaques = 0,
+      kIfClosest,
+      kNever
+   };
+
 private:
    TGLRnrCtx(const TGLRnrCtx&);            // Not implemented
    TGLRnrCtx& operator=(const TGLRnrCtx&); // Not implemented
@@ -120,8 +127,9 @@
    // Highlight / Selection stuff
    Bool_t          fHighlight;        // True when in highlight.
    Bool_t          fHighlightOutline; // True when in highlight-outline.
-   Bool_t          fSelection;
-   Bool_t          fSecSelection;
+   Bool_t          fSelection;        // True when in selection.
+   Bool_t          fSecSelection;     // True when in secondary selection.
+   Short_t         fSelectTransparents;
    Int_t           fPickRadius;
    TGLRect        *fPickRectangle;
    TGLSelectBuffer*fSelectBuffer;
@@ -163,7 +171,6 @@
    void SetCamera   (TGLCamera*     c) { fCamera = c; }
    void SetSceneInfo(TGLSceneInfo* si) { fSceneInfo = si; }
 
-
    // Draw LOD, style, clip, rnr-pass
    Short_t ViewerLOD()   const         { return fViewerLOD; }
    void    SetViewerLOD(Short_t LOD)   { fViewerLOD = LOD;  }
@@ -211,23 +218,24 @@
    Bool_t   IsStopwatchRunning() const { return fIsRunning; }
    Bool_t   HasStopwatchTimedOut();
 
-   // Highlight / Selection stuff
+   // Highlight / Selection state during rendering
    Bool_t  Highlight()    const           { return fHighlight;      }
    void    SetHighlight(Bool_t hil)       { fHighlight = hil;       }
    Bool_t  HighlightOutline() const       { return fHighlightOutline; }
    void    SetHighlightOutline(Bool_t ho) { fHighlightOutline = ho;   }
-
    Bool_t  Selection()    const           { return fSelection;      }
    void    SetSelection(Bool_t sel)       { fSelection = sel;       }
    Bool_t  SecSelection() const           { return fSecSelection;   }
    void    SetSecSelection(Bool_t secSel) { fSecSelection = secSel; }
-   // Low-level getters
+   // Highlight / selection parameters
+   Short_t SelectTransparents()        const { return fSelectTransparents; }
+   void    SetSelectTransparents(Short_t st) { fSelectTransparents = st;   }
    TGLRect         * GetPickRectangle();
    Int_t             GetPickRadius();
    TGLSelectBuffer * GetSelectBuffer() const { return fSelectBuffer; }
-   // Composed operations
-   void      BeginSelection(Int_t x, Int_t y, Int_t r=3);
-   void      EndSelection  (Int_t glResult);
+   // Selection setup / end
+   void    BeginSelection(Int_t x, Int_t y, Int_t r=3);
+   void    EndSelection  (Int_t glResult);
 
    void         PushColorSet();
    TGLColorSet& ColorSet();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLScene.h root/graf3d/gl/inc/TGLScene.h
--- root-old/graf3d/gl/inc/TGLScene.h	2012-02-12 20:59:06.264916913 -0800
+++ root/graf3d/gl/inc/TGLScene.h	2012-02-15 19:54:23.006992862 -0800
@@ -157,15 +157,21 @@
 
 
    // Rendering
-   virtual void PreDraw   (TGLRnrCtx& rnrCtx);
-   // virtual void PreRender (TGLRnrCtx& rnrCtx);
-   // virtual void Render    (TGLRnrCtx& rnrCtx);
-   virtual void RenderOpaque    (TGLRnrCtx& rnrCtx);
-   virtual void RenderTransp    (TGLRnrCtx& rnrCtx);
-   virtual void RenderSelOpaque (TGLRnrCtx& rnrCtx);
-   virtual void RenderSelTransp (TGLRnrCtx& rnrCtx);
+   virtual void PreDraw        (TGLRnrCtx& rnrCtx);
+   // virtual void PreRender   (TGLRnrCtx& rnrCtx);
+   // virtual void Render      (TGLRnrCtx& rnrCtx);
+   virtual void RenderOpaque   (TGLRnrCtx& rnrCtx);
+   virtual void RenderTransp   (TGLRnrCtx& rnrCtx);
+   virtual void RenderSelOpaque(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelTransp(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx);
+
+   virtual void RenderHighlight(TGLRnrCtx&           rnrCtx,
+                                DrawElementPtrVec_t& elVec);
+
    // virtual void PostRender(TGLRnrCtx& rnrCtx);
-   virtual void PostDraw  (TGLRnrCtx& rnrCtx);
+   virtual void PostDraw       (TGLRnrCtx& rnrCtx);
 
    virtual void RenderAllPasses(TGLRnrCtx&           rnrCtx,
                                 DrawElementPtrVec_t& elVec,
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLSceneBase.h root/graf3d/gl/inc/TGLSceneBase.h
--- root-old/graf3d/gl/inc/TGLSceneBase.h	2012-02-12 20:59:06.269916912 -0800
+++ root/graf3d/gl/inc/TGLSceneBase.h	2012-02-15 19:54:24.095992965 -0800
@@ -90,15 +90,17 @@
    virtual void          LodifySceneInfo(TGLRnrCtx& ctx);
 
    // Rendering
-   virtual void PreDraw   (TGLRnrCtx & rnrCtx);
-   virtual void PreRender (TGLRnrCtx & rnrCtx);
-   virtual void Render    (TGLRnrCtx & rnrCtx);
-   virtual void RenderOpaque    (TGLRnrCtx & rnrCtx);
-   virtual void RenderTransp    (TGLRnrCtx & rnrCtx);
-   virtual void RenderSelOpaque (TGLRnrCtx & rnrCtx);
-   virtual void RenderSelTransp (TGLRnrCtx & rnrCtx);
-   virtual void PostRender(TGLRnrCtx & rnrCtx);
-   virtual void PostDraw  (TGLRnrCtx & rnrCtx);
+   virtual void PreDraw   (TGLRnrCtx& rnrCtx);
+   virtual void PreRender (TGLRnrCtx& rnrCtx);
+   virtual void Render    (TGLRnrCtx& rnrCtx);
+   virtual void RenderOpaque   (TGLRnrCtx& rnrCtx);
+   virtual void RenderTransp   (TGLRnrCtx& rnrCtx);
+   virtual void RenderSelOpaque(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelTransp(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx);
+   virtual void RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx);
+   virtual void PostRender(TGLRnrCtx& rnrCtx);
+   virtual void PostDraw  (TGLRnrCtx& rnrCtx);
 
    virtual TGLLogicalShape* FindLogical(TObject*) const { return 0; }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLScenePad.h root/graf3d/gl/inc/TGLScenePad.h
--- root-old/graf3d/gl/inc/TGLScenePad.h	2012-02-12 20:59:06.257916912 -0800
+++ root/graf3d/gl/inc/TGLScenePad.h	2012-02-12 21:14:56.912006563 -0800
@@ -65,7 +65,7 @@
    virtual ~TGLScenePad() {}
 
    TVirtualPad* GetPad() const { return fPad; }
-   // void SetPad(TVirtualPad* p) { fPad = p; /* also need to drop contents */ }
+   void SetPad(TVirtualPad* p) { fPad = p; }
 
    // Histo import and Sub-pad traversal
    void AddHistoPhysical(TGLLogicalShape* log, const Float_t *histColor = 0);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLSelectRecord.h root/graf3d/gl/inc/TGLSelectRecord.h
--- root-old/graf3d/gl/inc/TGLSelectRecord.h	2012-02-12 20:59:06.261916910 -0800
+++ root/graf3d/gl/inc/TGLSelectRecord.h	2012-02-12 21:14:59.081006761 -0800
@@ -17,6 +17,7 @@
 class TObject;
 class TGLSceneInfo;
 class TGLPhysicalShape;
+class TGLLogicalShape;
 class TGLOverlayElement;
 
 /**************************************************************************/
@@ -81,6 +82,7 @@
    Bool_t            fTransparent;
    TGLSceneInfo     *fSceneInfo; // SceneInfo
    TGLPhysicalShape *fPhysShape; // PhysicalShape, if applicable
+   TGLLogicalShape  *fLogShape;  // LogicalShape, if applicable
    TObject          *fObject;    // Master TObject, if applicable
    void             *fSpecific;  // Scene specific, if applicable
    Bool_t            fMultiple;  // Mutliple selection requested (set by event-handler).
@@ -102,6 +104,7 @@
    Bool_t             GetTransparent() const { return fTransparent; }
    TGLSceneInfo     * GetSceneInfo()   const { return fSceneInfo; }
    TGLPhysicalShape * GetPhysShape()   const { return fPhysShape; }
+   TGLLogicalShape  * GetLogShape()    const { return fLogShape; }
    TObject          * GetObject()      const { return fObject; }
    void             * GetSpecific()    const { return fSpecific; }
    Bool_t             GetMultiple()    const { return fMultiple; }
@@ -112,6 +115,7 @@
    void SetTransparent(Bool_t t)               { fTransparent = t; }
    void SetSceneInfo  (TGLSceneInfo* si)       { fSceneInfo = si; }
    void SetPhysShape  (TGLPhysicalShape* pshp) { fPhysShape = pshp; }
+   void SetLogShape   (TGLLogicalShape* lshp)  { fLogShape = lshp; }
    void SetObject     (TObject* obj)           { fObject = obj; }
    void SetSpecific   (void* spec)             { fSpecific = spec; }
    void SetMultiple   (Bool_t multi)           { fMultiple = multi; }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLUtil.h root/graf3d/gl/inc/TGLUtil.h
--- root-old/graf3d/gl/inc/TGLUtil.h	2012-02-12 20:59:06.271916911 -0800
+++ root/graf3d/gl/inc/TGLUtil.h	2012-02-12 21:14:18.421002928 -0800
@@ -950,7 +950,7 @@
    virtual ~TGLUtil() {}
 
    // Error checking
-   static void   CheckError(const char * loc);
+   static Int_t  CheckError(const char * loc);
 
    // Polygon tesselator for direct drawing
    static GLUtesselator* GetDrawTesselator3fv();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLViewer.h root/graf3d/gl/inc/TGLViewer.h
--- root-old/graf3d/gl/inc/TGLViewer.h	2012-02-12 20:59:06.254916912 -0800
+++ root/graf3d/gl/inc/TGLViewer.h	2012-02-12 21:14:55.828006457 -0800
@@ -308,6 +308,7 @@
    // Request methods post cross thread request via TROOT::ProcessLineFast().
    void RequestDraw(Short_t LOD = TGLRnrCtx::kLODMed); // Cross thread draw request
    virtual void PreRender();
+   virtual void Render();
    virtual void PostRender();
    void DoDraw(Bool_t swap_buffers=kTRUE);
    void DoDrawMono(Bool_t swap_buffers);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/inc/TGLViewerBase.h root/graf3d/gl/inc/TGLViewerBase.h
--- root-old/graf3d/gl/inc/TGLViewerBase.h	2012-02-12 20:59:06.259916911 -0800
+++ root/graf3d/gl/inc/TGLViewerBase.h	2012-02-15 19:54:21.911992758 -0800
@@ -130,6 +130,9 @@
    virtual void Render();
    virtual void RenderNonSelected();
    virtual void RenderSelected();
+   virtual void RenderSelectedForHighlight();
+   virtual void RenderOpaque(Bool_t rnr_non_selected=kTRUE, Bool_t rnr_selected=kTRUE);
+   virtual void RenderTransparent(Bool_t rnr_non_selected=kTRUE, Bool_t rnr_selected=kTRUE);
    virtual void RenderOverlay(Int_t state, Bool_t selection);
    virtual void PostRender();
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLEventHandler.cxx root/graf3d/gl/src/TGLEventHandler.cxx
--- root-old/graf3d/gl/src/TGLEventHandler.cxx	2012-02-12 20:59:06.182916905 -0800
+++ root/graf3d/gl/src/TGLEventHandler.cxx	2012-02-15 19:53:22.361987142 -0800
@@ -131,9 +131,8 @@
 
    fGLViewer->RequestSelect(fLastPos.fX, fLastPos.fY);
 
-   TGLPhysicalShape *pshp = fGLViewer->fSelRec.GetPhysShape();
-   TGLLogicalShape  *lshp = pshp ? const_cast<TGLLogicalShape*>(pshp->GetLogical()) : 0;
-   TObject          *obj  = lshp ? lshp->GetExternal() : 0;
+   TGLLogicalShape  *lshp = fGLViewer->fSelRec.GetLogShape();
+   TObject          *obj  = fGLViewer->fSelRec.GetObject();
       
    // secondary selection
    if (lshp && (event->fState & kKeyMod1Mask || (fSecSelType == TGLViewer::kOnRequest && lshp->AlwaysSecondarySelect())))
@@ -175,8 +174,8 @@
    fGLViewer->RequestSelect(fLastPos.fX, fLastPos.fY);
 
    TGLPhysicalShape *pshp = fGLViewer->fSelRec.GetPhysShape();
-   TGLLogicalShape  *lshp = pshp ? const_cast<TGLLogicalShape*>(pshp->GetLogical()) : 0;
-   TObject          *obj  = lshp ? lshp->GetExternal() : 0;
+   TGLLogicalShape  *lshp = fGLViewer->fSelRec.GetLogShape();
+   TObject          *obj  = fGLViewer->fSelRec.GetObject();
 
    if (lshp && (fSecSelType == TGLViewer::kOnRequest && lshp->AlwaysSecondarySelect()))
    {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLLogicalShape.cxx root/graf3d/gl/src/TGLLogicalShape.cxx
--- root-old/graf3d/gl/src/TGLLogicalShape.cxx	2012-02-12 20:59:06.176916903 -0800
+++ root/graf3d/gl/src/TGLLogicalShape.cxx	2012-02-15 19:54:15.475992152 -0800
@@ -422,40 +422,12 @@
    // If lvl argument is less than 0 (-1 by default), the index into color-set
    // is taken from the physical shape itself.
 
-   const TGLRect& vp = rnrCtx.RefCamera().RefViewport();
-   Int_t inner[4][2] = { { 0,-1}, { 1, 0}, { 0, 1}, {-1, 0} };
-   Int_t outer[8][2] = { {-1,-1}, { 1,-1}, { 1, 1}, {-1, 1},
-                         { 0,-2}, { 2, 0}, { 0, 2}, {-2, 0} };
-
    if (lvl < 0) lvl = pshp->GetSelected();
 
-   rnrCtx.SetHighlightOutline(kTRUE);
+   glColor4ubv(rnrCtx.ColorSet().Selection(lvl).CArr());
    TGLUtil::LockColor();
-   Int_t first_outer = (rnrCtx.CombiLOD() == TGLRnrCtx::kLODHigh) ? 0 : 4;
-   for (int i = first_outer; i < 8; ++i)
-   {
-      glViewport(vp.X() + outer[i][0], vp.Y() + outer[i][1], vp.Width(), vp.Height());
-      glColor4ubv(rnrCtx.ColorSet().Selection(lvl).CArr());
-      Draw(rnrCtx);
-   }
-   TGLUtil::UnlockColor();
-   rnrCtx.SetHighlightOutline(kFALSE);
-
-   pshp->SetupGLColors(rnrCtx);
-   for (int i = 0; i < 4; ++i)
-   {
-      glViewport(vp.X() + inner[i][0], vp.Y() + inner[i][1], vp.Width(), vp.Height());
-      glColor4fv(pshp->Color());
-      Draw(rnrCtx);
-   }
-   glViewport(vp.X(), vp.Y(), vp.Width(), vp.Height());
-
-   pshp->SetupGLColors(rnrCtx);
-   Float_t dr[2];
-   glGetFloatv(GL_DEPTH_RANGE,dr);
-   glDepthRange(dr[0], 0.5*dr[1]);
    Draw(rnrCtx);
-   glDepthRange(dr[0], dr[1]);
+   TGLUtil::UnlockColor();
 }
 
 //______________________________________________________________________________
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLObject.cxx root/graf3d/gl/src/TGLObject.cxx
--- root-old/graf3d/gl/src/TGLObject.cxx	2012-02-12 20:59:06.170916904 -0800
+++ root/graf3d/gl/src/TGLObject.cxx	2012-02-16 14:13:25.261211106 -0800
@@ -46,7 +46,7 @@
    if (!fDLCache ||
        !fScene   ||
        (rnrCtx.SecSelection() && SupportsSecondarySelect()) ||
-       (fMultiColor && (rnrCtx.HighlightOutline() || rnrCtx.IsDrawPassOutlineLine())) ||
+       (fMultiColor && (rnrCtx.Highlight() || rnrCtx.IsDrawPassOutlineLine())) ||
        (AlwaysSecondarySelect() && rnrCtx.Highlight()))
    {
       return kFALSE;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLPhysicalShape.cxx root/graf3d/gl/src/TGLPhysicalShape.cxx
--- root-old/graf3d/gl/src/TGLPhysicalShape.cxx	2012-02-12 20:59:06.168916904 -0800
+++ root/graf3d/gl/src/TGLPhysicalShape.cxx	2012-02-15 19:54:14.208992031 -0800
@@ -364,10 +364,36 @@
 
    glPushMatrix();
    glMultMatrixd(fTransform.CArr());
-   if (fInvertedWind)  glFrontFace(GL_CW);
-   if (rnrCtx.Highlight() && !rnrCtx.Selection() && !rnrCtx.IsDrawPassOutlineLine())
+   if (fInvertedWind) glFrontFace(GL_CW);
+   if (rnrCtx.Highlight())
    {
-      fLogicalShape->DrawHighlight(rnrCtx, this);
+      glPushAttrib(GL_LIGHTING_BIT | GL_DEPTH_BUFFER_BIT);
+
+      glDisable(GL_LIGHTING);
+      glDisable(GL_DEPTH_TEST);
+
+      if (rnrCtx.HighlightOutline())
+      {
+         const Int_t offsets[12][2] = { {-1,-1}, { 1,-1}, { 1, 1}, {-1, 1},
+                                        { 1, 0}, { 0, 1}, {-1, 0}, { 0,-1},
+                                        { 0,-2}, { 2, 0}, { 0, 2}, {-2, 0} };
+
+         const TGLRect& vp = rnrCtx.RefCamera().RefViewport();
+
+         for (int i = 0; i < 12; ++i)
+         {
+            glViewport(vp.X() + offsets[i][0], vp.Y() + offsets[i][1], vp.Width(), vp.Height());
+            fLogicalShape->DrawHighlight(rnrCtx, this);
+         }
+
+         glViewport(vp.X(), vp.Y(), vp.Width(), vp.Height());
+      }
+      else
+      {
+         fLogicalShape->DrawHighlight(rnrCtx, this);
+      }
+
+      glPopAttrib();
    }
    else
    {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLRnrCtx.cxx root/graf3d/gl/src/TGLRnrCtx.cxx
--- root-old/graf3d/gl/src/TGLRnrCtx.cxx	2012-02-12 20:59:06.171916904 -0800
+++ root/graf3d/gl/src/TGLRnrCtx.cxx	2012-02-12 21:15:14.360008203 -0800
@@ -84,6 +84,7 @@
 
    fHighlight    (kFALSE),  fHighlightOutline (kFALSE),
    fSelection    (kFALSE),  fSecSelection     (kFALSE),
+   fSelectTransparents (kIfNoOpaques),
    fPickRadius   (0),
    fPickRectangle(0),
    fSelectBuffer (0),
@@ -102,7 +103,6 @@
    fGrabbedImage  (0)
 {
    // Constructor.
-
    
    fColorSetStack = new lpTGLColorSet_t;
    fColorSetStack->push_back(0);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLScene.cxx root/graf3d/gl/src/TGLScene.cxx
--- root-old/graf3d/gl/src/TGLScene.cxx	2012-02-12 20:59:06.177916904 -0800
+++ root/graf3d/gl/src/TGLScene.cxx	2012-02-15 19:54:16.937992288 -0800
@@ -609,7 +609,7 @@
 
    TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
    if (!sinfo->fOpaqueElements.empty())
-       RenderAllPasses(rnrCtx, sinfo->fOpaqueElements, kTRUE);
+      RenderAllPasses(rnrCtx, sinfo->fOpaqueElements, kTRUE);
 }
 
 //______________________________________________________________________________
@@ -619,7 +619,7 @@
 
    TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
    if (!sinfo->fTranspElements.empty())
-       RenderAllPasses(rnrCtx, sinfo->fTranspElements, kTRUE);
+      RenderAllPasses(rnrCtx, sinfo->fTranspElements, kTRUE);
 }
 
 //______________________________________________________________________________
@@ -628,8 +628,8 @@
    // Render selected opaque elements.
 
    TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
-   if (!sinfo->fSelOpaqueElements.empty())
-       RenderAllPasses(rnrCtx, sinfo->fSelOpaqueElements, kFALSE);
+   if ( ! sinfo->fSelOpaqueElements.empty())
+      RenderAllPasses(rnrCtx, sinfo->fSelOpaqueElements, kFALSE);
 }
 
 //______________________________________________________________________________
@@ -639,7 +639,58 @@
 
    TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
    if (!sinfo->fSelTranspElements.empty())
-       RenderAllPasses(rnrCtx, sinfo->fSelTranspElements, kFALSE);
+      RenderAllPasses(rnrCtx, sinfo->fSelTranspElements, kFALSE);
+}
+
+//______________________________________________________________________________
+void TGLScene::RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx)
+{
+   // Render selected opaque elements for highlight.
+
+   TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
+   if ( ! sinfo->fSelOpaqueElements.empty())
+      RenderHighlight(rnrCtx, sinfo->fSelOpaqueElements);
+}
+
+//______________________________________________________________________________
+void TGLScene::RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx)
+{
+   // Render selected transparent elements for highlight.
+
+   TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
+   if (!sinfo->fSelTranspElements.empty())
+      RenderHighlight(rnrCtx, sinfo->fSelTranspElements);
+}
+
+//______________________________________________________________________________
+void TGLScene::RenderHighlight(TGLRnrCtx&           rnrCtx,
+                               DrawElementPtrVec_t& elVec)
+{
+   DrawElementPtrVec_t svec(1);
+
+   glEnable(GL_STENCIL_TEST);
+   for (DrawElementPtrVec_i i = elVec.begin(); i != elVec.end(); ++i)
+   {
+      svec[0] = *i;
+
+      glStencilFunc(GL_ALWAYS, 0x1, 0x1);
+      glStencilOp(GL_REPLACE, GL_REPLACE, GL_REPLACE);
+      glClear(GL_STENCIL_BUFFER_BIT);
+
+      glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
+
+      RenderAllPasses(rnrCtx, svec, kFALSE);
+
+      glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
+
+      glStencilFunc(GL_NOTEQUAL, 0x1, 0x1);
+      glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
+
+      rnrCtx.SetHighlightOutline(kTRUE);
+      RenderAllPasses(rnrCtx, svec, kFALSE);
+      rnrCtx.SetHighlightOutline(kFALSE);
+   }
+   glDisable(GL_STENCIL_TEST);
 }
 
 //______________________________________________________________________________
@@ -686,7 +737,8 @@
       case TGLRnrCtx::kOutline:
       {
          glEnable(GL_LIGHTING);
-         if (sinfo->ShouldClip()) {
+         if (sinfo->ShouldClip())
+         {
             // Clip object - two sided lighting, two side polygons, don't cull (BACK) faces
             glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
             glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
@@ -694,11 +746,14 @@
          }
          // No clip - default single side lighting,
          // front polygons, cull (BACK) faces ok
-         if (sceneStyle == TGLRnrCtx::kOutline) {
+         if (sceneStyle == TGLRnrCtx::kOutline && ! (rnrCtx.Selection() || rnrCtx.Highlight()))
+         {
             reqPasses = 2;   // Outline needs two full draws
             rnrPass[0] = TGLRnrCtx::kPassOutlineFill;
             rnrPass[1] = TGLRnrCtx::kPassOutlineLine;
-         } else {
+         }
+         else
+         {
             rnrPass[0] = TGLRnrCtx::kPassFill;
          }
          break;
@@ -896,6 +951,7 @@
    {
       rec.SetTransparent(pshp->IsTransparent());
       rec.SetPhysShape(pshp);
+      rec.SetLogShape(const_cast<TGLLogicalShape*>(pshp->GetLogical()));
       rec.SetObject(pshp->GetLogical()->GetExternal());
       rec.SetSpecific(0);
       return kTRUE;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLSceneBase.cxx root/graf3d/gl/src/TGLSceneBase.cxx
--- root-old/graf3d/gl/src/TGLSceneBase.cxx	2012-02-12 20:59:06.167916903 -0800
+++ root/graf3d/gl/src/TGLSceneBase.cxx	2012-02-15 19:54:12.935991912 -0800
@@ -460,6 +460,18 @@
 //______________________________________________________________________________
 void TGLSceneBase::RenderSelTransp(TGLRnrCtx & /*rnrCtx*/)
 {
+   // Render selected transparent elements for highlight.
+}
+
+//______________________________________________________________________________
+void TGLSceneBase::RenderSelOpaqueForHighlight(TGLRnrCtx & /*rnrCtx*/)
+{
+   // Render selected opaque elements for highlight.
+}
+
+//______________________________________________________________________________
+void TGLSceneBase::RenderSelTranspForHighlight(TGLRnrCtx & /*rnrCtx*/)
+{
    // Render selected transparent elements.
 }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLSelectRecord.cxx root/graf3d/gl/src/TGLSelectRecord.cxx
--- root-old/graf3d/gl/src/TGLSelectRecord.cxx	2012-02-12 20:59:06.190916906 -0800
+++ root/graf3d/gl/src/TGLSelectRecord.cxx	2012-02-12 21:15:46.596011242 -0800
@@ -158,6 +158,7 @@
    fTransparent (kFALSE),
    fSceneInfo   (0),
    fPhysShape   (0),
+   fLogShape    (0),
    fObject      (0),
    fSpecific    (0),
    fMultiple    (kFALSE),
@@ -173,6 +174,7 @@
    fTransparent (kFALSE),
    fSceneInfo   (0),
    fPhysShape   (0),
+   fLogShape    (0),
    fObject      (0),
    fSpecific    (0),
    fMultiple    (kFALSE),
@@ -188,6 +190,7 @@
    fTransparent (rec.fTransparent),
    fSceneInfo   (rec.fSceneInfo),
    fPhysShape   (rec.fPhysShape),
+   fLogShape    (rec.fLogShape),
    fObject      (rec.fObject),
    fSpecific    (rec.fSpecific),
    fMultiple    (rec.fMultiple),
@@ -214,6 +217,7 @@
       fTransparent = rec.fTransparent;
       fSceneInfo   = rec.fSceneInfo;
       fPhysShape   = rec.fPhysShape;
+      fLogShape    = rec.fLogShape;
       fObject      = rec.fObject;
       fSpecific    = rec.fSpecific;
       fMultiple    = rec.fMultiple;
@@ -233,6 +237,7 @@
    fTransparent = kFALSE;
    fSceneInfo   = 0;
    fPhysShape   = 0;
+   fLogShape    = 0;
    fObject      = 0;
    fSpecific    = 0;
    fMultiple    = kFALSE;
@@ -249,6 +254,7 @@
    fTransparent = kFALSE;
    fSceneInfo   = 0;
    fPhysShape   = 0;
+   fLogShape    = 0;
    fObject      = 0;
    fSpecific    = 0;
    fMultiple    = kFALSE;
@@ -262,10 +268,10 @@
    // Print contents of the select record to stdout.
 
    printf("SelectRecord   N=%d, miZ=%.4f, maxZ=%.4f\n"
-          "    sceneinfo=%p, pshp=%p, transp=%d,\n"
+          "    sceneinfo=%p, pshp=%p, transp=%d, mult=%d, hilite=%d\n"
           "    tobj=%p (name='%s'), spec=%p\n",
           fN, fMinZ, fMaxZ,
-          fSceneInfo,  fPhysShape,  fTransparent,
+          fSceneInfo,  fPhysShape,  fTransparent, fMultiple, fHighlight,
           fObject, fObject ? fObject->GetName() : "",
           fSpecific);
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLUtil.cxx root/graf3d/gl/src/TGLUtil.cxx
--- root-old/graf3d/gl/src/TGLUtil.cxx	2012-02-12 20:59:06.189916905 -0800
+++ root/graf3d/gl/src/TGLUtil.cxx	2012-02-12 21:14:16.254002722 -0800
@@ -1515,7 +1515,7 @@
 }
 
 //______________________________________________________________________________
-void TGLUtil::CheckError(const char * loc)
+Int_t TGLUtil::CheckError(const char * loc)
 {
    // Check current GL error state, outputing details via ROOT
    // Error method if one
@@ -1530,6 +1530,7 @@
          Error("TGLUtil::CheckError", "GL Error %s", (const char *)errString);
       }
    }
+   return errCode;
 }
 
 /******************************************************************************/
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLViewer.cxx root/graf3d/gl/src/TGLViewer.cxx
--- root-old/graf3d/gl/src/TGLViewer.cxx	2012-02-12 20:59:06.196916904 -0800
+++ root/graf3d/gl/src/TGLViewer.cxx	2012-02-15 19:54:20.087992584 -0800
@@ -507,6 +507,25 @@
 }
 
 //______________________________________________________________________________
+void TGLViewer::Render()
+{
+   // Normal rendering, used by mono and stereo rendering.
+
+   RenderOpaque();
+   RenderTransparent();
+   DrawGuides();
+   RenderOverlay(TGLOverlayElement::kAllVisible, kFALSE);
+
+   if ( ! fRnrCtx->Selection())
+   {
+      RenderSelectedForHighlight();
+   }
+
+   glClear(GL_DEPTH_BUFFER_BIT);
+   DrawDebugInfo();
+}
+
+//______________________________________________________________________________
 void TGLViewer::PostRender()
 {
    // Restore state set in PreRender().
@@ -607,17 +626,7 @@
    fRnrCtx->StartStopwatch();
    if (fFader < 1)
    {
-      RenderNonSelected();
-      RenderSelected();
-      DrawGuides();
-      RenderOverlay(TGLOverlayElement::kAllVisible, kFALSE);
-
-      glClear(GL_DEPTH_BUFFER_BIT);
-      fRnrCtx->SetHighlight(kTRUE);
-      RenderSelected();
-      fRnrCtx->SetHighlight(kFALSE);
-      glClear(GL_DEPTH_BUFFER_BIT);
-      DrawDebugInfo();
+      Render();
    }
    fRnrCtx->StopStopwatch();
 
@@ -683,17 +692,7 @@
    fRnrCtx->StartStopwatch();
    if (fFader < 1)
    {
-      RenderNonSelected();
-      RenderSelected();
-      DrawGuides();
-      RenderOverlay(TGLOverlayElement::kAllVisible, kFALSE);
-
-      glClear(GL_DEPTH_BUFFER_BIT);
-      fRnrCtx->SetHighlight(kTRUE);
-      RenderSelected();
-      fRnrCtx->SetHighlight(kFALSE);
-      glClear(GL_DEPTH_BUFFER_BIT);
-      DrawDebugInfo();
+      Render();
    }
    fRnrCtx->StopStopwatch();
 
@@ -721,17 +720,7 @@
    fRnrCtx->StartStopwatch();
    if (fFader < 1)
    {
-      RenderNonSelected();
-      RenderSelected();
-      DrawGuides();
-      RenderOverlay(TGLOverlayElement::kAllVisible, kFALSE);
-
-      glClear(GL_DEPTH_BUFFER_BIT);
-      fRnrCtx->SetHighlight(kTRUE);
-      RenderSelected();
-      fRnrCtx->SetHighlight(kFALSE);
-      glClear(GL_DEPTH_BUFFER_BIT);
-      DrawDebugInfo();
+      Render();
    }
    fRnrCtx->StopStopwatch();
 
@@ -1190,11 +1179,13 @@
       Int_t idx = 0;
       if (FindClosestRecord(fSelRec, idx))
       {
-         if (fSelRec.GetTransparent())
+         if (fSelRec.GetTransparent() && fRnrCtx->SelectTransparents() != TGLRnrCtx::kIfClosest)
          {
             TGLSelectRecord opaque;
             if (FindClosestOpaqueRecord(opaque, ++idx))
                fSelRec = opaque;
+            else if (fRnrCtx->SelectTransparents() == TGLRnrCtx::kNever)
+               fSelRec.Reset();
          }
          if (gDebug > 1) fSelRec.Print();
       }
@@ -1234,7 +1225,7 @@
    TUnlocker ulck(this);
 
    if (! fSelRec.GetSceneInfo() || ! fSelRec.GetPhysShape() ||
-       ! fSelRec.GetPhysShape()->GetLogical()->SupportsSecondarySelect())
+       ! fSelRec.GetLogShape()->SupportsSecondarySelect())
    {
       if (gDebug > 0)
          Info("TGLViewer::SecondarySelect", "Skipping secondary selection "
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-old/graf3d/gl/src/TGLViewerBase.cxx root/graf3d/gl/src/TGLViewerBase.cxx
--- root-old/graf3d/gl/src/TGLViewerBase.cxx	2012-02-12 20:59:06.185916904 -0800
+++ root/graf3d/gl/src/TGLViewerBase.cxx	2012-02-15 19:54:18.211992408 -0800
@@ -459,6 +459,66 @@
    TGLUtil::CheckError("TGLViewerBase::RenderSelected - pre exit check");
 }
 
+//______________________________________________________________________________
+void TGLViewerBase::RenderSelectedForHighlight()
+{
+   // Render selected objects from all scenes for highlight.
+
+   fRnrCtx->SetHighlight(kTRUE);
+
+   SubRenderScenes(&TGLSceneBase::RenderSelOpaqueForHighlight);
+
+   TGLCapabilityEnabler blend(GL_BLEND, kTRUE);
+   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+   glDepthMask(GL_FALSE);
+
+   SubRenderScenes(&TGLSceneBase::RenderSelTranspForHighlight);
+
+   glDepthMask(GL_TRUE);
+
+   fRnrCtx->SetHighlight(kFALSE);
+}
+
+//______________________________________________________________________
+void TGLViewerBase::RenderOpaque(Bool_t rnr_non_selected, Bool_t rnr_selected)
+{
+   // Render opaque objects from all scenes.
+
+   if (rnr_non_selected)
+   {
+      SubRenderScenes(&TGLSceneBase::RenderOpaque);
+   }
+   if (rnr_selected)
+   {
+      SubRenderScenes(&TGLSceneBase::RenderSelOpaque);
+   }
+
+   TGLUtil::CheckError("TGLViewerBase::RenderOpaque - pre exit check");
+}
+
+//______________________________________________________________________
+void TGLViewerBase::RenderTransparent(Bool_t rnr_non_selected, Bool_t rnr_selected)
+{
+   // Render transparent objects from all scenes.
+
+   TGLCapabilityEnabler blend(GL_BLEND, kTRUE);
+   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+   glDepthMask(GL_FALSE);
+
+   if (rnr_non_selected)
+   {
+      SubRenderScenes(&TGLSceneBase::RenderTransp);
+   }
+   if (rnr_selected)
+   {
+      SubRenderScenes(&TGLSceneBase::RenderSelTransp);
+   }
+
+   glDepthMask(GL_TRUE);
+
+   TGLUtil::CheckError("TGLViewerBase::RenderTransparent - pre exit check");
+}
+
 //______________________________________________________________________
 void TGLViewerBase::RenderOverlay(Int_t state, Bool_t selection)
 {
