diff --git a/CLHEP/Matrix/Matrix/DiagMatrix.icc b/CLHEP/Matrix/Matrix/DiagMatrix.icc
index 4173cfa..963a3fe 100755
--- a/CLHEP/Matrix/Matrix/DiagMatrix.icc
+++ b/CLHEP/Matrix/Matrix/DiagMatrix.icc
@@ -12,10 +12,6 @@ inline HepDiagMatrix::HepDiagMatrix()
    : m(0), nrow(0)
 {}
 
-inline int HepDiagMatrix::num_row() const { return nrow;}
-inline int HepDiagMatrix::num_col() const  { return nrow;}
-inline int HepDiagMatrix::num_size() const  { return nrow;}
-
 inline double & HepDiagMatrix::fast(int row,int col)
 {
 #ifdef MATRIX_BOUND_CHECK
@@ -47,16 +43,6 @@ inline const double & HepDiagMatrix::fast(int row,int col) const
   }
 }
 
-inline double & HepDiagMatrix::operator()(int row, int col)
-{
-   return fast(col,row);
-}
-
-inline const double & HepDiagMatrix::operator()(int row, int col) const 
-{ 
-   return fast(col,row);
-}
-
 inline void HepDiagMatrix::assign(const HepDiagMatrix &m2) {(*this)=m2;}
 
 inline HepDiagMatrix HepDiagMatrix::T() const {return HepDiagMatrix(*this);}
diff --git a/CLHEP/Matrix/Matrix/GenMatrix.h b/CLHEP/Matrix/Matrix/GenMatrix.h
index 247d8f6..cf846e3 100755
--- a/CLHEP/Matrix/Matrix/GenMatrix.h
+++ b/CLHEP/Matrix/Matrix/GenMatrix.h
@@ -36,7 +36,7 @@ class HepGenMatrix;
 class HepGenMatrix {
  
 public:
-   virtual ~HepGenMatrix() {}
+   virtual ~HepGenMatrix();
 
 
 #ifdef DISABLE_ALLOC   // disable this non-compliant allocator
diff --git a/CLHEP/Matrix/Matrix/SymMatrix.h b/CLHEP/Matrix/Matrix/SymMatrix.h
index 7ef8b00..72a8c87 100755
--- a/CLHEP/Matrix/Matrix/SymMatrix.h
+++ b/CLHEP/Matrix/Matrix/SymMatrix.h
@@ -109,8 +109,8 @@ public:
    virtual ~HepSymMatrix();
    // Destructor.
 
-   inline int num_row() const;
-   inline int num_col() const;
+   int num_row() const;
+   int num_col() const;
    // Returns number of rows/columns.
 
    const double & operator()(int row, int col) const; 
diff --git a/CLHEP/Matrix/Matrix/SymMatrix.icc b/CLHEP/Matrix/Matrix/SymMatrix.icc
index ae748e1..0935072 100755
--- a/CLHEP/Matrix/Matrix/SymMatrix.icc
+++ b/CLHEP/Matrix/Matrix/SymMatrix.icc
@@ -13,10 +13,6 @@ inline HepSymMatrix::HepSymMatrix()
   : m(0), nrow(0), size_(0)
 {}
 
-inline int HepSymMatrix::num_row() const { return nrow;}
-inline int HepSymMatrix::num_col() const  { return nrow;}
-inline int HepSymMatrix::num_size() const  { return size_;}
-
 inline double & HepSymMatrix::fast(int row,int col)
 {
 #ifdef MATRIX_BOUND_CHECK
@@ -34,11 +30,6 @@ inline const double & HepSymMatrix::fast(int row,int col) const
   return *(m.begin()+(row*(row-1))/2+(col-1));
 }
 
-inline double & HepSymMatrix::operator()(int row, int col)
-    {return (row>=col? fast(row,col) : fast(col,row));}
-inline const double & HepSymMatrix::operator()(int row, int col) const 
-    {return (row>=col? fast(row,col) : fast(col,row));}
-
 inline void HepSymMatrix::assign(const HepSymMatrix &m2) 
   {(*this)=m2;}
 
diff --git a/CLHEP/Matrix/src/DiagMatrix.cc b/CLHEP/Matrix/src/DiagMatrix.cc
index 196e645..745d983 100755
--- a/CLHEP/Matrix/src/DiagMatrix.cc
+++ b/CLHEP/Matrix/src/DiagMatrix.cc
@@ -24,6 +24,20 @@
 
 namespace CLHEP {
 
+inline int HepDiagMatrix::num_row() const { return nrow;}
+inline int HepDiagMatrix::num_col() const  { return nrow;}
+inline int HepDiagMatrix::num_size() const  { return nrow;}
+
+inline double & HepDiagMatrix::operator()(int row, int col)
+{
+   return fast(col,row);
+}
+
+inline const double & HepDiagMatrix::operator()(int row, int col) const 
+{ 
+   return fast(col,row);
+}
+
 // Simple operation for all elements
 
 #define SIMPLE_UOP(OPER)          \
diff --git a/CLHEP/Matrix/src/GenMatrix.cc b/CLHEP/Matrix/src/GenMatrix.cc
index 5902f0c..6390e86 100755
--- a/CLHEP/Matrix/src/GenMatrix.cc
+++ b/CLHEP/Matrix/src/GenMatrix.cc
@@ -25,6 +25,9 @@
 
 namespace CLHEP {
 
+HepGenMatrix::~HepGenMatrix()
+{}
+
 #ifdef HEP_THIS_FUNCTION_IS_NOT_NEEDED
 static void delete_array(double *m)
 {
diff --git a/CLHEP/Matrix/src/SymMatrix.cc b/CLHEP/Matrix/src/SymMatrix.cc
index 8dd79ec..2629d0e 100755
--- a/CLHEP/Matrix/src/SymMatrix.cc
+++ b/CLHEP/Matrix/src/SymMatrix.cc
@@ -24,6 +24,15 @@
 
 namespace CLHEP {
 
+inline int HepSymMatrix::num_row() const { return nrow;}
+inline int HepSymMatrix::num_col() const  { return nrow;}
+inline int HepSymMatrix::num_size() const  { return size_;}
+
+inline double & HepSymMatrix::operator()(int row, int col)
+    {return (row>=col? fast(row,col) : fast(col,row));}
+inline const double & HepSymMatrix::operator()(int row, int col) const 
+    {return (row>=col? fast(row,col) : fast(col,row));}
+
 // Simple operation for all elements
 
 #define SIMPLE_UOP(OPER)          \
