--- src/array.c.orig	2010-09-20 09:28:23.000000000 -0500
+++ src/array.c	2011-01-14 09:16:24.000000000 -0600
@@ -16,6 +16,9 @@
  */
 
 
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
 #include <stdlib.h>
 #include "sysdep.h"
 #include "char2crc.h"
@@ -31,6 +34,22 @@
 static arrayElement *array;
 static int      len;
 
+unsigned long
+array_char2crc(const unsigned char * key)
+{
+   unsigned long kh;
+   size_t keysize = strlen((const char *)key);
+   char * new_key = (char *)malloc(sizeof(char)*(keysize+10));
+   if (new_key == NULL) {
+     /* Malloc failed; return original function */
+     return char2crc(key);
+   }
+   snprintf(new_key, keysize, "%i %s", getpid(), key);
+   kh = char2crc((const unsigned char *)new_key);
+   free(new_key);
+   return kh;
+}
+
 unsigned short
 isMember(char *key)
 {
@@ -38,7 +57,7 @@
 	unsigned long   kh;
 	int             i;
 
-	kh = char2crc((const unsigned char *)key);
+	kh = array_char2crc((const unsigned char *)key);
 	for (i = 0; i < len; i++) {
 		if (array[i].key == kh) {
 			m_unlock(&gLock);
@@ -62,7 +81,7 @@
 
 	array = tmpArray;
 	array[len].value = value;
-	array[len].key = char2crc((const unsigned char *)key);
+	array[len].key = array_char2crc((const unsigned char *)key);
 
 	len++;
 	return;
@@ -77,7 +96,7 @@
 	int             i;
 	int             value;
 
-	kh = char2crc((const unsigned char *)key);
+	kh = array_char2crc((const unsigned char *)key);
 
 	for (i = 0; i < len; i++) {
 		if (array[i].key == kh) {
@@ -104,7 +123,7 @@
 	if (tmpArray == NULL) {
 		return;
 	}
-	kh = char2crc((const unsigned char *)key);
+	kh = array_char2crc((const unsigned char *)key);
 	for (i = 0, j = 0; i < len; i++) {
 
 		if (array[i].key == kh) {
--- src/dcap.c.orig	2010-09-21 07:22:42.000000000 -0500
+++ src/dcap.c	2011-01-14 09:21:14.000000000 -0600
@@ -72,6 +72,7 @@
 
 static char    *hostName;
 static int      callBackSocket = -1;
+static pid_t    callBackPid = -1;
 static unsigned short    callBackPort = 0;
 static unsigned short    callBackPortRange = 1;
 
@@ -114,6 +115,7 @@
 static int cache_connect(server *);
 static int sayHello(int, ioTunnel *);
 static int create_data_socket(int *, unsigned short *);
+static int get_data_socket();
 static int ascii_open_conversation(struct vsp_node *);
 static int getDataMessage(struct vsp_node *);
 static void getRevision( revision * );
@@ -275,15 +277,9 @@
 		(node->asciiCommand == DCAP_CMD_OPENDIR ) ||
 		(node->asciiCommand == DCAP_CMD_TRUNC) ) {
 
-		m_lock(&bindLock);
-		if( callBackSocket == -1 ) {
-			if ( create_data_socket(&callBackSocket, &callBackPort) < 0) {
-				dc_debug(DC_ERROR, "Callback socket not created.");
-				m_unlock(&bindLock);
-				return -1;
-			}
+		if (get_data_socket()) {
+			return -1;
 		}
-		m_unlock(&bindLock);
 
 		node->data_port = callBackPort;
 	}
@@ -808,6 +804,26 @@
 }
 
 int
+get_data_socket()
+{
+       /* Initialize the callback socket */
+       /* Only performed once per PID (but must be done for every PID due to forks). */
+       m_lock(&bindLock);
+        pid_t curPid = getpid();
+       if( (curPid != callBackPid) || (callBackSocket == -1) ) {
+                callBackPort = 0;
+               if ( create_data_socket(&callBackSocket, &callBackPort) < 0) {
+                       dc_debug(DC_ERROR, "Callback socket not created.");
+                       m_unlock(&bindLock);
+                       return -1;
+               }
+               callBackPid = curPid;
+       }
+       m_unlock(&bindLock);
+       return 0;
+}
+
+int
 create_data_socket(int *dataFd, unsigned short *cbPort)
 {
 
