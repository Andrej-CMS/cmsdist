diff -arupN SHERPA-MC-1.3.1.orig/AMEGIC++/Main/Single_Process.C SHERPA-MC-1.3.1/AMEGIC++/Main/Single_Process.C
--- SHERPA-MC-1.3.1.orig/AMEGIC++/Main/Single_Process.C	2012-03-07 14:23:32.000000000 +0100
+++ SHERPA-MC-1.3.1/AMEGIC++/Main/Single_Process.C	2012-03-07 14:25:11.000000000 +0100
@@ -14,6 +14,8 @@
 #include "ATOOLS/Org/MyStrStream.H"
 #include "ATOOLS/Org/Data_Reader.H"
 
+#include <unistd.h>
+
 using namespace AMEGIC;
 using namespace MODEL;
 using namespace PHASIC;
diff -arupN SHERPA-MC-1.3.1.orig/COMIX/Currents/Currents.C SHERPA-MC-1.3.1/COMIX/Currents/Currents.C
--- SHERPA-MC-1.3.1.orig/COMIX/Currents/Currents.C	2012-03-07 14:23:32.000000000 +0100
+++ SHERPA-MC-1.3.1/COMIX/Currents/Currents.C	2012-03-07 14:35:24.000000000 +0100
@@ -212,7 +212,7 @@ void CS<SType>::ConstructJ(const ATOOLS:
     msg_Debugging()<<METHOD<<"(): '+' "<<this->m_id<<" "<<j
 		   <<" "<<this->m_fl<<", m = "<<p.Mass()<<"\n";
 #endif
-    AddJ(j);
+    this->AddJ(j);
   }
 }
 
@@ -351,7 +351,7 @@ void CF<SType>::ConstructJ(const ATOOLS:
 		   <<" "<<j<<" "<<(this->m_dir>0?this->m_fl.Bar():this->m_fl)
 		   <<", m = "<<m_cmass<<" ("<<p.Mass()<<")\n";
 #endif
-    AddJ(j);
+    this->AddJ(j);
   }
   if (ch<=0) {
     CSpinorType j(this->m_fl.IsAnti()^(this->m_dir>0)?
@@ -365,7 +365,7 @@ void CF<SType>::ConstructJ(const ATOOLS:
 		   <<" "<<j<<" "<<(this->m_dir>0?this->m_fl.Bar():this->m_fl)
 		   <<", m = "<<m_cmass<<" ("<<p.Mass()<<")\n";
 #endif
-    AddJ(j);
+    this->AddJ(j);
   }
 }
 
@@ -587,7 +587,7 @@ void CV<SType>::ConstructJ(const ATOOLS:
   if (ch>=0) {
     if (this->m_msv && (ch==0 || ch==3)) {
       CVec4Type j(EML(this->m_p,cr,ca));
-      AddJ(this->m_dir>0?j:j.Conj());
+      this->AddJ(this->m_dir>0?j:j.Conj());
 #ifdef DEBUG__BG
       msg_Debugging()<<METHOD<<"(): "<<(this->m_dir>0?'I':'O')
 		     <<"0 "<<this->m_id<<" "<<this->m_j.back()
@@ -598,7 +598,7 @@ void CV<SType>::ConstructJ(const ATOOLS:
       CVec4Type j(this->m_msv?this->m_dir>0?
 		  EMM(this->m_p,cr,ca):EMP(this->m_p,cr,ca):
 		  this->m_dir>0?EM(this->m_p,cr,ca):EP(this->m_p,cr,ca));
-      AddJ(this->m_dir>0?j:j.Conj());
+      this->AddJ(this->m_dir>0?j:j.Conj());
 #ifdef DEBUG__BG
       msg_Debugging()<<METHOD<<"(): "<<(this->m_dir>0?'I':'O')
 		     <<"+ "<<this->m_id<<" "<<this->m_j.back()
@@ -610,7 +610,7 @@ void CV<SType>::ConstructJ(const ATOOLS:
     CVec4Type j(this->m_msv?this->m_dir>0?
 		EMP(this->m_p,cr,ca):EMM(this->m_p,cr,ca):
 		this->m_dir>0?EP(this->m_p,cr,ca):EM(this->m_p,cr,ca));
-    AddJ(this->m_dir>0?j:j.Conj());
+    this->AddJ(this->m_dir>0?j:j.Conj());
 #ifdef DEBUG__BG
     msg_Debugging()<<METHOD<<"(): "<<(this->m_dir>0?'I':'O')
 		   <<"- "<<this->m_id<<" "<<this->m_j.back()
diff -arupN SHERPA-MC-1.3.1.orig/COMIX/Vertices/EW_Vertices.C SHERPA-MC-1.3.1/COMIX/Vertices/EW_Vertices.C
--- SHERPA-MC-1.3.1.orig/COMIX/Vertices/EW_Vertices.C	2012-03-07 14:23:32.000000000 +0100
+++ SHERPA-MC-1.3.1/COMIX/Vertices/EW_Vertices.C	2012-03-07 14:55:20.000000000 +0100
@@ -228,7 +228,7 @@ EW_HHS<SType>::EW_HHS(const Vertex_Key &
 template <typename SType>
 void EW_HHS<SType>::Evaluate(const CScalarType &a,const CScalarType &b)
 {
-  AddJ(m_cpl*SType(this->m_cplfac)*Lorentz(a,b));
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->Lorentz(a,b));
 }
 
 template <typename SType>
@@ -253,13 +253,13 @@ template <typename SType>
 void EW_FFH<SType>::Evaluate(const CSpinorType &a,const CSpinorType &b)
 {
   if (a()!=b()) return;
-  AddJ(m_cpl*SType(this->m_cplfac)*Lorentz(a,b));
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->Lorentz(a,b));
 }
 
 template <typename SType>
 void EW_FFH<SType>::Evaluate(const CSpinorType &a,const CScalarType &b)
 {
-  AddJ(Lorentz(a,b)*m_cpl*SType(this->m_cplfac));
+  this->AddJ(this->Lorentz(a,b)*m_cpl*SType(this->m_cplfac));
 }
 
 template <typename SType>
@@ -293,23 +293,23 @@ template <typename SType>
 void EW_FFZ<SType>::Evaluate(const CSpinorType &a,const CSpinorType &b)
 {
   if (a()!=b()) return;
-  bool cl(CalcLeft(a,b)), cr(CalcRight(a,b));
+  bool cl(this->CalcLeft(a,b)), cr(this->CalcRight(a,b));
   if (!(cl || cr)) return;
   CVec4Type j(ZERO,ZERO,ZERO,ZERO,0,0,a.H(0)+b.H(0),a.H(1)+b.H(1));
-  if (cl) j+=m_cpll*SType(this->m_cplfac)*LorentzLeft(a,b);
-  if (cr) j+=m_cplr*SType(this->m_cplfac)*LorentzRight(a,b);
-  AddJ(j);
+  if (cl) j+=m_cpll*SType(this->m_cplfac)*this->LorentzLeft(a,b);
+  if (cr) j+=m_cplr*SType(this->m_cplfac)*this->LorentzRight(a,b);
+  this->AddJ(j);
 }
 
 template <typename SType>
 void EW_FFZ<SType>::Evaluate(const CSpinorType &a,const CVec4Type &b)
 {
-  bool cl(CalcLeft(a)), cr(CalcRight(a));
+  bool cl(this->CalcLeft(a)), cr(this->CalcRight(a));
   if (!(cl || cr)) return;
   CSpinorType j(a.R(),a.B(),a(),a.H(0)+b.H(0),a.H(1)+b.H(1),0);
-  if (cl) j+=LorentzLeft(a,b)*m_cpll*SType(this->m_cplfac);
-  if (cr) j+=LorentzRight(a,b)*m_cplr*SType(this->m_cplfac);
-  AddJ(j);
+  if (cl) j+=this->LorentzLeft(a,b)*m_cpll*SType(this->m_cplfac);
+  if (cr) j+=this->LorentzRight(a,b)*m_cplr*SType(this->m_cplfac);
+  this->AddJ(j);
 }
 
 template <typename SType>
@@ -342,15 +342,15 @@ template <typename SType>
 void EW_FFW<SType>::Evaluate(const CSpinorType &a,const CSpinorType &b)
 {
   if (a()!=b()) return;
-  if (!CalcLeft(a,b)) return;
-  AddJ(m_cpl*SType(this->m_cplfac)*LorentzLeft(a,b));
+  if (!this->CalcLeft(a,b)) return;
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->LorentzLeft(a,b));
 }
 
 template <typename SType>
 void EW_FFW<SType>::Evaluate(const CSpinorType &a,const CVec4Type &b)
 {
-  if (!CalcLeft(a)) return;
-  AddJ(LorentzLeft(a,b)*m_cpl*SType(this->m_cplfac));
+  if (!this->CalcLeft(a)) return;
+  this->AddJ(this->LorentzLeft(a,b)*m_cpl*SType(this->m_cplfac));
 }
 
 template <typename SType>
@@ -386,13 +386,13 @@ EW_VVH<SType>::EW_VVH(const Vertex_Key &
 template <typename SType>
 void EW_VVH<SType>::Evaluate(const CVec4Type &a,const CVec4Type &b)
 {
-  AddJ(m_cpl*SType(this->m_cplfac)*Lorentz(a,b));
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->Lorentz(a,b));
 }
 
 template <typename SType>
 void EW_VVH<SType>::Evaluate(const CVec4Type &a,const CScalarType &b)
 {
-  AddJ(m_cpl*SType(this->m_cplfac)*Lorentz(a,b));
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->Lorentz(a,b));
 }
 
 template <typename SType>
@@ -416,13 +416,13 @@ EW_WWV<SType>::EW_WWV(const Vertex_Key &
 template <typename SType>
 void EW_WWV<SType>::Evaluate(const CVec4Type &a,const CVec4Type &b)
 {
-  CVec4Type j(Lorentz(a,b));
+  CVec4Type j(this->Lorentz(a,b));
 #ifdef DEBUG__BG
   msg_Debugging()<<"'+' "<<a<<"\n";
   msg_Debugging()<<"    "<<b<<"\n";
 #endif
   j(1)=j(0)=0;
-  AddJ(m_cpl*SType(this->m_cplfac)*j);
+  this->AddJ(m_cpl*SType(this->m_cplfac)*j);
 }
 
 template <typename SType>
@@ -455,19 +455,19 @@ void EW_WWT<SType>::Evaluate(const CVec4
   msg_Debugging()<<"'+' "<<a<<"\n";
   msg_Debugging()<<"    "<<b<<"\n";
 #endif
-  AddJ(m_cpl*SType(this->m_cplfac)*Lorentz(a,b));
+  this->AddJ(m_cpl*SType(this->m_cplfac)*this->Lorentz(a,b));
 }
 
 template <typename SType>
 void EW_WWT<SType>::Evaluate(const CVec4Type &a,const CAsT4Type &b)
 {
-  CVec4Type j(Lorentz(a,b));
+  CVec4Type j(this->Lorentz(a,b));
 #ifdef DEBUG__BG
   msg_Debugging()<<"'+' "<<a<<"\n";
   msg_Debugging()<<"    "<<b<<"\n";
 #endif
   j(1)=j(0)=0;
-  AddJ(m_cpl*SType(this->m_cplfac)*j);
+  this->AddJ(m_cpl*SType(this->m_cplfac)*j);
 }
 
 template <typename SType>
diff -arupN SHERPA-MC-1.3.1.orig/COMIX/Vertices/QCD_Vertices.C SHERPA-MC-1.3.1/COMIX/Vertices/QCD_Vertices.C
--- SHERPA-MC-1.3.1.orig/COMIX/Vertices/QCD_Vertices.C	2012-03-07 14:23:32.000000000 +0100
+++ SHERPA-MC-1.3.1/COMIX/Vertices/QCD_Vertices.C	2012-03-07 15:01:19.000000000 +0100
@@ -110,24 +110,24 @@ void QCD_GGG<SType>::Evaluate(const CVec
   static SType invsqrttwo(1.0/sqrt(2.0));
   if (a(0)==b(1)) {
     if (a(1)==b(0) && a(0)==a(1)) return;
-    CVec4Type j(invsqrttwo*Lorentz(a,b));
+    CVec4Type j(invsqrttwo*this->Lorentz(a,b));
     j(0)=b(0);
     j(1)=a(1);
 #ifdef DEBUG__BG
     msg_Debugging()<<"'+' "<<a<<"\n";
     msg_Debugging()<<"    "<<b<<"\n";
 #endif
-    AddJ(m_cpl*SType(this->m_cplfac)*j);
+    this->AddJ(m_cpl*SType(this->m_cplfac)*j);
   }
   if (a(1)==b(0)) {
-    CVec4Type j(invsqrttwo*Lorentz(a,b));
+    CVec4Type j(invsqrttwo*this->Lorentz(a,b));
     j(0)=a(0);
     j(1)=b(1);
 #ifdef DEBUG__BG
     msg_Debugging()<<"'-' "<<a<<"\n";
     msg_Debugging()<<"    "<<b<<"\n";
 #endif
-    AddJ(-m_cpl*SType(this->m_cplfac)*j);
+    this->AddJ(-m_cpl*SType(this->m_cplfac)*j);
   }
 }
 
@@ -152,14 +152,14 @@ void QCD_GGT<SType>::Evaluate(const CVec
     msg_Debugging()<<"'+' "<<a<<"\n";
     msg_Debugging()<<"    "<<b<<"\n";
 #endif
-    AddJ(m_cpl*SType(this->m_cplfac)*invsqrttwo*Lorentz(a,b));
+    this->AddJ(m_cpl*SType(this->m_cplfac)*invsqrttwo*this->Lorentz(a,b));
   }
   if (a(1)==b(0)) {
 #ifdef DEBUG__BG
     msg_Debugging()<<"'-' "<<a<<"\n";
     msg_Debugging()<<"    "<<b<<"\n";
 #endif
-    AddJ(m_cpl*SType(this->m_cplfac)*invsqrttwo*Lorentz(b,a));
+    this->AddJ(m_cpl*SType(this->m_cplfac)*invsqrttwo*this->Lorentz(b,a));
   }
 }
 
@@ -170,24 +170,24 @@ void QCD_GGT<SType>::Evaluate(const CVec
   if (a(0)==b(1) || a(1)==b(0)) {
     if (a(0)==b(1)) {
       if (a(1)==b(0) && a(0)==a(1)) return;
-      CVec4Type j(invsqrttwo*Lorentz(a,b));
+      CVec4Type j(invsqrttwo*this->Lorentz(a,b));
       j(0)=b(0);
       j(1)=a(1);
 #ifdef DEBUG__BG
       msg_Debugging()<<"'+' "<<a<<"\n";
       msg_Debugging()<<"    "<<b<<"\n";
 #endif
-      AddJ(m_cpl*SType(this->m_cplfac)*j);
+      this->AddJ(m_cpl*SType(this->m_cplfac)*j);
     }
     if (a(1)==b(0)) {
-      CVec4Type j(invsqrttwo*Lorentz(a,b));
+      CVec4Type j(invsqrttwo*this->Lorentz(a,b));
       j(0)=a(0);
       j(1)=b(1);
 #ifdef DEBUG__BG
       msg_Debugging()<<"'-' "<<a<<"\n";
       msg_Debugging()<<"    "<<b<<"\n";
 #endif
-      AddJ(-m_cpl*SType(this->m_cplfac)*j);
+      this->AddJ(-m_cpl*SType(this->m_cplfac)*j);
     }
   }
 }
@@ -207,11 +207,11 @@ template <typename SType>
 void QCD_QQG<SType>::Evaluate(const CSpinorType &a,const CSpinorType &b)
 {
   static SType invsqrttwo(1.0/sqrt(2.0));
-  bool cl(CalcLeft(a,b)), cr(CalcRight(a,b));
+  bool cl(this->CalcLeft(a,b)), cr(this->CalcRight(a,b));
   if (!(cl || cr)) return;
   CVec4Type j(ZERO,ZERO,ZERO,ZERO,0,0,a.H(0)+b.H(0),a.H(1)+b.H(1));
-  if (cl) j+=LorentzLeft(a,b);
-  if (cr) j+=LorentzRight(a,b);
+  if (cl) j+=this->LorentzLeft(a,b);
+  if (cr) j+=this->LorentzRight(a,b);
   bool singlet(a()==b());
   if (a.B()<0) {
     j(0)=a();
@@ -221,12 +221,12 @@ void QCD_QQG<SType>::Evaluate(const CSpi
     j(0)=b();
     j(1)=a();
   }
-  AddJ(j*=invsqrttwo*m_cpl*SType(this->m_cplfac));
+  this->AddJ(j*=invsqrttwo*m_cpl*SType(this->m_cplfac));
   if (singlet) {
     j*=-1.0/3.0;
     for (size_t i(this->s_cimin);i<=this->s_cimax;++i) {
       j(0)=j(1)=i;
-      AddJ(j);
+      this->AddJ(j);
     }
   }
 }
@@ -238,19 +238,19 @@ void QCD_QQG<SType>::Evaluate(const CSpi
   bool singlet(b(0)==b(1) && this->s_cimin<=this->s_cimax);
   bool match((a.B()<0 && a()==b(1)) || (a.B()>0 && a()==b(0)));
   if (match || singlet) {
-    bool cl(CalcLeft(a)), cr(CalcRight(a));
+    bool cl(this->CalcLeft(a)), cr(this->CalcRight(a));
     if (!(cl || cr)) return;
     CSpinorType j(a.R(),a.B(),a(),a.H(0)+b.H(0),a.H(1)+b.H(1),0);
-    if (cl) j+=LorentzLeft(a,b);
-    if (cr) j+=LorentzRight(a,b);
+    if (cl) j+=this->LorentzLeft(a,b);
+    if (cr) j+=this->LorentzRight(a,b);
     j*=invsqrttwo*m_cpl*SType(this->m_cplfac);
     if (match) {
       j()=a.B()<0?b(0):b(1);
-      AddJ(j);
+      this->AddJ(j);
     }
     if (singlet) {
       j()=a();
-      AddJ(-j/3.0);
+      this->AddJ(-j/3.0);
     }
   }
 }
diff -arupN SHERPA-MC-1.3.1.orig/COMIX/Vertices/QED_Vertices.C SHERPA-MC-1.3.1/COMIX/Vertices/QED_Vertices.C
--- SHERPA-MC-1.3.1.orig/COMIX/Vertices/QED_Vertices.C	2012-03-07 14:23:32.000000000 +0100
+++ SHERPA-MC-1.3.1/COMIX/Vertices/QED_Vertices.C	2012-03-07 15:03:42.000000000 +0100
@@ -57,23 +57,23 @@ template <typename SType>
 void QED_FFP<SType>::Evaluate(const CSpinorType &a,const CSpinorType &b)
 {
   if (a()!=b()) return;
-  bool cl(CalcLeft(a,b)), cr(CalcRight(a,b));
+  bool cl(this->CalcLeft(a,b)), cr(this->CalcRight(a,b));
   if (!(cl || cr)) return;
   CVec4Type j(ZERO,ZERO,ZERO,ZERO,0,0,a.H(0)+b.H(0),a.H(1)+b.H(1));
-  if (cl) j+=LorentzLeft(a,b);
-  if (cr) j+=LorentzRight(a,b);
-  AddJ(j*m_cpl*SType(this->m_cplfac));
+  if (cl) j+=this->LorentzLeft(a,b);
+  if (cr) j+=this->LorentzRight(a,b);
+  this->AddJ(j*m_cpl*SType(this->m_cplfac));
 }
 
 template <typename SType>
 void QED_FFP<SType>::Evaluate(const CSpinorType &a,const CVec4Type &b)
 {
-  bool cl(CalcLeft(a)), cr(CalcRight(a));
+  bool cl(this->CalcLeft(a)), cr(this->CalcRight(a));
   if (!(cl || cr)) return;
   CSpinorType j(a.R(),a.B(),a(),a.H(0)+b.H(0),a.H(1)+b.H(1),0);
-  if (cl) j+=LorentzLeft(a,b);
-  if (cr) j+=LorentzRight(a,b);
-  AddJ(j*m_cpl*SType(this->m_cplfac));
+  if (cl) j+=this->LorentzLeft(a,b);
+  if (cr) j+=this->LorentzRight(a,b);
+  this->AddJ(j*m_cpl*SType(this->m_cplfac));
 }
 
 template <typename SType>
