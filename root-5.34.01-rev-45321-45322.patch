Index: tree/tree/src/TTreeCache.cxx
===================================================================
--- tree/tree/src/TTreeCache.cxx	(revision 45320)
+++ tree/tree/src/TTreeCache.cxx	(revision 45322)
@@ -1037,7 +1037,7 @@
 }
 
 //_____________________________________________________________________________
-void TTreeCache::SetFile(TFile *file)
+void TTreeCache::SetFile(TFile *file, TFile::ECacheAction action)
 {
    // Overload to make sure that the object specific
 
@@ -1047,9 +1047,9 @@
    if (fFile) {
       TFile *prevFile = fFile;
       fFile = 0;
-      prevFile->SetCacheRead(0, fTree);
+      prevFile->SetCacheRead(0, fTree, action);
    }
-   TFileCacheRead::SetFile(file);
+   TFileCacheRead::SetFile(file, action);
 }
 
 //_____________________________________________________________________________
Index: tree/tree/inc/TTreeCache.h
===================================================================
--- tree/tree/inc/TTreeCache.h	(revision 45320)
+++ tree/tree/inc/TTreeCache.h	(revision 45322)
@@ -82,7 +82,7 @@
    virtual Int_t       ReadBufferPrefetch(char *buf, Long64_t pos, Int_t len);
    virtual void        ResetCache();
    virtual void        SetEntryRange(Long64_t emin,   Long64_t emax);
-   virtual void        SetFile(TFile *file);
+   virtual void        SetFile(TFile *file, TFile::ECacheAction action=TFile::kDisconnect);
    static void         SetLearnEntries(Int_t n = 10);
    void                StartLearningPhase();
    virtual void        StopLearningPhase();
Index: io/io/src/TFileCacheRead.cxx
===================================================================
--- io/io/src/TFileCacheRead.cxx	(revision 45320)
+++ io/io/src/TFileCacheRead.cxx	(revision 45322)
@@ -526,7 +526,7 @@
 }
 
 //_____________________________________________________________________________
-void TFileCacheRead::SetFile(TFile *file)
+void TFileCacheRead::SetFile(TFile *file, TFile::ECacheAction action)
 {
    // Set the file using this cache and reset the current blocks (if any).
 
@@ -541,10 +541,12 @@
       }
    }
 
-   Prefetch(0,0);
+   if (action == TFile::kDisconnect)
+      Prefetch(0,0);
    
    if (fPrefetch) {
-      SecondPrefetch(0, 0);
+      if (action == TFile::kDisconnect)
+         SecondPrefetch(0, 0);
       fPrefetch->SetFile(file);
    }
 }
Index: io/io/src/TFile.cxx
===================================================================
--- io/io/src/TFile.cxx	(revision 45320)
+++ io/io/src/TFile.cxx	(revision 45322)
@@ -2071,13 +2071,26 @@
 }
 
 //______________________________________________________________________________
-void TFile::SetCacheRead(TFileCacheRead *cache, TObject* tree)
+void TFile::SetCacheRead(TFileCacheRead *cache, TObject* tree, ECacheAction action)
 {
    // Set a pointer to the read cache.
    // NOTE:  This relinquish ownership of the previous cache, so if you do not
    // already have a pointer to the previous cache (and there was a previous
    // cache), you ought to retrieve (and delete it if needed) using:
    //    TFileCacheRead *older = myfile->GetCacheRead();
+   //
+   // NOTE: the action specifies how to behave when detaching a cache from the
+   // the TFile.  If set to (default) kDisconnect, the contents of the cache
+   // will be flushed when it is removed from the file, and it will disconnect
+   // the cache object from the file.  In almost all cases, this is what you want.
+   // If you want to disconnect the cache temporarily from this tree and re-attach
+   // later to the same fil, you can set action to kDoNotDisconnect.  This will allow 
+   // things like prefetching to continue in the background while it is no longer the 
+   // default cache for the TTree.  Except for a few expert use cases, kDisconnect is
+   // likely the correct setting.
+   // 
+   // WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile.
+   //
 
    if (tree) {
       if (cache) fCacheReadMap->Add(tree, cache);
@@ -2086,11 +2099,11 @@
          // a TFileCacheRead* so the C-cast is safe.
          TFileCacheRead* tpf = (TFileCacheRead *)fCacheReadMap->GetValue(tree);
          fCacheReadMap->RemoveEntry(tree);
-         if (tpf && tpf->GetFile() == this) tpf->SetFile(0);
+         if (tpf && (tpf->GetFile() == this) && (action != kDoNotDisconnect)) tpf->SetFile(0, action);
       }
    }
-   if (cache) cache->SetFile(this);
-   else if (!tree && fCacheRead) fCacheRead->SetFile(0);
+   if (cache) cache->SetFile(this, action);
+   else if (!tree && fCacheRead && (action != kDoNotDisconnect)) fCacheRead->SetFile(0, action);
    // For backward compatibility the last Cache set is the default cache.
    fCacheRead = cache;
 }
Index: io/io/inc/TFile.h
===================================================================
--- io/io/inc/TFile.h	(revision 45320)
+++ io/io/inc/TFile.h	(revision 45322)
@@ -52,6 +52,9 @@
    // Open timeout constants
    enum EOpenTimeOut { kInstantTimeout = 0, kEternalTimeout = 999999999 };
 
+   // TTreeCache flushing semantics
+   enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };
+
 protected:
    Double_t         fSumBuffer;      //Sum of buffer sizes of objects written so far
    Double_t         fSum2Buffer;     //Sum of squares of buffer sizes of objects written so far
@@ -232,7 +235,7 @@
    virtual Int_t       Recover();
    virtual Int_t       ReOpen(Option_t *mode);
    virtual void        Seek(Long64_t offset, ERelativeTo pos = kBeg);
-   virtual void        SetCacheRead(TFileCacheRead *cache, TObject* tree = 0);
+   virtual void        SetCacheRead(TFileCacheRead *cache, TObject* tree = 0, ECacheAction action = kDisconnect);
    virtual void        SetCacheWrite(TFileCacheWrite *cache);
    virtual void        SetCompressionAlgorithm(Int_t algorithm=0);
    virtual void        SetCompressionLevel(Int_t level=1);
Index: io/io/inc/TFileCacheRead.h
===================================================================
--- io/io/inc/TFileCacheRead.h	(revision 45320)
+++ io/io/inc/TFileCacheRead.h	(revision 45322)
@@ -25,7 +25,10 @@
 #include "TObject.h"
 #endif
 
-class TFile;
+#ifndef ROOT_TFile
+#include "TFile.h"
+#endif
+
 class TBranch;
 class TFilePrefetch;
 
@@ -116,7 +119,7 @@
    virtual Int_t       ReadBufferExtNormal(char *buf, Long64_t pos, Int_t len, Int_t &loc);
    virtual Int_t       ReadBufferExtPrefetch(char *buf, Long64_t pos, Int_t len, Int_t &loc);
    virtual Int_t       ReadBuffer(char *buf, Long64_t pos, Int_t len);
-   virtual void        SetFile(TFile *file);
+   virtual void        SetFile(TFile *file, TFile::ECacheAction action = TFile::kDisconnect);
    virtual void        SetSkipZip(Bool_t /*skip*/ = kTRUE) {} // This function is only used by TTreeCacheUnzip (ignore it)
    virtual void        Sort();
    virtual void        SecondSort();                          //Method used to sort and merge the chunks in the second block
