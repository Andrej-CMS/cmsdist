--- trunk/math/mathcore/inc/TMath.h	2011/10/18 11:48:16	41452
+++ trunk/math/mathcore/inc/TMath.h	2011/10/18 12:26:09	41453
@@ -33,6 +33,7 @@
 #include "TError.h"
 #include <algorithm>
 #include <limits>
+#include <cmath>
 
 namespace TMath {
 
@@ -159,6 +160,7 @@
    inline Double_t Ldexp(Double_t x, Int_t exp);
           Double_t Factorial(Int_t i);
    inline Double_t Power(Double_t x, Double_t y);
+   inline Double_t Power(Double_t x, Int_t y);
    inline Double_t Log(Double_t x);
           Double_t Log2(Double_t x);
    inline Double_t Log10(Double_t x);
@@ -362,14 +364,14 @@
 #   ifdef R__SOLARIS_CC50
        extern "C" { int finite(double); }
 #   endif
-#   if defined(R__GLIBC) && defined(__STRICT_ANSI__)
-#      ifndef finite
-#         define finite __finite
-#      endif
-#      ifndef isnan
-#         define isnan  __isnan
-#      endif
-#   endif
+// #   if defined(R__GLIBC) && defined(__STRICT_ANSI__)
+// #      ifndef finite
+// #         define finite __finite
+// #      endif
+// #      ifndef isnan
+// #         define isnan  __isnan
+// #      endif
+// #   endif
 #else
 // don't want to include complete <math.h>
 extern "C" {
@@ -470,6 +472,14 @@
 inline Double_t TMath::Power(Double_t x, Double_t y)
    { return pow(x, y); }
 
+inline Double_t TMath::Power(Double_t x, Int_t y) {
+#ifdef R_ANSISTREAM
+   return std::pow(x, y); 
+#else
+   return pow(x, (Double_t) y); 
+#endif
+}
+
 inline Double_t TMath::Log(Double_t x)
    { return log(x); }
 
@@ -479,7 +489,7 @@
 inline Int_t TMath::Finite(Double_t x)
 #if defined(R__HPUX11)
    { return isfinite(x); }
-#elif defined(R__MACOSX) && defined(__arm__)
+#elif defined(R_ANSISTREAM) || (defined(R__MACOSX) && defined(__arm__))
 #ifdef isfinite
    // from math.h
    { return isfinite(x); }
@@ -492,7 +502,7 @@
 #endif
 
 inline Int_t TMath::IsNaN(Double_t x)
-#if defined(R__MACOSX) && defined(__arm__)
+#if defined(R_ANSISTREAM) || (defined(R__MACOSX) && defined(__arm__) )
 #ifdef isnan
    // from math.h
    { return isnan(x); }
--- trunk/tmva/src/MethodPDERS.cxx	2011/10/18 11:48:16	41452
+++ trunk/tmva/src/MethodPDERS.cxx	2011/10/18 12:26:09	41453
@@ -988,7 +988,7 @@
    }
 
    // Normalizing by the full volume
-   ret *= ( TMath::Power (2., GetNvar()) * TMath::Gamma (1 + (((Double_t) GetNvar()) / 2.)) ) /
+   ret *= ( TMath::Power (2., (Double_t) GetNvar()) * TMath::Gamma (1 + (((Double_t) GetNvar()) / 2.)) ) /
       TMath::Power (TMath::Pi(), ((Double_t) GetNvar()) / 2.);
 
    return ret*pdf;
@@ -1023,9 +1023,9 @@
    Double_t ret;
 
    if (GetNvar() % 2)
-      ret = TMath::Power (sinc, GetNvar());
+      ret = TMath::Power (sinc, (Int_t) GetNvar());
    else
-      ret = TMath::Abs (sinc) * TMath::Power (sinc, GetNvar() - 1);
+      ret = TMath::Abs (sinc) * TMath::Power (sinc, (Int_t) GetNvar() - 1);
 
    return ret;
 }
@@ -1043,8 +1043,8 @@
    Double_t lanczos = (TMath::Sin(pix) / pix) * (TMath::Sin(pixtimesn) / pixtimesn);
    Double_t ret;
 
-   if (GetNvar() % 2) ret = TMath::Power (lanczos, GetNvar());
-   else               ret = TMath::Abs (lanczos) * TMath::Power (lanczos, GetNvar() - 1);
+   if (GetNvar() % 2) ret = TMath::Power (lanczos, (Int_t) GetNvar());
+   else               ret = TMath::Abs (lanczos) * TMath::Power (lanczos, (Int_t) GetNvar() - 1);
 
    return ret;
 }
