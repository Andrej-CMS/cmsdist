--- root/core/meta/src/TCint.cxx	2009-01-27 00:10:22.000000000 +0100
+++ root522patch/core/meta/src/TCint.cxx	2009-01-27 00:11:29.000000000 +0100
@@ -135,7 +135,7 @@
          return 1;
       }
       //end(2)
-        
+
       //write data into the file
       fprintf( filePointer, fileContent.c_str() );
       fclose( filePointer );
@@ -187,9 +187,7 @@
    G__InitGetSpecialObject(&TCint_FindSpecialObject);
 
    // check whether the compiler is available:
-   TString  pathString = "$(PATH)";
-   gSystem->ExpandPathName(pathString);
-   char* path = gSystem->Which(pathString, gSystem->BaseName( COMPILER ));
+   char* path = gSystem->Which(gSystem->Getenv("PATH"), gSystem->BaseName(COMPILER));
    if (path && path[0]) {
       G__InitGenerateDictionary( &TCint_GenerateDictionary );
    }
@@ -922,13 +920,13 @@
 }
 
 //______________________________________________________________________________
-void TCint::UpdateListOfMethods(TClass *cl) 
+void TCint::UpdateListOfMethods(TClass *cl)
 {
    // Update the list of pointers to method for TClass cl, if necessary
- 
+
    if (cl->fMethod) {
       R__LOCKGUARD2(gCINTMutex);
-      
+
       G__ClassInfo *info = (G__ClassInfo*)cl->GetClassInfo();
       if (!info || cl->fMethod->GetEntries() == info->NMethods()) {
          return;
@@ -1998,7 +1996,7 @@
    }
 #ifdef ROOTINCDIR
    fIncludePath.Append(" -I\"").Append(ROOTINCDIR);
-#else 
+#else
    fIncludePath.Append(" -I\"").Append(gRootDir).Append("/include");
 #endif
 #ifdef R__BUILDING_CINT7
@@ -2038,201 +2036,201 @@
 
 int TCint::DisplayClass(FILE *fout,char *name,int base,int start) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__display_class(fout,name,base,start);
 }
 //______________________________________________________________________________
 int TCint::DisplayIncludePath(FILE *fout) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__display_includepath(fout);
 }
 //______________________________________________________________________________
 void  *TCint::FindSym(const char *entry) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__findsym(entry);
 }
 //______________________________________________________________________________
 void   TCint::GenericError(const char *error) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__genericerror(error);
 }
 //______________________________________________________________________________
 Long_t TCint::GetExecByteCode() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return (Long_t)G__exec_bytecode;
 }
 
 //______________________________________________________________________________
 Long_t TCint::Getgvp() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return (Long_t)G__getgvp();
 }
 //______________________________________________________________________________
 const char *TCint::Getp2f2funcname(void *receiver) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__p2f2funcname(receiver);
 }
 //______________________________________________________________________________
 int    TCint::GetSecurityError() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__get_security_error();
 }
 //______________________________________________________________________________
 int    TCint::LoadFile(const char *path) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__loadfile(path);
 }
 //______________________________________________________________________________
 void   TCint::LoadText(const char *text) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__load_text(text);
 }
 //______________________________________________________________________________
 const char *TCint::MapCppName(const char *name) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__map_cpp_name(name);
 }
 //______________________________________________________________________________
-void   TCint::SetAlloclockfunc(void (*p)()) const  
+void   TCint::SetAlloclockfunc(void (*p)()) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__set_alloclockfunc(p);
 }
 //______________________________________________________________________________
-void   TCint::SetAllocunlockfunc(void (*p)()) const  
+void   TCint::SetAllocunlockfunc(void (*p)()) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__set_allocunlockfunc(p);
 }
 //______________________________________________________________________________
 int    TCint::SetClassAutoloading(int autoload) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__set_class_autoloading(autoload);
 }
 //______________________________________________________________________________
 void   TCint::SetErrmsgcallback(void *p) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__set_errmsgcallback(p);
 }
 //______________________________________________________________________________
 void   TCint::Setgvp(Long_t gvp) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__setgvp(gvp);
 }
 //______________________________________________________________________________
 void   TCint::SetRTLD_NOW() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__Set_RTLD_NOW();
 }
 //______________________________________________________________________________
 void   TCint::SetRTLD_LAZY() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__Set_RTLD_LAZY();
 }
 //______________________________________________________________________________
 void   TCint::SetTempLevel(int val) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__settemplevel(val);
 }
 //______________________________________________________________________________
 int    TCint::UnloadFile(const char *path) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return G__unloadfile(path);
 }
 
-   
-   
+
+
 //______________________________________________________________________________
 // G__CallFunc interface
 //______________________________________________________________________________
 void  TCint::CallFunc_Delete(CallFunc_t *func) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    delete f;
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_Exec(CallFunc_t *func, void *address) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->Exec(address);
 }
 //______________________________________________________________________________
 Long_t  TCint::CallFunc_ExecInt(CallFunc_t *func, void *address) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    return f->ExecInt(address);
 }
 //______________________________________________________________________________
 Long_t  TCint::CallFunc_ExecInt64(CallFunc_t *func, void *address) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    return f->ExecInt64(address);
 }
 //______________________________________________________________________________
 Double_t  TCint::CallFunc_ExecDouble(CallFunc_t *func, void *address) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    return f->ExecDouble(address);
 }
 //______________________________________________________________________________
 CallFunc_t *TCint::CallFunc_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = new G__CallFunc();
    return f;
 }
 //______________________________________________________________________________
 CallFunc_t *TCint::CallFunc_FactoryCopy(CallFunc_t *func) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f1 = (G__CallFunc*)func;
    G__CallFunc *f  = new G__CallFunc(*f1);
    return f;
@@ -2249,88 +2247,88 @@
 //______________________________________________________________________________
 void  TCint::CallFunc_Init(CallFunc_t *func) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->Init();
 }
 //______________________________________________________________________________
 bool  TCint::CallFunc_IsValid(CallFunc_t *func) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    return f->IsValid();
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_ResetArg(CallFunc_t *func) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->ResetArg();
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArg(CallFunc_t *func, Long_t param) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArg(param);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArg(CallFunc_t *func, Double_t param) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArg(param);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArg(CallFunc_t *func, Long64_t param) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArg(param);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArg(CallFunc_t *func, ULong64_t param) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArg(param);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArgArray(CallFunc_t *func, Long_t *paramArr, Int_t nparam) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArgArray(paramArr,nparam);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetArgs(CallFunc_t *func, const char *param) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetArgs(param);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetFunc(CallFunc_t *func, ClassInfo_t *info, const char *method, const char *params, Long_t *offset) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    f->SetFunc((G__ClassInfo*)info,method,params,offset);
 }
 //______________________________________________________________________________
 void  TCint::CallFunc_SetFunc(CallFunc_t *func, MethodInfo_t *info) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
    G__MethodInfo *minfo = (G__MethodInfo*)info;
    f->SetFunc(*minfo);
@@ -2338,91 +2336,91 @@
 //______________________________________________________________________________
 void  TCint::CallFunc_SetFuncProto(CallFunc_t *func, ClassInfo_t *info, const char *method, const char *proto, Long_t *offset) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__CallFunc *f = (G__CallFunc*)func;
-   G__ClassInfo *cinfo = (G__ClassInfo*)info;   
+   G__ClassInfo *cinfo = (G__ClassInfo*)info;
    f->SetFuncProto(cinfo,method,proto,offset);
 }
 
 
 
 //______________________________________________________________________________
-// G__ClassInfo interface            
+// G__ClassInfo interface
 //______________________________________________________________________________
 Long_t   TCint::ClassInfo_ClassProperty(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->ClassProperty();
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_Delete(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    delete info;
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_Delete(ClassInfo_t *cinfo, void *arena) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    info->Delete(arena);
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_DeleteArray(ClassInfo_t *cinfo, void *arena, bool dtorOnly) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    info->DeleteArray(arena,dtorOnly);
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_Destruct(ClassInfo_t *cinfo, void *arena) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    info->Destruct(arena);
 }
 //______________________________________________________________________________
 ClassInfo_t *TCint::ClassInfo_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return new G__ClassInfo();
 }
 //______________________________________________________________________________
 ClassInfo_t *TCint::ClassInfo_Factory(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return new G__ClassInfo(*info);
 }
 //______________________________________________________________________________
 ClassInfo_t *TCint::ClassInfo_Factory(const char *name) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return new G__ClassInfo(name);
 }
 //______________________________________________________________________________
 ClassInfo_t *TCint::ClassInfo_Factory(G__value *pvalue) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    return new G__ClassInfo(*pvalue);
 }
 //______________________________________________________________________________
 int TCint::ClassInfo_GetMethodNArg(ClassInfo_t *cinfo, const char *method,const char *proto) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    G__MethodInfo meth;
    if (info) {
@@ -2435,206 +2433,206 @@
 //______________________________________________________________________________
 bool  TCint::ClassInfo_HasDefaultConstructor(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->HasDefaultConstructor();
 }
 //______________________________________________________________________________
 bool  TCint::ClassInfo_HasMethod(ClassInfo_t *cinfo, const char *name) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->HasMethod(name);
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_Init(ClassInfo_t *cinfo, const char *funcname) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    info->Init(funcname);
 }
 //______________________________________________________________________________
 void  TCint::ClassInfo_Init(ClassInfo_t *cinfo, int tagnum) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    info->Init(tagnum);
-   
+
 }
 //______________________________________________________________________________
 bool  TCint::ClassInfo_IsBase(ClassInfo_t *cinfo, const char*name) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->IsBase(name);
 }
 //______________________________________________________________________________
 bool  TCint::ClassInfo_IsEnum(const char*name) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo info(name);
    if (info.IsValid() && info.Property()&G__BIT_ISENUM) return kTRUE;
    return kFALSE;
 }
 //______________________________________________________________________________
-bool  TCint::ClassInfo_IsLoaded(ClassInfo_t *cinfo) const             
+bool  TCint::ClassInfo_IsLoaded(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->IsLoaded();
 }
 //______________________________________________________________________________
-bool  TCint::ClassInfo_IsValid(ClassInfo_t *cinfo) const             
+bool  TCint::ClassInfo_IsValid(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
-bool  TCint::ClassInfo_IsValidMethod(ClassInfo_t *cinfo,  const char *method,const char *proto, Long_t *offset) const             
+bool  TCint::ClassInfo_IsValidMethod(ClassInfo_t *cinfo,  const char *method,const char *proto, Long_t *offset) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->GetMethod(method,proto,offset).IsValid();
 }
 //______________________________________________________________________________
 int  TCint::ClassInfo_Next(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Next();
 }
 //______________________________________________________________________________
 void  *TCint::ClassInfo_New(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->New();
 }
 //______________________________________________________________________________
 void  *TCint::ClassInfo_New(ClassInfo_t *cinfo, int n) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->New(n);
 }
 //______________________________________________________________________________
 void  *TCint::ClassInfo_New(ClassInfo_t *cinfo, int n, void *arena) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->New(n,arena);
 }
 //______________________________________________________________________________
 void  *TCint::ClassInfo_New(ClassInfo_t *cinfo, void *arena) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->New(arena);
 }
 //______________________________________________________________________________
 Long_t  TCint::ClassInfo_Property(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Property();
 }
 //______________________________________________________________________________
 int   TCint::ClassInfo_RootFlag(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->RootFlag();
 }
 //______________________________________________________________________________
 int   TCint::ClassInfo_Size(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Size();
 }
 //______________________________________________________________________________
 Long_t  TCint::ClassInfo_Tagnum(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Tagnum();
 }
 //______________________________________________________________________________
 const char *TCint::ClassInfo_FileName(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->FileName();
 }
 //______________________________________________________________________________
 const char *TCint::ClassInfo_FullName(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Fullname();
 }
 //______________________________________________________________________________
 const char *TCint::ClassInfo_Name(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::ClassInfo_Title(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->Title();
 }
 //______________________________________________________________________________
 const char *TCint::ClassInfo_TmpltName(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *info = (G__ClassInfo*)cinfo;
    return info->TmpltName();
 }
-   
 
-                  
+
+
 //______________________________________________________________________________
-// G__BaseClassInfo interface            
+// G__BaseClassInfo interface
 //______________________________________________________________________________
 void  TCint::BaseClassInfo_Delete(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    delete info;
 }
 //______________________________________________________________________________
 BaseClassInfo_t *TCint::BaseClassInfo_Factory(ClassInfo_t *cinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__ClassInfo *cinfo1 = (G__ClassInfo*)cinfo;
    G__BaseClassInfo *info = new G__BaseClassInfo(*cinfo1);
    return info;
@@ -2642,88 +2640,88 @@
 //______________________________________________________________________________
 int  TCint::BaseClassInfo_Next(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Next();
 }
 //______________________________________________________________________________
 int  TCint::BaseClassInfo_Next(BaseClassInfo_t *bcinfo, int onlyDirect) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Next(onlyDirect);
 }
 //______________________________________________________________________________
 Long_t  TCint::BaseClassInfo_Offset(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Offset();
 }
 //______________________________________________________________________________
 Long_t  TCint::BaseClassInfo_Property(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Property();
 }
 //______________________________________________________________________________
 Long_t  TCint::BaseClassInfo_Tagnum(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Tagnum();
 }
 //______________________________________________________________________________
 const char *TCint::BaseClassInfo_FullName(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Fullname();
 }
 //______________________________________________________________________________
 const char *TCint::BaseClassInfo_Name(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::BaseClassInfo_TmpltName(BaseClassInfo_t *bcinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__BaseClassInfo *info = (G__BaseClassInfo*)bcinfo;
    return info->TmpltName();
 }
-               
+
 //______________________________________________________________________________
-// G__DataMemberInfo interface            
+// G__DataMemberInfo interface
 //______________________________________________________________________________
 int   TCint::DataMemberInfo_ArrayDim(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->ArrayDim();
 }
 //______________________________________________________________________________
 void  TCint::DataMemberInfo_Delete(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    delete info;
 }
 //______________________________________________________________________________
 DataMemberInfo_t *TCint::DataMemberInfo_Factory(ClassInfo_t* clinfo /* = 0 */) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__ClassInfo* clinfo1 = (G__ClassInfo*) clinfo;
    if (clinfo1)
       return new G__DataMemberInfo(*clinfo1);
@@ -2732,8 +2730,8 @@
 //______________________________________________________________________________
 DataMemberInfo_t *TCint::DataMemberInfo_FactoryCopy(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info1 = (G__DataMemberInfo*)dminfo;
    G__DataMemberInfo *info = new G__DataMemberInfo(*info1);
    return info;
@@ -2741,117 +2739,117 @@
 //______________________________________________________________________________
 bool   TCint::DataMemberInfo_IsValid(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
 int   TCint::DataMemberInfo_MaxIndex(DataMemberInfo_t *dminfo, Int_t dim) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->MaxIndex(dim);
 }
 //______________________________________________________________________________
 int  TCint::DataMemberInfo_Next(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Next();
 }
 //______________________________________________________________________________
 Long_t TCint::DataMemberInfo_Offset(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Offset();
 }
 //______________________________________________________________________________
 Long_t  TCint::DataMemberInfo_Property(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Property();
 }
 //______________________________________________________________________________
 Long_t  TCint::DataMemberInfo_TypeProperty(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Type()->Property();
 }
 //______________________________________________________________________________
 int   TCint::DataMemberInfo_TypeSize(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Type()->Size();
 }
 //______________________________________________________________________________
 const char *TCint::DataMemberInfo_TypeName(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Type()->Name();
 }
 //______________________________________________________________________________
 const char *TCint::DataMemberInfo_TypeTrueName(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Type()->TrueName();
 }
 //______________________________________________________________________________
 const char *TCint::DataMemberInfo_Name(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::DataMemberInfo_Title(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->Title();
 }
 //______________________________________________________________________________
 const char *TCint::DataMemberInfo_ValidArrayIndex(DataMemberInfo_t *dminfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__DataMemberInfo *info = (G__DataMemberInfo*)dminfo;
    return info->ValidArrayIndex();
 }
-               
+
 
 
 //______________________________________________________________________________
-// G__MethodInfo interface            
+// G__MethodInfo interface
 //______________________________________________________________________________
 void  TCint::MethodInfo_Delete(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    delete info;
 }
 //______________________________________________________________________________
 void  TCint::MethodInfo_CreateSignature(MethodInfo_t *minfo, TString &signature) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    G__MethodArgInfo arg(*info);
 
@@ -2876,16 +2874,16 @@
 //______________________________________________________________________________
 MethodInfo_t *TCint::MethodInfo_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = new G__MethodInfo();
    return info;
 }
 //______________________________________________________________________________
 MethodInfo_t *TCint::MethodInfo_FactoryCopy(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info1 = (G__MethodInfo*)minfo;
    G__MethodInfo *info  = new G__MethodInfo(*info1);
    return info;
@@ -2893,8 +2891,8 @@
 //______________________________________________________________________________
 void *TCint::MethodInfo_InterfaceMethod(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    G__InterfaceMethod pfunc = info->InterfaceMethod();
    if (!pfunc) {
@@ -2910,114 +2908,114 @@
 //______________________________________________________________________________
 bool  TCint::MethodInfo_IsValid(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
 int   TCint::MethodInfo_NArg(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->NArg();
 }
 //______________________________________________________________________________
 int   TCint::MethodInfo_NDefaultArg(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->NDefaultArg();
 }
 //______________________________________________________________________________
 int   TCint::MethodInfo_Next(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Next();
 }
 //______________________________________________________________________________
 Long_t  TCint::MethodInfo_Property(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Property();
 }
 //______________________________________________________________________________
 void *TCint::MethodInfo_Type(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Type();
 }
 //______________________________________________________________________________
 const char *TCint::MethodInfo_GetMangledName(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
+   // Interface to CINT function
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->GetMangledName();
 }
 //______________________________________________________________________________
 const char *TCint::MethodInfo_GetPrototype(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->GetPrototype();
 }
 //______________________________________________________________________________
 const char *TCint::MethodInfo_Name(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::MethodInfo_TypeName(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Type()->Name();
 }
 //______________________________________________________________________________
 const char *TCint::MethodInfo_Title(MethodInfo_t *minfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodInfo *info = (G__MethodInfo*)minfo;
    return info->Title();
 }
-               
+
 //______________________________________________________________________________
-// G__MethodArgInfo interface            
+// G__MethodArgInfo interface
 //______________________________________________________________________________
 void  TCint::MethodArgInfo_Delete(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    delete info;
 }
 //______________________________________________________________________________
 MethodArgInfo_t *TCint::MethodArgInfo_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = new G__MethodArgInfo();
    return info;
 }
 //______________________________________________________________________________
 MethodArgInfo_t *TCint::MethodArgInfo_FactoryCopy(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info1 = (G__MethodArgInfo*)marginfo;
    G__MethodArgInfo *info  = new G__MethodArgInfo(*info1);
    return info;
@@ -3025,224 +3023,224 @@
 //______________________________________________________________________________
 bool  TCint::MethodArgInfo_IsValid(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
 int  TCint::MethodArgInfo_Next(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->Next();
 }
 //______________________________________________________________________________
 Long_t TCint::MethodArgInfo_Property(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->Property();
 }
 //______________________________________________________________________________
 const char *TCint::MethodArgInfo_DefaultValue(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->DefaultValue();;
 }
 //______________________________________________________________________________
 const char *TCint::MethodArgInfo_Name(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::MethodArgInfo_TypeName(MethodArgInfo_t *marginfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__MethodArgInfo *info = (G__MethodArgInfo*)marginfo;
    return info->Type()->Name();
 }
 
-                  
+
 //______________________________________________________________________________
-// G__TypeInfo interface            
+// G__TypeInfo interface
 //______________________________________________________________________________
 void  TCint::TypeInfo_Delete(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    delete info;
 }
 //______________________________________________________________________________
 TypeInfo_t *TCint::TypeInfo_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = new G__TypeInfo();
    return info;
 }
 //______________________________________________________________________________
 TypeInfo_t *TCint::TypeInfo_Factory(G__value *pvalue) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = new G__TypeInfo(*pvalue);
    return info;
 }
 //______________________________________________________________________________
 TypeInfo_t *TCint::TypeInfo_FactoryCopy(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = new G__TypeInfo(*(G__TypeInfo*)tinfo);
    return info;
 }
 //______________________________________________________________________________
 void  TCint::TypeInfo_Init(TypeInfo_t *tinfo, const char *funcname) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    info->Init(funcname);
 }
 //______________________________________________________________________________
 bool  TCint::TypeInfo_IsValid(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
 const char *TCint::TypeInfo_Name(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->Name();
 }
 //______________________________________________________________________________
 Long_t  TCint::TypeInfo_Property(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->Property();
 }
 //______________________________________________________________________________
 int   TCint::TypeInfo_RefType(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->Reftype();
 }
 //______________________________________________________________________________
 int   TCint::TypeInfo_Size(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->Size();
 }
 //______________________________________________________________________________
 const char *TCint::TypeInfo_TrueName(TypeInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypeInfo *info = (G__TypeInfo*)tinfo;
    return info->TrueName();
 }
-   
-                  
+
+
 //______________________________________________________________________________
-// G__TypedefInfo interface            
+// G__TypedefInfo interface
 //______________________________________________________________________________
 void  TCint::TypedefInfo_Delete(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    delete info;
 }
 //______________________________________________________________________________
 TypedefInfo_t *TCint::TypedefInfo_Factory() const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = new G__TypedefInfo();
    return info;
 }
 //______________________________________________________________________________
 TypedefInfo_t *TCint::TypedefInfo_FactoryCopy(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = new G__TypedefInfo(*(G__TypedefInfo*)tinfo);
    return info;
 }
 //______________________________________________________________________________
 TypedefInfo_t  TCint::TypedefInfo_Init(TypedefInfo_t *tinfo, const char *funcname) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    info->Init(funcname);
 }
 //______________________________________________________________________________
 bool  TCint::TypedefInfo_IsValid(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->IsValid();
 }
 //______________________________________________________________________________
 Long_t  TCint::TypedefInfo_Property(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->Property();
 }
 //______________________________________________________________________________
 int   TCint::TypedefInfo_Size(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->Size();
 }
 //______________________________________________________________________________
 const char *TCint::TypedefInfo_TrueName(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->TrueName();
 }
 //______________________________________________________________________________
 const char *TCint::TypedefInfo_Name(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->Name();
 }
 //______________________________________________________________________________
 const char *TCint::TypedefInfo_Title(TypedefInfo_t *tinfo) const
 {
-   // Interface to CINT function 
-   
+   // Interface to CINT function
+
    G__TypedefInfo *info = (G__TypedefInfo*)tinfo;
    return info->Title();
 }
