diff --git a/interpreter/llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp b/interpreter/llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp
index 6b93c69..bd9672b 100644
--- a/interpreter/llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp
+++ b/interpreter/llvm/src/tools/clang/lib/Frontend/InitPreprocessor.cpp
@@ -377,9 +377,11 @@ static void InitializeStandardPredefinedMacros(const TargetInfo &TI,
     else if (!LangOpts.GNUMode && LangOpts.Digraphs)
       Builder.defineMacro("__STDC_VERSION__", "199409L");
   } else {
-    // FIXME: Use correct value for C++17.
+    // C++17 [cpp.predefined]p1:
+    //   The name __cplusplus is defined to the value 201703L when compiling a
+    //   C++ translation unit.
     if (LangOpts.CPlusPlus1z)
-      Builder.defineMacro("__cplusplus", "201406L");
+      Builder.defineMacro("__cplusplus", "201703L");
     // C++1y [cpp.predefined]p1:
     //   The name __cplusplus is defined to the value 201402L when compiling a
     //   C++ translation unit.
diff --git a/io/io/v7/inc/ROOT/TFile.hxx b/io/io/v7/inc/ROOT/TFile.hxx
index dd62024..020ea83 100644
--- a/io/io/v7/inc/ROOT/TFile.hxx
+++ b/io/io/v7/inc/ROOT/TFile.hxx
@@ -160,7 +160,7 @@ public:
 
   /// Write an object that is already lifetime managed by this TFileImplBase.
   void Write(std::string_view name) {
-    auto dep = Find(name.to_string());
+    auto dep = Find(std::string(name.data(), name.size()));
     WriteMemoryWithType(name, dep.GetPointer().get(), dep.GetType());
   }
 
diff --git a/io/io/v7/src/TFile.cxx b/io/io/v7/src/TFile.cxx
index 4d75333..a1912cb 100644
--- a/io/io/v7/src/TFile.cxx
+++ b/io/io/v7/src/TFile.cxx
@@ -97,7 +97,7 @@ public:
   }
 
   void WriteMemoryWithType(std::string_view name, const void* address, TClass* cl) final {
-    fOldFile->WriteObjectAny(address, cl, name.to_string().c_str());
+    fOldFile->WriteObjectAny(address, cl, name.data());
   }
 };
 }
@@ -144,7 +144,7 @@ OpenV6TFile(std::string_view name, const char* mode,
     }
   } setCacheDirRAII(opts.fCachedRead);
 
-  auto v6storage = std::make_unique<TV6Storage>(name.to_string(), GetV6TFileOpts(mode, opts));
+  auto v6storage = std::make_unique<TV6Storage>(std::string(name.data(), name.size()), GetV6TFileOpts(mode, opts));
 
   using namespace ROOT::Experimental::Internal;
   return std::unique_ptr<TFileStorageInterface>{std::move(v6storage)};
@@ -191,7 +191,7 @@ std::string ROOT::Experimental::TFile::SetCacheDir(std::string_view path) {
   std::lock_guard<std::mutex> lock(GetCacheDirMutex());
 
   std::string ret = ::TFile::GetCacheFileDir();
-  ::TFile::SetCacheFileDir(path.to_string().c_str());
+  ::TFile::SetCacheFileDir(path.data());
   return ret;
 }
 
