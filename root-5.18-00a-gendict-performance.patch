diff -Naur orig.root/reflex/python/genreflex/gendict.py root/reflex/python/genreflex/gendict.py
--- orig.root/reflex/python/genreflex/gendict.py	2008-02-21 17:38:28.000000000 +0100
+++ root/reflex/python/genreflex/gendict.py	2008-06-07 04:59:26.000000000 +0200
@@ -890,7 +890,15 @@
       elif colon  : s = '::'
     return s
 #----------------------------------------------------------------------------------
-  def genTypeName(self, id, enum=False, const=False, colon=False, alltempl=False) :
+  def genTypeName(self, id, enum=False, const=False, colon=False, alltempl=False, _useCache=True,_cache={}) :
+    if _useCache:
+        key = (self,id,enum,const,colon,alltempl)
+        if _cache.has_key(key):
+            return _cache[key]
+        else:
+            ret = self.genTypeName(id,enum,const,colon,alltempl,False)
+            _cache[key] = ret
+            return ret
     elem  = self.xref[id]['elem']
     attrs = self.xref[id]['attrs']
     if self.isUnnamedType(attrs.get('demangled')) :
@@ -1733,7 +1741,15 @@
 #---------------------------------------------------------------------------------------
 def normalizeClassAllTempl(name)   : return normalizeClass(name,True)
 def normalizeClassNoDefTempl(name) : return normalizeClass(name,False)
-def normalizeClass(name,alltempl) :
+def normalizeClass(name,alltempl,_useCache=True,_cache={}) :
+  if _useCache:
+    key = (name,alltempl)
+    if _cache.has_key(key):
+        return _cache[key]    
+    else:
+        ret = normalizeClass(name,alltempl,False)
+        _cache[key] = ret
+        return ret
   names, cnt = [], 0
   for s in string.split(name,'::') :
     if cnt == 0 : names.append(s)
@@ -1744,8 +1760,16 @@
 #--------------------------------------------------------------------------------------
 def normalizeFragmentAllTempl(name)   : return normalizeFragment(name,True)
 def normalizeFragmentNoDefTempl(name) : return normalizeFragment(name) 
-def normalizeFragment(name,alltempl=False) :
+def normalizeFragment(name,alltempl=False,_useCache=True,_cache={}) :
   name = name.strip()
+  if _useCache:
+    key = (name,alltempl)
+    if _cache.has_key(key):
+        return _cache[key]    
+    else:
+        ret = normalizeFragment(name,alltempl,False)
+        _cache[key] = ret
+        return ret
   if name.find('<') == -1  : 
     nor =  name
     for e in [ ['long long unsigned int', 'unsigned long long'],
