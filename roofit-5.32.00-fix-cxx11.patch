index 34bee65..d9508d4 100644
--- a/roofit/roofitcore/src/RooNumIntFactory.cxx
+++ b/roofit/roofitcore/src/RooNumIntFactory.cxx
@@ -151,7 +151,7 @@ Bool_t RooNumIntFactory::storeProtoIntegrator(RooAbsIntegrator* proto, const Roo
   }
 
   // Add to factory 
-  _map[name.Data()] = make_pair<RooAbsIntegrator*,std::string>(proto,depName) ;
+  _map[name.Data()] = make_pair(proto,depName) ;
 
   // Add default config to master config
   RooNumIntConfig::defaultConfig().addConfigSection(proto,defConfig) ;
index 2a70b42..29a1a73 100644
--- a/roofit/roofitcore/src/RooResolutionModel.cxx
+++ b/roofit/roofitcore/src/RooResolutionModel.cxx
@@ -325,7 +325,7 @@ Bool_t RooResolutionModel::traceEvalHook(Double_t value) const
   // Floating point error checking and tracing for given float value
 
   // check for a math error or negative value
-  return isnan(value) ;
+  return std::isnan(value) ;
 }
 
 
diff --git a/roostats/src/HypoTestInverterOriginal.cxx b/roostats/src/HypoTestInverterOriginal.cxx
index 9b9f61b..5f921de 100644
--- a/roofit/roostats/src/HypoTestInverterOriginal.cxx
+++ b/roofit/roostats/src/HypoTestInverterOriginal.cxx
@@ -195,7 +195,7 @@ bool HypoTestInverterOriginal::RunAutoScan( double xMin, double xMax, double tar
 	x = (log(target) - log(b)) / a;
 
 	// to do: do not allow next iteration outside the xMin,xMax interval
-	if (x<xMin || x>xMax || isnan(x)) {
+	if (x<xMin || x>xMax || std::isnan(x)) {
 	  std::cout << "Extrapolated value out of range or nan: exits\n";
 	  quitThisLoop = true;
 	}
@@ -206,7 +206,7 @@ bool HypoTestInverterOriginal::RunAutoScan( double xMin, double xMax, double tar
 	double b = leftCL-a*leftX;
 	x = (target-b)/a;
 
-	if (x<xMin || x>xMax || isnan(x)) {
+	if (x<xMin || x>xMax || std::isnan(x)) {
 	  std::cout << "Extrapolated value out of range or nan: exits\n";
 	  quitThisLoop = true;
 	}
diff --git a/roostats/src/HypoTestResult.cxx b/roostats/src/HypoTestResult.cxx
index 6b3ba43..bebe442 100644
--- a/roofit/roostats/src/HypoTestResult.cxx
+++ b/roofit/roostats/src/HypoTestResult.cxx
@@ -45,7 +45,7 @@ END_HTML
 
 #include <limits>
 #define NaN numeric_limits<float>::quiet_NaN()
-#define IsNaN(a) isnan(a)
+#define IsNaN(a) std::isnan(a)
 
 ClassImp(RooStats::HypoTestResult) ;
 
diff --git a/roofit/roofitcore/src/RooAbsPdf.cxx b/roofit/roofitcore/src/RooAbsPdf.cxx
index 8955fb5..65cc95d 100644
--- a/roofit/roofitcore/src/RooAbsPdf.cxx
+++ b/roofit/roofitcore/src/RooAbsPdf.cxx
@@ -331,7 +331,7 @@ Bool_t RooAbsPdf::traceEvalPdf(Double_t value) const
 
   // check for a math error or negative value
   Bool_t error(kFALSE) ;
-  if (isnan(value)) {
+  if (std::isnan(value)) {
     logEvalError(Form("p.d.f value is Not-a-Number (%f), forcing value to zero",value)) ;
     error=kTRUE ;
   }
@@ -542,7 +542,7 @@ Bool_t RooAbsPdf::traceEvalHook(Double_t value) const
   // Floating point error checking and tracing for given float value
 
   // check for a math error or negative value
-  Bool_t error= isnan(value) || (value < 0);
+  Bool_t error= std::isnan(value) || (value < 0);
 
   // do nothing if we are no longer tracing evaluations and there was no error
   if(!error && _traceCount <= 0) return error ;
