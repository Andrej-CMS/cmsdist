diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveBrowser.cxx root/graf3d/eve/src/TEveBrowser.cxx
--- root-5.27.04/graf3d/eve/src/TEveBrowser.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveBrowser.cxx	2010-08-16 19:18:22.000000000 +0200
@@ -669,7 +669,7 @@
       }
       case kNewTextEditor: {
          StartEmbedding(1);
-         gROOT->ProcessLineFast(Form("new TGTextEditor((const char *)0, (const TGWindow *)0x%lx)", gClient->GetRoot()));
+         gROOT->ProcessLineFast(Form("new TGTextEditor((const char *)0, (const TGWindow *)0x%lx)", (ULong_t)gClient->GetRoot()));
          StopEmbedding();
          SetTabTitle("Editor", 1);
          break;
@@ -680,7 +680,7 @@
          {
             StartEmbedding(1);
             gROOT->ProcessLine(Form("new TGHtmlBrowser(\"http://root.cern.ch/root/html/ClassIndex.html\", \
-                              (const TGWindow *)0x%lx)", gClient->GetRoot()));
+                              (const TGWindow *)0x%lx)", (ULong_t)gClient->GetRoot()));
             StopEmbedding();
             SetTabTitle("HTML", 1);
          }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveCalo2DGL.cxx root/graf3d/eve/src/TEveCalo2DGL.cxx
--- root-5.27.04/graf3d/eve/src/TEveCalo2DGL.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveCalo2DGL.cxx	2010-08-16 19:18:20.000000000 +0200
@@ -459,7 +459,7 @@
    TGLUtil::LockColor();
    try
    {
-      if (!fM->fData->GetCellsHighlighted().empty()) 
+      if (!fM->fData->GetCellsHighlighted().empty())
       {
          glColor4ubv(rnrCtx.ColorSet().Selection(3).CArr());
 
@@ -484,7 +484,7 @@
    }
    catch (TEveException& exc)
    {
-      Warning(eh, exc);
+      Warning(eh, "%s", exc.what());
    }
 
    TGLUtil::UnlockColor();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveElement.cxx root/graf3d/eve/src/TEveElement.cxx
--- root-5.27.04/graf3d/eve/src/TEveElement.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveElement.cxx	2010-08-16 19:18:22.000000000 +0200
@@ -664,7 +664,7 @@
       if (gEve->GetUseOrphanage())
       {
          if (gDebug > 0)
-            Info(eh, Form("moving to orphanage '%s' on zero reference count.", GetElementName()));
+            Info(eh, "moving to orphanage '%s' on zero reference count.", GetElementName());
 
          PreDeleteElement();
          gEve->GetOrphanage()->AddElement(this);
@@ -672,7 +672,7 @@
       else
       {
          if (gDebug > 0)
-            Info(eh, Form("auto-destructing '%s' on zero reference count.", GetElementName()));
+            Info(eh, "auto-destructing '%s' on zero reference count.", GetElementName());
 
          PreDeleteElement();
          delete this;
@@ -960,7 +960,7 @@
    // Export render-element to CINT with variable name var_name.
 
    const char* cname = IsA()->GetName();
-   gROOT->ProcessLine(TString::Format("%s* %s = (%s*)0x%lx;", cname, var_name, cname, this));
+   gROOT->ProcessLine(TString::Format("%s* %s = (%s*)0x%lx;", cname, var_name, cname, (ULong_t)this));
 }
 
 /******************************************************************************/
@@ -1008,7 +1008,7 @@
       throw eh + "source-object not set.";
 
    const char* cname = so->IsA()->GetName();
-   gROOT->ProcessLine(TString::Format("%s* %s = (%s*)0x%lx;", cname, var_name, cname, so));
+   gROOT->ProcessLine(TString::Format("%s* %s = (%s*)0x%lx;", cname, var_name, cname, (ULong_t)so));
 }
 
 /******************************************************************************/
@@ -1639,7 +1639,7 @@
 
    if (fDenyDestroy > 0)
       throw eh + TString::Format("element '%s' (%s*) 0x%lx is protected against destruction.",
-                                 GetElementName(), IsA()->GetName(), this);
+                                 GetElementName(), IsA()->GetName(), (ULong_t)this);
 
    PreDeleteElement();
    delete this;
@@ -1659,7 +1659,7 @@
    }
    catch (TEveException& exc)
    {
-      Warning(eh, exc);
+      Warning(eh, "%s", exc.Data());
    }
 }
 
@@ -1678,15 +1678,14 @@
             c->Destroy();
          }
          catch (TEveException exc) {
-            Warning(eh, Form("element destruction failed: '%s'.", exc.Data()));
+            Warning(eh, "element destruction failed: '%s'.", exc.Data());
             RemoveElement(c);
          }
       }
       else
       {
          if (gDebug > 0)
-            Info(eh, Form("element '%s' is protected agains destruction, removing locally.",
-			  c->GetElementName()));
+            Info(eh, "element '%s' is protected agains destruction, removing locally.", c->GetElementName());
          RemoveElement(c);
       }
    }
@@ -2092,7 +2091,7 @@
 
    TObject* obj = GetObject(eh);
    const char* cname = obj->IsA()->GetName();
-   gROOT->ProcessLine(Form("%s* %s = (%s*)0x%lx;", cname, var_name, cname, obj));
+   gROOT->ProcessLine(Form("%s* %s = (%s*)0x%lx;", cname, var_name, cname, (ULong_t)obj));
 }
 
 //______________________________________________________________________________
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveManager.cxx root/graf3d/eve/src/TEveManager.cxx
--- root-5.27.04/graf3d/eve/src/TEveManager.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveManager.cxx	2010-08-16 19:18:20.000000000 +0200
@@ -229,7 +229,7 @@
 
    fBrowser->Disconnect("CloseWindow()", this, "CloseEveWindow()");
    fBrowser->GetMainFrame()->DontCallClose();
-   fBrowser->GetMainFrame()->CloseWindow(); 
+   fBrowser->GetMainFrame()->CloseWindow();
 }
 
 //______________________________________________________________________________
@@ -967,7 +967,7 @@
 
    TEveException* ex = dynamic_cast<TEveException*>(&exc);
    if (ex) {
-      Info("Handle", ex->Data());
+      Info("Handle", "%s", ex->Data());
       gEve->SetStatusLine(ex->Data());
       gSystem->Beep();
       return kSEHandled;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveTrackEditor.cxx root/graf3d/eve/src/TEveTrackEditor.cxx
--- root-5.27.04/graf3d/eve/src/TEveTrackEditor.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveTrackEditor.cxx	2010-08-16 19:18:26.000000000 +0200
@@ -177,10 +177,10 @@
 
    Float_t llim;
    fPtRange->SetValues(fTC->fMinPt, fTC->fMaxPt);
-   llim = TMath::Log10(fTC->fLimPt);
+   llim = fTC->fLimPt > 1 ? TMath::Log10(fTC->fLimPt) : 0;
    fPtRange->SetLimits(0, fTC->fLimPt, llim < 2 ? TGNumberFormat::kNESRealTwo : (llim < 3 ? TGNumberFormat::kNESRealOne : TGNumberFormat::kNESInteger));
    fPRange ->SetValues(fTC->fMinP, fTC->fMaxP);
-   llim = TMath::Log10(fTC->fLimP);
+   llim = fTC->fLimP > 1 ? TMath::Log10(fTC->fLimP) : 0;
    fPRange ->SetLimits(0, fTC->fLimP, llim < 2 ? TGNumberFormat::kNESRealTwo : (llim < 3 ? TGNumberFormat::kNESRealOne : TGNumberFormat::kNESInteger));
 
    fRSSubEditor->SetModel(fTC->GetPropagator());
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveTrackPropagator.cxx root/graf3d/eve/src/TEveTrackPropagator.cxx
--- root-5.27.04/graf3d/eve/src/TEveTrackPropagator.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveTrackPropagator.cxx	2010-08-16 19:18:26.000000000 +0200
@@ -518,8 +518,9 @@
    {
       TEveVector d1 = v;
       d1 -= currV;
+      Float_t d1_mag = d1.Mag();
 
-      if (d1.Mag() > kStepEps)
+      if (d1_mag > kStepEps)
       {
          Float_t step_frac = prod0 / (prod0 - prod1);
          if (step_frac > 0)
@@ -527,7 +528,7 @@
             // Step for fraction of previous step size.
             // We pass 'enforce_max_step' flag to Update().
             Float_t orig_max_step = fH.fMaxStep;
-            fH.fMaxStep *= step_frac;
+            fH.fMaxStep = d1_mag * step_frac;
             Update(currV, p, kTRUE, kTRUE);
             Step(currV, p, forwV, forwP);
             p     = forwP;
@@ -996,9 +997,9 @@
   Double_t yt;
   Double_t zt;
 
-  // Double_t maxit = 1992;
-  Double_t maxit = 10;
-  Double_t maxcut = 11;
+  // const Int_t maxit = 1992;
+  const Int_t maxit  = 500;
+  const Int_t maxcut = 11;
 
   const Double_t hmin   = 1e-4; // !!! MT ADD,  should be member
   const Double_t kdlt   = 1e-3; // !!! MT CHANGE from 1e-4, should be member
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveTriangleSet.cxx root/graf3d/eve/src/TEveTriangleSet.cxx
--- root-5.27.04/graf3d/eve/src/TEveTriangleSet.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveTriangleSet.cxx	2010-08-16 19:18:20.000000000 +0200
@@ -159,7 +159,7 @@
 
    FILE* f = fopen(file, "r");
    if (f == 0) {
-      ::Error(kEH, Form("file '%s' not found.", file));
+      ::Error(kEH, "file '%s' not found.", file);
       return 0;
    }
 
@@ -185,4 +185,3 @@
 
    return ts;
 }
-
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/eve/src/TEveUtil.cxx root/graf3d/eve/src/TEveUtil.cxx
--- root-5.27.04/graf3d/eve/src/TEveUtil.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/eve/src/TEveUtil.cxx	2010-08-16 19:18:20.000000000 +0200
@@ -224,7 +224,7 @@
 
    UChar_t alpha = (255*(100 - transparency))/100;
 
-   TColor* c = gROOT->GetColor(ci);   
+   TColor* c = gROOT->GetColor(ci);
    if (c)
    {
       col[0] = (UChar_t)(255*c->GetRed());
@@ -609,8 +609,8 @@
       fBackRefs.erase(i);
       TEveRefCnt::DecRefCount();
    } else {
-      Warning(eh, Form("render element '%s' not found in back-refs.",
-                       re->GetObject(eh)->GetName()));
+      Warning(eh, "render element '%s' not found in back-refs.",
+                  re->GetObject(eh)->GetName());
    }
 }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGL5DPainter.cxx root/graf3d/gl/src/TGL5DPainter.cxx
--- root-5.27.04/graf3d/gl/src/TGL5DPainter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGL5DPainter.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -46,8 +46,8 @@
 }
 
 //______________________________________________________________________________
-TGL5DPainter::SurfIter_t TGL5DPainter::AddSurface(Double_t v4, Color_t ci, 
-                                                  Double_t iso, Double_t sigma, 
+TGL5DPainter::SurfIter_t TGL5DPainter::AddSurface(Double_t v4, Color_t ci,
+                                                  Double_t iso, Double_t sigma,
                                                   Double_t range, Int_t lownps)
 {
    //Try to add new iso-surface.
@@ -66,9 +66,9 @@
 
    Info("TGL5DPainter::AddSurface", "Building the mesh ...");
    //Prepare grid parameters.
-   Rgl::Mc::TGridGeometry<Float_t> geom(fXAxis, fYAxis, fZAxis, 
+   Rgl::Mc::TGridGeometry<Float_t> geom(fXAxis, fYAxis, fZAxis,
                                         fCoord->GetXScale(),
-                                        fCoord->GetYScale(), 
+                                        fCoord->GetYScale(),
                                         fCoord->GetZScale());
    Mesh_t mesh;
    fMeshBuilder.SetGeometry(fData);
@@ -76,19 +76,19 @@
    fMeshBuilder.BuildMesh(&fKDE, geom, &mesh, iso);
 
    Info("TGL5DPainter::AddSurface", "Mesh has %d vertices", Int_t(mesh.fVerts.size() / 3));
-   
+
    if (!mesh.fVerts.size())//I do not need an empty mesh.
       return fIsos.end();
    //Add surface with empty mesh and swap meshes.
    fIsos.push_front(fDummy);
-   
+
    fIsos.front().fMesh.Swap(mesh);
    fIsos.front().f4D = v4;
    fIsos.front().fRange = range;
    fIsos.front().fShowCloud = kFALSE;
    fIsos.front().fHide = kFALSE;
    fIsos.front().fColor = ci;
-   
+
    //Predictions for the 5-th variable.
    //Not-implemented yet.
    return fIsos.begin();
@@ -101,7 +101,7 @@
    const Rgl::Range_t &v4R = fData->fV4MinMax;
    const Bool_t isString   = fData->fV4IsString;
    const Double_t rms  = TMath::RMS(fData->fNP, fData->fV4);  //RMS of the N points.
-   const Double_t d    = isString ? (v4R.second - v4R.first) / (fNContours - 1) 
+   const Double_t d    = isString ? (v4R.second - v4R.first) / (fNContours - 1)
                                   : 6 * rms / fNContours;
    //alpha is in [0.1, 0.5], 1e-3 -s good for strings.
    const Double_t range = isString ? 1e-3 : fAlpha * d;
@@ -159,23 +159,23 @@
    const Double_t mean = TMath::Mean(fData->fNP, fData->fV4); //mean value of the NP points.
    const Double_t rms  = TMath::RMS(fData->fNP, fData->fV4);  //RMS of the N points.
    const Double_t min  = isString ? v4R.first : mean - 3 * rms; //take a range +- 3*xrms
-   const Double_t d    = isString ? (v4R.second - v4R.first) / (fNContours - 1) 
+   const Double_t d    = isString ? (v4R.second - v4R.first) / (fNContours - 1)
                                   : 6 * rms / fNContours;
    //alpha is in [0.1, 0.5], 1e-3 -s good for strings.
    const Double_t range = isString ? 1e-3 : fAlpha * d;
 
    Info("InitGeometry", "min = %g, mean = %g, rms = %g, dx = %g", min, mean, rms, d);
-   
+
    for (Int_t j = 0; j < fNContours; ++j) {
       const Double_t isoLevel = min + j * d;
       Info("TGL5DPainter::InitGeometry", "Iso-level %g, range is %g ...", isoLevel, range);
       const Color_t color = j * 6 + 1;
       AddSurface(isoLevel, color, 0.125, 0.05, range);
    }
-   
+
    if (fIsos.size())
       fBoxCut.TurnOnOff();
-   
+
    return fInit = kTRUE;
 }
 
@@ -196,7 +196,7 @@
    if (fSelectedPart >= fSelectionBase) {//Pan camera.
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
@@ -209,16 +209,16 @@
 
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis)) {
             fBoxCut.MoveBox(px, py, fSelectedPart);
          }
       }
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -251,7 +251,7 @@
       if (fBoxCut.IsActive())
          fBoxCut.TurnOnOff();
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    }
@@ -266,7 +266,7 @@
       fInit = kFALSE;
       InitGeometry();
    }
-   
+
    if (fData->fV4IsString)
       Warning("SetAlpha", "Alpha is not required for string data (your 4-th dimension is string).");
 }
@@ -280,7 +280,7 @@
       Warning("SetNContours", "Bad number of contours: %d", n);
       return;
    }
-      
+
    fNContours = n;
    fInit = kFALSE;
    InitGeometry();
@@ -306,9 +306,9 @@
       fKDE.BuildModel(fData, 0.05);//0.05 is sigma, will be controlled via GUI.
       Info("TGL5DPainter::ResetGeometryRanges", "Building the mesh ...");
       //Prepare grid parameters.
-      Rgl::Mc::TGridGeometry<Float_t> geom(fXAxis, fYAxis, fZAxis, 
+      Rgl::Mc::TGridGeometry<Float_t> geom(fXAxis, fYAxis, fZAxis,
                                            fCoord->GetXScale(),
-                                           fCoord->GetYScale(), 
+                                           fCoord->GetYScale(),
                                            fCoord->GetZScale());
       fMeshBuilder.SetGeometry(fData);
       Mesh_t &mesh = surf->fMesh;
@@ -354,7 +354,7 @@
 {
    //Return some gl states to original values.
    glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE);
-   glDisable(GL_CULL_FACE);   
+   glDisable(GL_CULL_FACE);
    glDisable(GL_DEPTH_TEST);
    glDisable(GL_LIGHT0);
    glDisable(GL_LIGHTING);
@@ -367,7 +367,7 @@
 
    //Shift plot to point of origin.
    const Rgl::PlotTranslation trGuard(this);
-   
+
    fBackBox.DrawBox(fSelectedPart, fSelectionPass, fZLevels, fHighColor);
    //
    if (!fIsos.size())
@@ -424,7 +424,7 @@
          glDepthMask(GL_TRUE);
       }
    }
-   
+
    if (fBoxCut.IsActive())
       fBoxCut.DrawBox(fSelectionPass, fSelectedPart);
 }
@@ -449,21 +449,21 @@
    //Draw full cloud of points.
    const TGLDisableGuard light(GL_LIGHTING);
    const TGLDisableGuard depth(GL_DEPTH_TEST);
-   
+
    glColor3d(0.4, 0., 1.);
    glPointSize(3.f);
-   
+
    glBegin(GL_POINTS);
-   
+
    const Double_t xs = fCoord->GetXScale();
    const Double_t ys = fCoord->GetYScale();
    const Double_t zs = fCoord->GetZScale();
-   
+
    for (Int_t i = 0; i < fData->fNP; ++i)
       glVertex3d(fData->fV1[i] * xs, fData->fV2[i] * ys, fData->fV3[i] * zs);
-   
+
    glEnd();
-   
+
    glPointSize(1.f);
 }
 
@@ -472,25 +472,25 @@
 {
    //Draw cloud for selected iso-surface.
    const TGLDisableGuard light(GL_LIGHTING);
-   
+
    Float_t rgb[3] = {};
    Rgl::Pad::ExtractRGB(ci, rgb);
-   
+
    glColor3fv(rgb);
    glPointSize(3.f);
-   
+
    glBegin(GL_POINTS);
-   
+
    const Double_t xs = fCoord->GetXScale();
    const Double_t ys = fCoord->GetYScale();
    const Double_t zs = fCoord->GetZScale();
-   
+
    for (Int_t i = 0; i < fData->fNP; ++i)
       if (TMath::Abs(fData->fV4[i] - v4) < range)
          glVertex3d(fData->fV1[i] * xs, fData->fV2[i] * ys, fData->fV3[i] * zs);
-   
+
    glEnd();
-   
+
    glPointSize(1.f);
 }
 
@@ -500,7 +500,7 @@
    //Draw one iso-surface.
 
    const Mesh_t &m = surf->fMesh;
-      
+
    if (!fBoxCut.IsActive()) {
       if (!fSelectionPass)
          Rgl::DrawMesh(m.fVerts, m.fNorms, m.fTris);
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLBoxPainter.cxx root/graf3d/gl/src/TGLBoxPainter.cxx
--- root-5.27.04/graf3d/gl/src/TGLBoxPainter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLBoxPainter.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -136,7 +136,7 @@
    if (fSelectedPart >= fSelectionBase) {//Pan camera.
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
@@ -149,11 +149,11 @@
       py = fCamera->GetHeight() - py;
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
-      
+
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis))
             fBoxCut.MoveBox(px, py, fSelectedPart);
@@ -162,7 +162,7 @@
       } else {
          MoveSection(px, py);
       }
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -197,7 +197,7 @@
       if (fBoxCut.IsActive())
          fBoxCut.TurnOnOff();
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    } else if (event == kKeyPress && (py == kKey_c || py == kKey_C)) {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLContext.cxx root/graf3d/gl/src/TGLContext.cxx
--- root-5.27.04/graf3d/gl/src/TGLContext.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLContext.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -58,7 +58,7 @@
 
    if (!gVirtualX->IsCmdThread()) {
       gROOT->ProcessLineFast(Form("((TGLContext *)0x%lx)->SetContext((TGLWidget *)0x%lx, (TGLContext *)0x%lx)",
-                                  this, wid, shareList));
+                                  (ULong_t)this, (ULong_t)wid, (ULong_t)shareList));
    } else {
       SetContext(wid, shareList);
    }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLCylinder.cxx root/graf3d/gl/src/TGLCylinder.cxx
--- root-5.27.04/graf3d/gl/src/TGLCylinder.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLCylinder.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -618,8 +618,8 @@
 {
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLCylinder::DirectDraw", "this %d (class %s) LOD %d",
-           this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLCylinder::DirectDraw", "this %ld (class %s) LOD %d",
+           (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    // As we are now support display list caching we can create, draw and
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLEventHandler.cxx root/graf3d/gl/src/TGLEventHandler.cxx
--- root-5.27.04/graf3d/gl/src/TGLEventHandler.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLEventHandler.cxx	2010-08-16 19:18:24.000000000 +0200
@@ -729,8 +729,12 @@
 {
    // Handle keyboard 'event'.
 
-  if (fTooltipShown)
-    fTooltip->Hide();
+   // We only handle key-press events.
+   if (event->fType == kKeyRelease)
+      return kTRUE;
+
+   if (fTooltipShown)
+      fTooltip->Hide();
 
    fLastEventState = event->fState;
 
@@ -824,7 +828,7 @@
             } else {
                fGLViewer->ResetCurrentCamera();
             }
-               redraw = kTRUE;
+            redraw = kTRUE;
             break;
 
             // Toggle debugging mode
@@ -836,7 +840,7 @@
             // Forced rebuild for debugging mode
          case kKey_D:
             if (fGLViewer->fDebugMode) {
-               Info("OpenGL viewer FORCED rebuild", "");
+               Info("OpenGL viewer FORCED rebuild", " ");
                fGLViewer->UpdateScene();
             }
          default:;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLFaceSet.cxx root/graf3d/gl/src/TGLFaceSet.cxx
--- root-5.27.04/graf3d/gl/src/TGLFaceSet.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLFaceSet.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -139,7 +139,7 @@
 {
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLFaceSet::DirectDraw", "this %d (class %s) LOD %d", this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLFaceSet::DirectDraw", "this %ld (class %s) LOD %d", (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    if (fNbPols == 0) return;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLLegoPainter.cxx root/graf3d/gl/src/TGLLegoPainter.cxx
--- root-5.27.04/graf3d/gl/src/TGLLegoPainter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLLegoPainter.cxx	2010-08-16 19:18:22.000000000 +0200
@@ -387,7 +387,7 @@
    if (fSelectedPart >= fSelectionBase || fSelectedPart == 1) {
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
@@ -400,10 +400,10 @@
 
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis))
             fBoxCut.MoveBox(px, py, fSelectedPart);
@@ -411,7 +411,7 @@
             MoveSection(px, py);
       } else
          MoveSection(px, py);
-         
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -484,7 +484,7 @@
 
    //Shift plot to point of origin.
    const Rgl::PlotTranslation trGuard(this);
-   
+
    switch (fCoord->GetCoordType()) {
    case kGLCartesian:
       return DrawLegoCartesian();
@@ -509,7 +509,7 @@
    }
 
    //const TGLDisableGuard depthTest(GL_DEPTH_TEST); //[0-0]
-   
+
    if (!fSelectionPass) {
       glEnable(GL_POLYGON_OFFSET_FILL);//[0
       glPolygonOffset(1.f, 1.f);
@@ -1058,7 +1058,7 @@
          fBoxCut.TurnOnOff();
       //gGLManager->PaintSingleObject(this);
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    } else if (event == kKeyPress && (py == kKey_c || py == kKey_C)) {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLLogicalShape.cxx root/graf3d/gl/src/TGLLogicalShape.cxx
--- root-5.27.04/graf3d/gl/src/TGLLogicalShape.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLLogicalShape.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -371,7 +371,7 @@
 
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLLogicalShape::Draw", "this %d (class %s) LOD %d", this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLLogicalShape::Draw", "this %ld (class %s) LOD %d", (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
 entry_point:
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLPShapeObjEditor.cxx root/graf3d/gl/src/TGLPShapeObjEditor.cxx
--- root-5.27.04/graf3d/gl/src/TGLPShapeObjEditor.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLPShapeObjEditor.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -516,7 +516,7 @@
    // Draw local sphere reflecting current color options.
 
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLPShapeObjEditor *)0x%lx)->DrawSphere()", this));
+      gROOT->ProcessLineFast(Form("((TGLPShapeObjEditor *)0x%lx)->DrawSphere()", (ULong_t)this));
       return;
    }
 
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLPadPainter.cxx root/graf3d/gl/src/TGLPadPainter.cxx
--- root-5.27.04/graf3d/gl/src/TGLPadPainter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLPadPainter.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -27,7 +27,7 @@
 
 //______________________________________________________________________________
    //"Delegating" part of TGLPadPainter. Line/fill/etc. attributes can be
-   //set inside TPad, but not only there: 
+   //set inside TPad, but not only there:
    //many of them are set by base sub-objects of 2d primitives
    //(2d primitives usually inherit TAttLine or TAttFill etc.).  And these sub-objects
    //call gVirtualX->SetLineWidth ... etc. So, if I save some attributes in my painter,
@@ -255,17 +255,17 @@
 
    if (TPad *pad = dynamic_cast<TPad *>(gPad)) {
       Int_t px = 0, py = 0;
-      
+
       pad->XYtoAbsPixel(pad->GetX1(), pad->GetY1(), px, py);
-      
+
       py = gPad->GetWh() - py;
       //
       glViewport(px, py, GLsizei(gPad->GetWw() * pad->GetAbsWNDC()), GLsizei(gPad->GetWh() * pad->GetAbsHNDC()));
-      
+
       glMatrixMode(GL_PROJECTION);
       glLoadIdentity();
       glOrtho(pad->GetX1(), pad->GetX2(), pad->GetY1(), pad->GetY2(), -10., 10.);
-      
+
       glMatrixMode(GL_MODELVIEW);
       glLoadIdentity();
       glTranslated(0., 0., -1.);
@@ -279,7 +279,7 @@
 void TGLPadPainter::InitPainter()
 {
    //Init gl-pad painter:
-   //1. 2D painter does not use depth test, should not modify 
+   //1. 2D painter does not use depth test, should not modify
    //   depth-buffer content (except initial cleanup).
    //2. Disable cull face.
    //3. Disable lighting.
@@ -289,24 +289,24 @@
    glDisable(GL_DEPTH_TEST);
    glDisable(GL_CULL_FACE);
    glDisable(GL_LIGHTING);
-   
+
    //Clear the buffer
    glViewport(0, 0, GLsizei(gPad->GetWw()), GLsizei(gPad->GetWh()));
-   
+
    glDepthMask(GL_TRUE);
    glClearColor(1.,1.,1.,1.);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glDepthMask(GL_FALSE);
-   
+
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
-   
+
    glOrtho(gPad->GetX1(), gPad->GetX2(), gPad->GetY1(), gPad->GetY2(), -10., 10.);
 
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glTranslated(0., 0., -1.);
-   
+
    fLocked = kFALSE;
 }
 
@@ -320,9 +320,9 @@
 
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
-   
+
    glOrtho(gPad->GetX1(), gPad->GetX2(), gPad->GetY1(), gPad->GetY2(), -10., 10.);
-   
+
    glMatrixMode(GL_MODELVIEW);
 }
 
@@ -334,7 +334,7 @@
    //can be executed.
    if (fLocked)
       return;
-      
+
    glFinish();
    fLocked = kTRUE;
 }
@@ -356,7 +356,7 @@
       //that TView3D wants to draw itself in a XOR mode, via
       //gVirtualX.
       if (gVirtualX->GetDrawMode() == TVirtualX::kInvert) {
-         gVirtualX->DrawLine(gPad->XtoAbsPixel(x1), gPad->YtoAbsPixel(y1), 
+         gVirtualX->DrawLine(gPad->XtoAbsPixel(x1), gPad->YtoAbsPixel(y1),
                              gPad->XtoAbsPixel(x2), gPad->YtoAbsPixel(y2));
       }
 
@@ -369,7 +369,7 @@
    glVertex2d(x1, y1);
    glVertex2d(x2, y2);
    glEnd();
-   
+
    if (gVirtualX->GetLineWidth() > lineWidthTS) {
       Double_t pointSize = gVirtualX->GetLineWidth();
       if (pointSize > fLimits.GetMaxPointSize())
@@ -382,7 +382,7 @@
       glVertex2d(x1, y1);
       glVertex2d(x2, y2);
 
-      glEnd(); 
+      glEnd();
       glPointSize(1.f);
    }
 
@@ -394,7 +394,7 @@
    //Draw line segment in NDC coordinates.
    if (fLocked)
       return;
-      
+
    const Rgl::Pad::LineAttribSet lineAttribs(kTRUE, gVirtualX->GetLineStyle(), fLimits.GetMaxLineWidth(), kTRUE);
    const Double_t xRange = gPad->GetX2() - gPad->GetX1();
    const Double_t yRange = gPad->GetY2() - gPad->GetY1();
@@ -402,7 +402,7 @@
    glBegin(GL_LINES);
    glVertex2d(gPad->GetX1() + u1 * xRange, gPad->GetY1() + v1 * yRange);
    glVertex2d(gPad->GetX1() + u2 * xRange, gPad->GetY1() + v2 * yRange);
-   glEnd();   
+   glEnd();
 }
 
 //______________________________________________________________________________
@@ -438,7 +438,7 @@
    }
 
    fVs.resize(n * 3);
-   
+
    for (Int_t i = 0; i < n; ++i) {
       fVs[i * 3]     = x[i];
       fVs[i * 3 + 1] = y[i];
@@ -454,7 +454,7 @@
    for (Int_t i = 0; i < n; ++i)
       gluTessVertex(t, &fVs[i * 3], &fVs[i * 3]);
 
-      
+
    gluEndPolygon(t);
 }
 
@@ -472,7 +472,7 @@
    }
 
    fVs.resize(n * 3);
-   
+
    for (Int_t i = 0; i < n; ++i) {
       fVs[i * 3]     = x[i];
       fVs[i * 3 + 1] = y[i];
@@ -487,7 +487,7 @@
    for (Int_t i = 0; i < n; ++i)
       gluTessVertex(t, &fVs[i * 3], &fVs[i * 3]);
 
-      
+
    gluEndPolygon(t);
 }
 
@@ -510,7 +510,7 @@
       fIsHollowArea = kFALSE;
    }
    glEnd();
-   
+
    if (gVirtualX->GetLineWidth() > lineWidthTS) {
       Double_t pointSize = gVirtualX->GetLineWidth();
       if (pointSize > fLimits.GetMaxPointSize())
@@ -523,7 +523,7 @@
       for (Int_t i = 0; i < n; ++i)
          glVertex2d(x[i], y[i]);
 
-      glEnd(); 
+      glEnd();
       glPointSize(1.f);
    }
 }
@@ -533,8 +533,8 @@
 {
    //Never called?
    if (fLocked)
-      return;   
-   
+      return;
+
    const Rgl::Pad::LineAttribSet lineAttribs(kTRUE, gVirtualX->GetLineStyle(), fLimits.GetMaxLineWidth(), kTRUE);
 
    glBegin(GL_LINE_STRIP);
@@ -546,7 +546,7 @@
       glVertex2f(x[0], y[0]);
       fIsHollowArea = kFALSE;
    }
-      
+
    glEnd();
 }
 
@@ -561,7 +561,7 @@
    const Double_t xRange = gPad->GetX2() - gPad->GetX1();
    const Double_t yRange = gPad->GetY2() - gPad->GetY1();
    const Double_t x1 = gPad->GetX1(), y1 = gPad->GetY1();
-   
+
    glBegin(GL_LINE_STRIP);
 
    for (Int_t i = 0; i < n; ++i)
@@ -617,7 +617,7 @@
    Float_t rgba[3] = {};
    Rgl::Pad::ExtractRGB(gVirtualX->GetMarkerColor(), rgba);
    glColor3fv(rgba);
-   
+
    const TPoint *xy = &fPoly[0];
    const Style_t markerStyle = gVirtualX->GetMarkerStyle();
    const UInt_t n = UInt_t(fPoly.size());
@@ -679,7 +679,7 @@
    case kOpenStar:
       fMarker.DrawOpenStar(n, xy);
    }
-   
+
    RestoreProjectionMatrix();
    glMatrixMode(GL_MODELVIEW);
 }
@@ -688,7 +688,7 @@
 void TGLPadPainter::DrawText(Double_t x, Double_t y, const char *text, ETextMode /*mode*/)
 {
    //Draw text. This operation is especially
-   //dangerous if in locked state - 
+   //dangerous if in locked state -
    //ftgl will assert on zero texture size
    //(which is result of bad GL context).
    if (fLocked)
@@ -705,7 +705,7 @@
    Rgl::Pad::ExtractRGB(gVirtualX->GetTextColor(), rgba);
    glColor3fv(rgba);
 
-   fFM.RegisterFont(Int_t(gVirtualX->GetTextSize()) - 1, 
+   fFM.RegisterFont(Int_t(gVirtualX->GetTextSize()) - 1,
                     TGLFontManager::GetFontNameFromId(gVirtualX->GetTextFont()),
                     TGLFont::kTexture, fF);
    fF.PreRender();
@@ -722,7 +722,7 @@
 void TGLPadPainter::DrawTextNDC(Double_t u, Double_t v, const char *text, ETextMode mode)
 {
    //Draw text in NDC. This operation is especially
-   //dangerous if in locked state - 
+   //dangerous if in locked state -
    //ftgl will assert on zero texture size
    //(which is result of bad GL context).
    if (fLocked)
@@ -752,7 +752,7 @@
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
 }
-   
+
 //______________________________________________________________________________
 void TGLPadPainter::SaveModelviewMatrix()const
 {
@@ -794,7 +794,7 @@
 
    TVirtualPad *canvas = (TVirtualPad *)pad->GetCanvas();
    if (!canvas) return;
-   gROOT->ProcessLine(Form("((TCanvas *)0x%lx)->Flush();", canvas));
+   gROOT->ProcessLine(Form("((TCanvas *)0x%lx)->Flush();", (ULong_t)canvas));
 
    std::vector<unsigned> buff(canvas->GetWw() * canvas->GetWh());
    glPixelStorei(GL_PACK_ALIGNMENT, 1);
@@ -818,17 +818,17 @@
    }
 
    const Int_t nLines  = canvas->GetWh();
-   const Int_t nPixels = canvas->GetWw(); 
+   const Int_t nPixels = canvas->GetWw();
 
    for (Int_t i = 0; i < nLines; ++i) {
      Int_t base = (nLines - 1 - i) * nPixels;
      for (Int_t j = 0; j < nPixels; ++j, ++base) {
         //Uncomment/comment if you don't have GL_BGRA.
-        
+
         const UInt_t pix  = buff[base];
         const UInt_t bgra = ((pix & 0xff) << 16) | (pix & 0xff00) |
                             ((pix & 0xff0000) >> 16) | (pix & 0xff000000);
-        
+
         //argb[i * nPixels + j] = buff[base];
         argb[i * nPixels + j] = bgra;
      }
@@ -845,12 +845,12 @@
 void ConvertMarkerPoints(Int_t n, const ValueType *x, const ValueType *y, std::vector<TPoint> & dst)
 {
    const UInt_t padH = UInt_t(gPad->GetAbsHNDC() * gPad->GetWh());
-   
+
    dst.resize(n);
    for (Int_t i = 0; i < n; ++i) {
       dst[i].fX = gPad->XtoPixel(x[i]);
       dst[i].fY = padH - gPad->YtoPixel(y[i]);
-   }   
+   }
 }
 
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLParametric.cxx root/graf3d/gl/src/TGLParametric.cxx
--- root-5.27.04/graf3d/gl/src/TGLParametric.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLParametric.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -388,15 +388,15 @@
    if (fSelectedPart) {
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-   
+
       if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis))
          fBoxCut.MoveBox(px, fCamera->GetHeight() - py, fSelectedPart);
       else
          fCamera->Pan(px, py);
-         
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -427,7 +427,7 @@
    if (event == kButton1Double && fBoxCut.IsActive()) {
       fBoxCut.TurnOnOff();
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    } else if (event == kKeyPress) {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLPhysicalShape.cxx root/graf3d/gl/src/TGLPhysicalShape.cxx
--- root-5.27.04/graf3d/gl/src/TGLPhysicalShape.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLPhysicalShape.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -348,8 +348,8 @@
 
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLPhysicalShape::Draw", "this %d (class %s) LOD %d",
-           this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLPhysicalShape::Draw", "this %ld (class %s) LOD %d",
+           (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    // If LOD is pixel or less can draw pixel(point) directly, skipping
@@ -367,8 +367,8 @@
    }
 
    if (gDebug > 4) {
-      Info("TGLPhysicalShape::Draw", "this %d (class %s) LOD %d",
-           this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLPhysicalShape::Draw", "this %ld (class %s) LOD %d",
+           (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    glPushMatrix();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLPolyLine.cxx root/graf3d/gl/src/TGLPolyLine.cxx
--- root-5.27.04/graf3d/gl/src/TGLPolyLine.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLPolyLine.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -49,7 +49,7 @@
 {
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLPolyLine::DirectDraw", "this %d (class %s) LOD %d", this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLPolyLine::DirectDraw", "this %ld (class %s) LOD %d", (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    if (rnrCtx.DrawPass() == TGLRnrCtx::kPassOutlineLine)
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLPolyMarker.cxx root/graf3d/gl/src/TGLPolyMarker.cxx
--- root-5.27.04/graf3d/gl/src/TGLPolyMarker.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLPolyMarker.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -54,7 +54,7 @@
 {
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLPolyMarker::DirectDraw", "this %d (class %s) LOD %d", this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLPolyMarker::DirectDraw", "this %ld (class %s) LOD %d", (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    if (rnrCtx.DrawPass() == TGLRnrCtx::kPassOutlineLine)
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLScene.cxx root/graf3d/gl/src/TGLScene.cxx
--- root-5.27.04/graf3d/gl/src/TGLScene.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLScene.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -221,10 +221,10 @@
       out += Form("Drew scene (%s / %i LOD) - %i (Op %i Trans %i) %i pixel\n",
                   TGLRnrCtx::StyleName(LastStyle()), LastLOD(),
                   fOpaqueCnt + fTranspCnt, fOpaqueCnt, fTranspCnt, fAsPixelCnt);
-      out += Form("\tInner phys nums: physicals=%d, of_interest=%d, visible=%d, op=%d, trans=%d",
+      out += Form("\tInner phys nums: physicals=%d, of_interest=%lu, visible=%lu, op=%lu, trans=%lu",
                   ((TGLScene*)fScene)->GetMaxPhysicalID(),
-                  fShapesOfInterest.size(), fVisibleElements.size(),
-                  fOpaqueElements.size(), fTranspElements.size());
+                  (ULong_t)fShapesOfInterest.size(), (ULong_t)fVisibleElements.size(),
+                  (ULong_t)fOpaqueElements.size(), (ULong_t)fTranspElements.size());
 
       // By shape type counts
       if (gDebug>3)
@@ -236,7 +236,7 @@
             it++;
          }
       }
-      Info("TGLScene::DumpDrawStats()", out.Data());
+      Info("TGLScene::DumpDrawStats()", "%s",out.Data());
    }
 }
 
@@ -565,8 +565,8 @@
    TSceneInfo* sinfo = dynamic_cast<TSceneInfo*>(rnrCtx.GetSceneInfo());
    if (sinfo == 0 || sinfo->GetScene() != this) {
       TGLSceneInfo* si = rnrCtx.GetSceneInfo();
-      Error("TGLScene::PreDraw", Form("SceneInfo mismatch (0x%lx, '%s').",
-                                      si, si ? si->IsA()->GetName() : "<>"));
+      Error("TGLScene::PreDraw", "%s", Form("SceneInfo mismatch (0x%lx, '%s').",
+                                      (ULong_t)si, si ? si->IsA()->GetName() : "<>"));
       return;
    }
 
@@ -764,7 +764,7 @@
          if (gDebug > 3)
          {
             Info("TGLScene::RenderAllPasses()",
-                 "%d active clip planes", planeSet.size());
+                 "%ld active clip planes", (Long_t)planeSet.size());
          }
          // Limit to smaller of plane set size or GL implementation plane support
          Int_t maxGLPlanes;
@@ -1125,7 +1125,7 @@
    }
 
    // Loop over logicals -- it is much more efficient that way.
-   
+
    UInt_t count = 0;
 
    LogicalShapeMapIt_t lit = fLogicalShapes.begin();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLSphere.cxx root/graf3d/gl/src/TGLSphere.cxx
--- root-5.27.04/graf3d/gl/src/TGLSphere.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLSphere.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -90,7 +90,7 @@
 {
    // Debug tracing
    if (gDebug > 4) {
-      Info("TGLSphere::DirectDraw", "this %d (class %s) LOD %d", this, IsA()->GetName(), rnrCtx.ShapeLOD());
+      Info("TGLSphere::DirectDraw", "this %ld (class %s) LOD %d", (Long_t)this, IsA()->GetName(), rnrCtx.ShapeLOD());
    }
 
    // 4 stack/slice min for gluSphere to work
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLSurfacePainter.cxx root/graf3d/gl/src/TGLSurfacePainter.cxx
--- root-5.27.04/graf3d/gl/src/TGLSurfacePainter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLSurfacePainter.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -117,16 +117,16 @@
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    } else if (fSelectedPart > 0) {
       //Convert py into bottom-top orientation.
       py = fCamera->GetHeight() - py;
-      
+
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
 
@@ -139,7 +139,7 @@
       }
       else
          MoveSection(px, py);
-         
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -211,7 +211,7 @@
       if (fBoxCut.IsActive())
          fBoxCut.TurnOnOff();
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    } else if (event == kKeyPress && (py == kKey_c || py == kKey_C)) {
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLTF3Painter.cxx root/graf3d/gl/src/TGLTF3Painter.cxx
--- root-5.27.04/graf3d/gl/src/TGLTF3Painter.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLTF3Painter.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -34,7 +34,7 @@
 ClassImp(TGLTF3Painter)
 
 //______________________________________________________________________________
-TGLTF3Painter::TGLTF3Painter(TF3 *fun, TH1 *hist, TGLPlotCamera *camera, TGLPlotCoordinates *coord) 
+TGLTF3Painter::TGLTF3Painter(TF3 *fun, TH1 *hist, TGLPlotCamera *camera, TGLPlotCoordinates *coord)
                   : TGLPlotPainter(hist, camera, coord, kFALSE, kFALSE, kFALSE),
                     fStyle(kDefault),
                     fF3(fun),
@@ -111,20 +111,20 @@
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    } else if (fSelectedPart > 0) {
       //Convert py into bottom-top orientation.
       //Possibly, move box here
       py = fCamera->GetHeight() - py;
-      
+
       SaveModelviewMatrix();
       SaveProjectionMatrix();
 
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis)) {
             fBoxCut.MoveBox(px, py, fSelectedPart);
@@ -134,7 +134,7 @@
       } else {
          //MoveSection(px, py);
       }
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -173,7 +173,7 @@
       fXOYSectionPos = frame[0].Z();
 
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    }
@@ -292,7 +292,7 @@
 
    fBackBox.DrawBox(fSelectedPart, fSelectionPass, fZLevels, fHighColor);
    DrawSections();
-   
+
    if (fSelectionPass) {
       DrawToSelectionBuffer();
    } else if (fStyle == kDefault) {
@@ -327,7 +327,7 @@
 Bool_t TGLTF3Painter::HasSections() const
 {
    //Any section exists.
-   return fXOZSectionPos > fBackBox.Get3DBox()[0].Y() || 
+   return fXOZSectionPos > fBackBox.Get3DBox()[0].Y() ||
           fYOZSectionPos > fBackBox.Get3DBox()[0].X() ||
           fXOYSectionPos > fBackBox.Get3DBox()[0].Z();
 }
@@ -499,20 +499,20 @@
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    } else if (fSelectedPart > 0) {
       //Convert py into bottom-top orientation.
       //Possibly, move box here
       py = fCamera->GetHeight() - py;
-      
+
       SaveModelviewMatrix();
       SaveProjectionMatrix();
 
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis)) {
             fBoxCut.MoveBox(px, py, fSelectedPart);
@@ -522,7 +522,7 @@
       } else {
          //MoveSection(px, py);
       }
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
 
@@ -560,7 +560,7 @@
       fXOYSectionPos = frame[0].Z();
 
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    }
@@ -599,7 +599,7 @@
 
    fBackBox.DrawBox(fSelectedPart, fSelectionPass, fZLevels, fHighColor);
    DrawSections();
-   
+
    if (fIsos.size() != fColorLevels.size()) {
       Error("TGLIsoPainter::DrawPlot", "Non-equal number of levels and isos");
       return;
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLTH3Composition.cxx root/graf3d/gl/src/TGLTH3Composition.cxx
--- root-5.27.04/graf3d/gl/src/TGLTH3Composition.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLTH3Composition.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -77,7 +77,7 @@
 //______________________________________________________________________________
 char *TGLTH3Composition::GetObjectInfo(Int_t /*px*/, Int_t /*py*/) const
 {
-   //I cannot show bin content in a status bar - 
+   //I cannot show bin content in a status bar -
    //since there can be several bins in one.
    static char message[] = "TH3 composition";
    return message;
@@ -104,7 +104,7 @@
 ClassImp(TGLTH3CompositionPainter)
 
 //______________________________________________________________________________
-TGLTH3CompositionPainter::TGLTH3CompositionPainter(TGLTH3Composition *data, TGLPlotCamera *cam, 
+TGLTH3CompositionPainter::TGLTH3CompositionPainter(TGLTH3Composition *data, TGLPlotCamera *cam,
                                                    TGLPlotCoordinates *coord)
                              : TGLPlotPainter(data, cam, coord, kFALSE, kFALSE, kFALSE),
                                fData(data)
@@ -145,7 +145,7 @@
                                          fCoord->GetFirstYBin(),
                                          fCoord->GetFirstZBin());
    fMinMaxVal.first = fMinMaxVal.second;
-   
+
    for (UInt_t hNum = 0, lastH = fData->fHists.size(); hNum < lastH; ++hNum) {
       h = fData->fHists[hNum].first;
       for (Int_t ir = fCoord->GetFirstXBin(); ir <= fCoord->GetLastXBin(); ++ir) {
@@ -184,7 +184,7 @@
    if (fSelectedPart >= fSelectionBase) {//Pan camera.
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
       fCamera->Pan(px, py);
@@ -197,15 +197,15 @@
       py = fCamera->GetHeight() - py;
       SaveModelviewMatrix();
       SaveProjectionMatrix();
-      
+
       fCamera->SetCamera();
       fCamera->Apply(fPadPhi, fPadTheta);
-      
+
       if (!fHighColor) {
          if (fBoxCut.IsActive() && (fSelectedPart >= kXAxis && fSelectedPart <= kZAxis))
             fBoxCut.MoveBox(px, py, fSelectedPart);
       }
-      
+
       RestoreProjectionMatrix();
       RestoreModelviewMatrix();
    }
@@ -227,7 +227,7 @@
    if (event == kButton1Double && fBoxCut.IsActive()) {
       fBoxCut.TurnOnOff();
       if (!gVirtualX->IsCmdThread())
-         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", this));
+         gROOT->ProcessLineFast(Form("((TGLPlotPainter *)0x%lx)->Paint()", (ULong_t)this));
       else
          Paint();
    } else if (event == kKeyPress && (py == kKey_c || py == kKey_C)) {
@@ -403,7 +403,7 @@
 //______________________________________________________________________________
 void AxisError(const TString & errorMsg)
 {
-   Error("TGLTH3Composition::AddTH3", errorMsg.Data());
+   Error("TGLTH3Composition::AddTH3", "%s", errorMsg.Data());
    throw std::runtime_error(errorMsg.Data());
 }
 
@@ -413,7 +413,7 @@
    //Check number of bins.
    if (a1->GetNbins() != a2->GetNbins())
       AxisError("New hist has different number of bins along " + axisName);
-   
+
    //Check bin ranges.
    const Int_t firstBin1 = a1->GetFirst(), lastBin1 = a1->GetLast();
    const Int_t firstBin2 = a2->GetFirst(), lastBin2 = a2->GetLast();
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLViewer.cxx root/graf3d/gl/src/TGLViewer.cxx
--- root-5.27.04/graf3d/gl/src/TGLViewer.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLViewer.cxx	2010-08-16 19:18:23.000000000 +0200
@@ -462,7 +462,7 @@
    fLOD = LODInput;
 
    if (!gVirtualX->IsCmdThread())
-      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", this));
+      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", (ULong_t)this));
    else
       DoDraw();
 }
@@ -820,7 +820,7 @@
    fLOD = TGLRnrCtx::kLODHigh;
 
    if (!gVirtualX->IsCmdThread())
-      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", this));
+      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", (ULong_t)this));
    else
       DoDraw();
 
@@ -878,7 +878,7 @@
    }
    catch (std::runtime_error& exc)
    {
-      Error(eh, exc.what());
+      Error(eh, "%s",exc.what());
       return kFALSE;
    }
 
@@ -899,7 +899,7 @@
    fbo->Bind();
 
    if (!gVirtualX->IsCmdThread())
-      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", this));
+      gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoDraw()", (ULong_t)this));
    else
       DoDraw();
 
@@ -1144,7 +1144,7 @@
    }
 
    if (!gVirtualX->IsCmdThread())
-      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoSelect(%d, %d, %s)", this, x, y)));
+      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoSelect(%d, %d)", (ULong_t)this, x, y)));
    else
       return DoSelect(x, y);
 }
@@ -1211,7 +1211,7 @@
    }
 
    if (!gVirtualX->IsCmdThread())
-      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoSecondarySelect(%d, %d, %s)", this, x, y)));
+      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoSecondarySelect(%d, %d)", (ULong_t)this, x, y)));
    else
       return DoSecondarySelect(x, y);
 }
@@ -1234,7 +1234,7 @@
       if (gDebug > 0)
          Info("TGLViewer::SecondarySelect", "Skipping secondary selection "
               "(sinfo=0x%lx, pshape=0x%lx).\n",
-              fSelRec.GetSceneInfo(), fSelRec.GetPhysShape());
+              (Long_t)fSelRec.GetSceneInfo(), (Long_t)fSelRec.GetPhysShape());
       fSecSelRec.Reset();
       return kFALSE;
    }
@@ -1317,7 +1317,7 @@
    }
 
    if (!gVirtualX->IsCmdThread())
-      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoOverlaySelect(%d, %d)", this, x, y)));
+      return Bool_t(gROOT->ProcessLineFast(Form("((TGLViewer *)0x%lx)->DoOverlaySelect(%d, %d)", (ULong_t)this, x, y)));
    else
       return DoOverlaySelect(x, y);
 }
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TGLWidget.cxx root/graf3d/gl/src/TGLWidget.cxx
--- root-5.27.04/graf3d/gl/src/TGLWidget.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TGLWidget.cxx	2010-08-16 19:18:24.000000000 +0200
@@ -135,10 +135,9 @@
    {
       gVirtualX->GrabButton(GetId(), kAnyButton, kAnyModifier,
                             kButtonPressMask | kButtonReleaseMask, kNone, kNone);
-      gVirtualX->SelectInput(GetId(),
-                             kKeyPressMask | kExposureMask | kPointerMotionMask
-                             | kStructureNotifyMask | kFocusChangeMask
-                             | kEnterWindowMask | kLeaveWindowMask);
+      gVirtualX->SelectInput(GetId(), kKeyPressMask | kKeyReleaseMask | kExposureMask |
+                             kPointerMotionMask | kStructureNotifyMask | kFocusChangeMask |
+                             kEnterWindowMask | kLeaveWindowMask);
       gVirtualX->SetInputFocus(GetId());
    }
 }
@@ -483,7 +482,7 @@
 {
    // Handle mouse crossing event.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleCrossing((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleCrossing((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if ((ev->fType == kEnterNotify) &&
@@ -501,7 +500,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleButton((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleButton((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler)
@@ -514,7 +513,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleDoubleClick((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleDoubleClick((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler)
@@ -527,7 +526,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleConfigureNotify((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleConfigureNotify((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler && fEventHandler->HandleConfigureNotify(ev))
@@ -543,7 +542,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleFocusChange((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleFocusChange((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler)
@@ -556,7 +555,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleKey((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleKey((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler)
@@ -569,7 +568,7 @@
 {
    //Delegate call to the owner.
    if (!gVirtualX->IsCmdThread()) {
-      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleMotion((Event_t *)0x%lx)", this, ev));
+      gROOT->ProcessLineFast(Form("((TGLWidget *)0x%lx)->HandleMotion((Event_t *)0x%lx)", (ULong_t)this, (ULong_t)ev));
       return kTRUE;
    }
    if (fEventHandler)
@@ -588,4 +587,3 @@
    if (fEventHandler)
       return fEventHandler->Repaint();
 }
-
diff -Naur --exclude=.svn -I '@(#)root' -I '// Author' -I '\$Id' root-5.27.04/graf3d/gl/src/TX11GL.cxx root/graf3d/gl/src/TX11GL.cxx
--- root-5.27.04/graf3d/gl/src/TX11GL.cxx	2010-06-30 06:36:17.000000000 +0200
+++ root/graf3d/gl/src/TX11GL.cxx	2010-08-16 19:18:16.000000000 +0200
@@ -168,7 +168,7 @@
       TGLContext_t &ctx = fGLContexts[i];
 
       if (ctx.fGLXContext) {
-         ::Warning("TX11GLManager::~TX11GLManager", "opengl device with index %d was not destroyed", i);
+         ::Warning("TX11GLManager::~TX11GLManager", "opengl device with index %ld was not destroyed", (Long_t)i);
          glXDestroyContext(fDpy, ctx.fGLXContext);
 
          if (ctx.fPixmapIndex != -1) {
