#!/bin/sh
# Revision: $Revision: 1.6 $

if [ X"$(id -u)" = X0 ]; then
  echo "*** CMS SOFTWARE INSTALLATION ABORTED ***" 1>&2
  echo "CMS software cannot be installed as the super-user." 1>&2
  echo "(We recommend reading any standard unix security guide.)" 1>&2
  exit 1
fi

server=cmsrep.cern.ch
server_main_dir=cms/cpt/Software/download
repository=/cms
apt_dir=apt
groups="lcg cms external"

rootdir=$(pwd)
unsupportedDistribution=false
testInstance=false

while [ $# -gt 0 ]; do
  case $1 in
        setup )
          command=setup 
          shift ;;
        reseed )
          command=reseed
          shift;;
        -path )
          [ $# -gt 0 ] || { echo "Option \`$1' requires an argument" 1>&2; exit 1;  }
          if [ "$(echo $2 | cut -b 1)" != "/" ]; then
            rootdir="$PWD/$2"
          else
            rootdir="$2"
          fi
          shift; shift ;;
        -server )
          [ $# -gt 1 ] || { echo "Option \`$1' requires an argument" 1>&2; exit 1;  }
          server=$2
          testInstance=true
          shift; shift ;;
        -server-path )
          [ $# -gt 1 ] || { echo "Option \`$1' requires an argument" 1>&2; exit 1;  }
          server_main_dir=`echo $2 | sed -e "s|\(.*\)/.*/.*|\1|"`
          apt_dir=`echo $2 | sed -e "s|.*/||"`
          repository=/`echo $2 | sed -e "s|.*/\(.*\)/.*|\1|"`
          echo "server_main_dir $server_main_dir"
          echo "apt_dir $apt_dir"
          echo "repository $repository"
          testInstance=true
          shift; shift ;;
        -repository )
          [ $# -gt 1 ] || { echo "Option \`$1' requires an argument" 1>&2; exit 1;  }
          repository=/$2; shift; shift ;;
        -groups )
          [ $# -gt 1 ] || { echo "Option \`$1' requires at lease one argument" 1>&2; exit 1; }
          shift
          groups=""
          while [ "$(echo $1 | cut -b1)" != "-" ] && [ $# -gt 0 ]
          do
            groups="$groups $1"
            shift
          done
          testInstance=true
          ;;
        -unsupported_distribution_hack )
          unsupportedDistribution=true; shift
          ;;
        -help )
          cat << \EOF_HELP 
bootstrap.sh 

A script to bootstrap a CMS software area.

Syntax:
bootstrap.sh setup [-path <cms-path>] [-server <server>] [-server-path <download-path>] 

-path <cms-path> : location of where the installation must be done (default $PWD).
-server <server>  : repositories are to be found on server <server> (default cmsrep.cern.ch).
-server-path <download-path> : package structure is found on <download-path> on server (default cms/cpt/Software/download/apt).
-repository <repository> : use private apt repository cms.<username> (default: public repository)
-groups <groups-list> : list of the channels we want to subscribe to (default: "cms external lcg virtual").
EOF_HELP
        exit 1
        ;;
        * )
            echo "bootstrap.sh: argument $1 not supported"; exit 1;;
    esac
done

rpmdb=@CMSPLATF@/var/lib/rpm
rpmlock=$rootdir/@CMSPLATF@/var/lib/rpm/lock

perlHarvester () {
	echo Harvesting for perl modules >&2
    for x in $(perl -e'print join "\n", @INC')
    do
        find -L $x  \
		| grep -v -e '\(^[.]/\|[/]$\)' \
		| grep -e '\([.]pm$\|[.]pl$\|[.]pod$\)' \
		| sed -e "s|$x/||;s|[.]pm||;s|[.]pod||;s|/|::|g;s|^\(.*\)|Provides: perl(\1)|" 2> /dev/null
	done
}

generateSeedSpec () {
    # Seed system info
    # GL asound odbc java libtcl libtk
    echo "Seeding RPM database from selected system RPMs."
    seed="glibc glibc-32bit coreutils bash tcsh zsh pdksh perl tcl tk perl-Tk
          readline openssl ncurses XFree86-libs 
          e2fsprogs krb5-libs freetype fontconfig XFree86-Mesa-libGLU XFree86-Mesa-libGL 
          xorg-x11-deprecated-libs xorg-x11-libs xorg-x11-Mesa-libGLU xorg-x11-Mesa-libGL compat-libstdc++-33 fglrx_6_8_0 libidn"

    # Seed the system compiler for ydl5_ppc64_gcc411
    if [ "$(uname -p)" == "ppc64" ]
    then
       seed="$seed gcc libgcc libstdc++"
    fi
    
    if [ "$unsupportedDistribution" != "false" ]
    then
        echo "WARNING: you are running on an unsupported distribution. This might lead to unknown problems."
        seed="$seed xorg-x11-Mesa compat-readline4 compat-curl2 freetype2 xorg-x11-libX11"
    fi
    
     tmp=$rootdir/@CMSPLATF@/tmp/system-import
     rm -rf $tmp
     mkdir -p $tmp
     cd $tmp
     mkdir -p SOURCES BUILD SPEC RPMS SRPMS tmp
     : > SOURCES/none
     # FIXME: It might be better to use rootdir rather than PWD
     (echo "%define _sourcedir      $PWD/SOURCES"
      echo "%define _builddir       $PWD/BUILD"
      echo "%define _specdir        $PWD/SPEC"
      echo "%define _rpmdir         $PWD/RPMS"
      echo "%define _srcrpmdir      $PWD/SRPMS"
      echo "%define _tmppath        $PWD/tmp"
      echo "%define _topdir         $PWD"
      echo "%define _rpmfilename    system-base-import.rpm"
      echo;
      echo "Name: system-base-import"
      echo "Version: 1.0"
      echo "Release: `date +%s`"
      echo "Summary: Base system seed"
      echo "License: Unknown"
      echo "Group: Hacks"
      echo "Packager: install.sh"
      echo "Source: none"
      # echo "Provides: perl(+=)"
      # echo "Provides: perl(=)"
      
      if [ "$unsupportDistribution" != "false" ]
      then
        echo "Provides: libtcl8.3.so"
        echo "Provides: libtk8.3.so"
        echo "Provides: /bin/env"
        echo "Provides: libcom_err.so.3" 
        echo "Provides: libcrypto.so.4" 
        echo "Provides: libgssapi_krb5.so.2" 
        echo "Provides: libk5crypto.so.3" 
        echo "Provides: libkrb5.so.3" 
        echo "Provides: libssl.so.4"
      fi
      
      if [ "$(uname -s)" == "Darwin" ]
      then
    	find /bin | sed 's!^!Provides: !'
    	/bin/ls -1 /usr/lib/*.dylib | awk -F"/" '{print $4}' | sed 's!^!Provides: !'
    	/bin/ls -1 /usr/lib/*/*.dylib | awk -F"/" '{print $5}' | sed 's!^!Provides: !'
        /bin/ls -1 /usr/X11R6/lib/*.dylib | awk -F"/" '{print $5}' | sed 's!^!Provides: !'
            echo "Provides: AGL"
            echo "Provides: ApplicationServices"
            echo "Provides: Carbon"
            echo "Provides: CoreFoundation"
            echo "Provides: CoreServices"
            echo "Provides: OpenGL"
            echo "Provides: Python"
            echo "Provides: QuickTime"
            echo "Provides: Tcl"
            echo "Provides: Tk"
      fi
      if [ "$(which dpkg 2>&1 | grep 'no dpkg' )" == "" ]
      then
    	echo "dpkg found in $(which dpkg), using it to seed the database." >&2
    	for p in $seed; do
    	  if [ "$(dpkg -L $p 2>&1 | grep 'is not installed')" == "" ]; then
          	  dpkg -L $p 2>/dev/null | sed -e "s|^|Provides:|"
          fi
    	done
    	perlHarvester
      fi
      if which rpm 2>&1 >/dev/null && [ "$(rpm -qa 2>&1 | grep 'use alien')" == "" ]
      then
    	echo "rpm found in $(which rpm), using it to seed the database." >&2
    	  for p in $seed; do
    	    rpm -q $p --provides | grep -v "not installed" | sed 's!<*=.*!!; s!^!Provides: !'
    	    rpm -q $p --list | grep '\.so' | sed 's!^.*/!Provides: !'
    	    rpm -q $p --list | grep '/bin/' | sed 's!^!Provides: !'
    	  done
      fi
      echo; echo "%description"; echo "Seeds RPM repository from the base system."
      echo; echo "%prep"; echo "%build"; echo "%install"; echo "%files";
     ) > system-base-import.spec
    cd $was
}

seed ()
{
    cd tmp
    (rpmbuild -ba system-base-import.spec
     echo Seeding database in in $rootdir/$rpmdb
     rpm --define "_rpmlock_path $rpmlock" --dbpath $rootdir/$rpmdb -Uvh RPMS/system-base-import.rpm
    ) || exit $?
    cd $was
}

setup() {
# Fetch the required RPMS for RPM and APT from the server and install them using rpmcpio
export DOWNLOAD_DIR=$rootdir/tmp/BOOTSTRAP
mkdir -p $DOWNLOAD_DIR
cd $DOWNLOAD_DIR
downloadPath=$server/$server_main_dir/$repository/RPMS/@CMSPLATF@
wget $downloadPath/external+gcc+@GCC_VERSION@-1-@GCC_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+expat+@EXPAT_VERSION@-1-@EXPAT_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+openssl+@OPENSSL_VERSION@-1-@OPENSSL_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+db4+@DB4_VERSION@-1-@DB4_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+beecrypt+@BEECRYPT_VERSION@-1-@BEECRYPT_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+zlib+@ZLIB_VERSION@-1-@ZLIB_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+bz2lib+@BZ2LIB_VERSION@-1-@BZ2LIB_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+elfutils+@ELFUTILS_VERSION@-1-@ELFUTILS_REVISION@.@CMSPLATF@.rpm 
wget $downloadPath/external+neon+@NEON_VERSION@-1-@NEON_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+rpm+@RPM_VERSION@-1-@RPM_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+libxml2+@LIBXML2_VERSION@-1-@LIBXML2_REVISION@.@CMSPLATF@.rpm
wget $downloadPath/external+apt+@APT_VERSION@-1-@APT_REVISION@.@CMSPLATF@.rpm 
was=`pwd`
cd $rootdir
if [ -f $rootdir/$rpmdb ]
then
    read -e -p "Warning, $rootdir already set up. Do you want to reconfigure it? [ y / N ] " override
    case $(echo $override | tr [A-Z] [a-z]) in
        y|ye|yes) ;;
        *) echo "No changes made. Exiting... "; exit 1;;
    esac
else
    mkdir -p $rootdir/$rpmdb
fi
# Extract the packages via rpm, source the init.sh
rpm2cpio $DOWNLOAD_DIR/external+gcc+@GCC_VERSION@-1-@GCC_REVISION@.@CMSPLATF@.rpm | cpio -id  
rpm2cpio $DOWNLOAD_DIR/external+expat+@EXPAT_VERSION@-1-@EXPAT_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+db4+@DB4_VERSION@-1-@DB4_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+beecrypt+@BEECRYPT_VERSION@-1-@BEECRYPT_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+zlib+@ZLIB_VERSION@-1-@ZLIB_REVISION@.@CMSPLATF@.rpm | cpop -id
rpm2cpio $DOWNLOAD_DIR/external+bz2lib+@BZ2LIB_VERSION@-1-@BZ2LIB_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+elfutil+@ELFUTILS_VERSION@-1-@ELFUTILS_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+neon+@NEON_VERSION@-1-@NEON_REVISION@.@CMSPLATF@.rpm | cpio -id
rpm2cpio $DOWNLOAD_DIR/external+rpm+@RPM_VERSION@-1-@RPM_REVISION@.@CMSPLATF@.rpm | cpio -id
# Generate the seed spec using the old rpm:
generateSeedSpec
# Now move to use the new RPM by sourcing its init.sh
source $arch/external/rpm/@RPM_VERSION@/etc/profile.d/init.sh
# Initialise the rpmdb using the new rpm.
rpm --define "_rpmlock_path $rpmlock" --dbpath $rootdir/$rpmdb --initdb
# Build the seed spec and install it, in order to seed the newly generated db.
seed
# Install the packages, this time using rpm.
rpm -ivh $DOWNLOAD_DIR/extarnal+gcc+@GCC_VERSION@-1-@GCC_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+expat+@EXPAT_VERSION@-1-@EXPAT_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+db4+@DB4_VERSION@-1-@DB4_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+beecrypt+@BEECRYPT_VERSION@-1-@BEECRYPT_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+zlib+@ZLIB_VERSION@-1-@ZLIB_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+bz2lib+@BZ2LIB_VERSION@-1-@BZ2LIB_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+elfutils+@ELFUTILS_VERSION@-1-@ELFUTILS_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+neon+@NEON_VERSION@-1-@NEON_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/extarnal+rpm+@RPM_VERSION@-1-@RPM_REVISION@.@CMSPLATF@.rpm
# Install the packages required by apt
rpm -ivh $DOWNLOAD_DIR/extarnal+openssl+@OPENSSL_VERSION@-1-@OPENSSL_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/external+libxml2+@LIBXML2_VERSION@-1-@LIBXML2_REVISION@.@CMSPLATF@.rpm
rpm -ivh $DOWNLOAD_DIR/external+apt+@APT_VERSION@-1-@APT_REVISION@.@CMSPLATF@.rpm
# Source the apt environment and upgrade what's already there.
source $rootdir/@CMSPLATF@/external/apt/@APT_VERSION@/etc/profile.d/init.sh
apt-get update
apt-get dist-upgrade

was=`pwd`
cd $rootdir 

rm -rf $rootdir/$rpmdb
mkdir -p $rootdir/$rpmdb
rpm --define "_rpmlock_path $rpmlock" --dbpath $rootdir/$rpmdb --initdb 
# If we want to use a test instance, we need to adjust the sources.list accordingly.
if [ "$testInstance" == "true" ]
then
    perl -p -i -e "s/^/#/;s/###//;
                   s/\@GROUPS\@/$groups/;
                   s/\@SERVER\@/$server/;
                   s/\@SERVER_PATH\@/$server_main_dir/;
                   s/\@REPOSITORY\@/$repository/" $rootdir/@CMSPLATF@/etc/apt/sources.list
fi

cd $was
}

##########################################################
case $command in
    setup )
        setup ;;
    reseed )
        seed ;;
esac

exit 0
