diff -Naur orig.root/core/meta/inc/TClass.h root/core/meta/inc/TClass.h
--- orig.root/core/meta/inc/TClass.h	2008-12-18 09:56:32.000000000 +0100
+++ root/core/meta/inc/TClass.h	2009-01-13 22:08:16.000000000 +0100
@@ -210,6 +210,7 @@
    void               CalculateStreamerOffset();
    Bool_t             CanSplit() const;
    Bool_t             CanIgnoreTObjectStreamer() { return TestBit(kIgnoreTObjectStreamer);}
+   TObject           *Clone(const char *newname="") const;
    void               CopyCollectionProxy(const TVirtualCollectionProxy&);
    void               Draw(Option_t *option="");
    void               Dump() const { TDictionary::Dump(); }
diff -Naur orig.root/core/meta/src/TClass.cxx root/core/meta/src/TClass.cxx
--- orig.root/core/meta/src/TClass.cxx	2008-12-18 09:56:31.000000000 +0100
+++ root/core/meta/src/TClass.cxx	2009-01-13 22:08:16.000000000 +0100
@@ -58,6 +58,7 @@
 #include "THashTable.h"
 #include "TSchemaRuleSet.h"
 #include "TGenericClassInfo.h"
+#include "TIsAProxy.h"
 
 #include <cstdio>
 #include <cctype>
@@ -1513,6 +1514,55 @@
 }
 
 //______________________________________________________________________________
+TObject *TClass::Clone(const char *new_name) const
+{
+   if (new_name == 0 || new_name[0]=='\0' || fName == new_name) {
+      Error("Clone","The name of the class must be changed when cloning a TClass object.");
+      return 0;
+   }
+   TClass *copy;
+   if (fTypeInfo) {
+      copy = new TClass(new_name,
+                             fClassVersion,
+                             *fTypeInfo,
+                             new TIsAProxy(*fTypeInfo),
+                             fShowMembers,
+                             GetDeclFileName(),
+                             GetImplFileName(),
+                             GetDeclFileLine(),
+                             GetImplFileLine());
+   } else {
+      copy = new TClass(new_name,
+                        fClassVersion,
+                        GetDeclFileName(),
+                        GetImplFileName(),
+                        GetDeclFileLine(),
+                        GetImplFileLine());
+      copy->fShowMembers = fShowMembers;
+   }      
+
+   copy->SetNew(fNew);
+   copy->SetNewArray(fNewArray);
+   copy->SetDelete(fDelete);
+   copy->SetDeleteArray(fDeleteArray);
+   copy->SetDestructor(fDestructor);
+   copy->SetDirectoryAutoAdd(fDirAutoAdd);
+   if (fStreamer) {
+      copy->AdoptStreamer(fStreamer->Generate());
+   }
+   // If IsZombie is true, something went wront and we will not be
+   // able to properly copy the collection proxy
+   if (fCollectionProxy && !copy->IsZombie()) {
+      copy->CopyCollectionProxy(*fCollectionProxy);
+   }
+   copy->SetClassSize(fSizeof);
+   if (fRefProxy) {
+      copy->AdoptReferenceProxy( fRefProxy->Clone() );
+   }
+   return copy;
+}   
+
+//______________________________________________________________________________
 void TClass::CopyCollectionProxy(const TVirtualCollectionProxy &orig)
 {
    // Copy the argument.
