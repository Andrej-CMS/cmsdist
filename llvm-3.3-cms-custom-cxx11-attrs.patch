:100644 100644 441a79a... 1fbb841... M	include/clang/Basic/Attr.td
:100644 100644 e001bd4... b7ce73d... M	include/clang/Basic/DiagnosticParseKinds.td
:100644 100644 f1fbbb1... 24add25... M	lib/Parse/ParseDeclCXX.cpp
:100644 100644 7b3345a... 8af2fcd... M	lib/Sema/SemaDeclAttr.cpp

diff --git a/include/clang/Basic/Attr.td b/include/clang/Basic/Attr.td
index 441a79a..1fbb841 100644
--- a/include/clang/Basic/Attr.td
+++ b/include/clang/Basic/Attr.td
@@ -144,6 +144,17 @@ class IgnoredAttr : Attr {
 // Attributes begin here
 //
 
+def CMSThreadSafe : InheritableAttr {
+  let Spellings = [ CXX11<"cms","thread_safe"> ];
+  let Subjects = [Function,Var];
+}
+
+def CMSThreadGuard : InheritableAttr {
+  let Spellings = [ CXX11<"cms","thread_guard"> ];
+  let Subjects = [Var];
+  let Args = [StringArgument<"GuardVar">];
+}
+
 def AddressSpace : Attr {
   let Spellings = [GNU<"address_space">];
   let Args = [IntArgument<"AddressSpace">];
diff --git a/include/clang/Basic/DiagnosticParseKinds.td b/include/clang/Basic/DiagnosticParseKinds.td
index e001bd4..b7ce73d 100644
--- a/include/clang/Basic/DiagnosticParseKinds.td
+++ b/include/clang/Basic/DiagnosticParseKinds.td
@@ -825,6 +825,8 @@ def err_omp_unknown_directive : Error <
   "expected an OpenMP directive">;
 def err_omp_unexpected_directive : Error <
   "unexpected OpenMP directive '#pragma omp %0'">;
+// for CMS
+def err_cms_expected_string_literal : Error< "expected string literal as argument to cms::thread_guard(guard var name)">;
 
 } // end of Parse Issue category.
 
diff --git a/lib/Parse/ParseDeclCXX.cpp b/lib/Parse/ParseDeclCXX.cpp
index f1fbbb1..24add25 100644
--- a/lib/Parse/ParseDeclCXX.cpp
+++ b/lib/Parse/ParseDeclCXX.cpp
@@ -3175,6 +3175,38 @@ void Parser::ParseCXX11AttributeSpecifier(ParsedAttributes &attrs,
     bool StandardAttr = IsBuiltInOrStandardCXX11Attribute(AttrName,ScopeName);
     bool AttrParsed = false;
 
+    if (ScopeName && ScopeName->getName() == "cms") { 
+      if ( AttrName->isStr("thread_guard") ) {
+        BalancedDelimiterTracker Parens(*this, tok::l_paren);
+        if (Parens.consumeOpen()) {
+          Diag(Tok.getLocation(), diag::err_expected_lparen);
+          SkipUntil(tok::r_square,true,true);
+          break;
+	}
+        if (!isTokenStringLiteral()) {
+          Diag(Tok.getLocation(), diag::err_cms_expected_string_literal);
+          SkipUntil(tok::r_paren,false,true);
+          Parens.consumeClose();
+          break;
+        }
+        ExprVector ArgExprs;
+        ExprResult GuardVarExpr = ParseStringLiteralExpression();
+        Parens.consumeClose();
+        ArgExprs.push_back(GuardVarExpr.release());
+        attrs.addNew(AttrName,
+                SourceRange(ScopeLoc , AttrLoc),
+                ScopeName, ScopeLoc, 0,
+                SourceLocation(), ArgExprs.data(), ArgExprs.size(), AttributeList::AS_CXX11);
+      } else {
+        attrs.addNew(AttrName,
+                SourceRange(ScopeLoc , AttrLoc),
+                ScopeName, ScopeLoc, 0,
+                SourceLocation(), 0, 0, AttributeList::AS_CXX11);
+      }
+      AttrParsed = true;
+    }
+
+
     if (StandardAttr &&
         !SeenAttrs.insert(std::make_pair(AttrName, AttrLoc)).second)
       Diag(AttrLoc, diag::err_cxx11_attribute_repeated)
diff --git a/lib/Sema/SemaDeclAttr.cpp b/lib/Sema/SemaDeclAttr.cpp
index 7b3345a..8af2fcd 100644
--- a/lib/Sema/SemaDeclAttr.cpp
+++ b/lib/Sema/SemaDeclAttr.cpp
@@ -4683,6 +4683,51 @@ static void handleForceInlineAttr(Sema &S, Decl *D, const AttributeList &Attr) {
     S.Diag(Attr.getLoc(), diag::warn_attribute_ignored) << Attr.getName();
 }
 
+
+static void handleCMSThreadSafeAttr(Sema &S, Decl *D, const AttributeList &Attr) {
+
+    assert(!Attr.isInvalid());
+
+    if (!isa<FunctionDecl>(D) && !isa<VarDecl>(D))  {
+      S.Diag(Attr.getLoc(), diag::warn_attribute_wrong_decl_type)
+        << Attr.getName() << ExpectedVariableOrFunction;
+      return;
+    }
+
+    D->addAttr( ::new (S.Context) CMSThreadSafeAttr(Attr.getRange(),
+						S.Context));
+}
+
+static void handleCMSThreadGuardAttr(Sema &S, Decl *D, const AttributeList &Attr) {
+
+    assert(!Attr.isInvalid());
+
+    if (!(isa<VarDecl>(D) ))  {
+      S.Diag(Attr.getLoc(), diag::warn_attribute_wrong_decl_type)
+        << Attr.getName() << ExpectedVariable;
+      return;
+    }
+
+  if (Attr.getNumArgs() != 1) {
+    S.Diag(Attr.getLoc(), diag::err_attribute_wrong_number_arguments) << 1;
+    return;
+  }
+
+  Expr *Arg = Attr.getArg(0);
+  Arg = Arg->IgnoreParenCasts();
+  StringLiteral *Str = dyn_cast<StringLiteral>(Arg);
+
+  if (!Str || !Str->isAscii()) {
+    S.Diag(Attr.getLoc(), diag::err_attribute_argument_n_not_string)
+      << "thread_guard" << 1;
+    return;
+  }
+
+    D->addAttr( ::new (S.Context) CMSThreadGuardAttr(Attr.getRange(),S.Context,
+                                         Str->getString(),
+                                         Attr.getAttributeSpellingListIndex()));
+}
+
 //===----------------------------------------------------------------------===//
 // Top Level Sema Entry Points
 //===----------------------------------------------------------------------===//
@@ -4983,6 +5028,13 @@ static void ProcessInheritableDeclAttr(Sema &S, Scope *scope, Decl *D,
     handleTypeTagForDatatypeAttr(S, D, Attr);
     break;
 
+  case AttributeList::AT_CMSThreadSafe: 
+    handleCMSThreadSafeAttr(S, D, Attr); 
+    break;
+  case AttributeList::AT_CMSThreadGuard: 
+    handleCMSThreadGuardAttr(S, D, Attr); 
+    break;
+
   default:
     // Ask target about the attribute.
     const TargetAttributesSema &TargetAttrs = S.getTargetAttributesSema();
